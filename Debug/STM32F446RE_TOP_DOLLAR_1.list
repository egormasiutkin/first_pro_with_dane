
STM32F446RE_TOP_DOLLAR_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c078  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000622d4  0800c248  0800c248  0001c248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806e51c  0806e51c  00080084  2**0
                  CONTENTS
  4 .ARM          00000008  0806e51c  0806e51c  0007e51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806e524  0806e524  00080084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806e524  0806e524  0007e524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806e528  0806e528  0007e528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0806e52c  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d8  20000084  0806e5b0  00080084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a5c  0806e5b0  00080a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00080084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000800b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012806  00000000  00000000  000800f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029e7  00000000  00000000  000928fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b08  00000000  00000000  000952e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000146b  00000000  00000000  00096df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c59  00000000  00000000  0009825b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170a2  00000000  00000000  000baeb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0506  00000000  00000000  000d1f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ae4  00000000  00000000  001a245c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001a9f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c230 	.word	0x0800c230

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	0800c230 	.word	0x0800c230

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <SSD2828_Reset>:
#include "main.h"
#include "2828.h"
#include "RA8876.h"
void SSD2828_Reset(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD2828_RST_GPIO_Port, SSD2828_RST_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	480f      	ldr	r0, [pc, #60]	; (80005f4 <SSD2828_Reset+0x48>)
 80005b6:	f008 fa71 	bl	8008a9c <HAL_GPIO_WritePin>
	HAL_Delay(30);
 80005ba:	201e      	movs	r0, #30
 80005bc:	f007 fefa 	bl	80083b4 <HAL_Delay>
	HAL_GPIO_WritePin(SSD2828_RST_GPIO_Port, SSD2828_RST_Pin, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2120      	movs	r1, #32
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <SSD2828_Reset+0x48>)
 80005c6:	f008 fa69 	bl	8008a9c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80005ca:	2032      	movs	r0, #50	; 0x32
 80005cc:	f007 fef2 	bl	80083b4 <HAL_Delay>
	HAL_GPIO_WritePin(SSD2828_CS_GPIO_Port, SSD2828_CS_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2101      	movs	r1, #1
 80005d4:	4808      	ldr	r0, [pc, #32]	; (80005f8 <SSD2828_Reset+0x4c>)
 80005d6:	f008 fa61 	bl	8008a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2102      	movs	r1, #2
 80005de:	4806      	ldr	r0, [pc, #24]	; (80005f8 <SSD2828_Reset+0x4c>)
 80005e0:	f008 fa5c 	bl	8008a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2104      	movs	r1, #4
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <SSD2828_Reset+0x4c>)
 80005ea:	f008 fa57 	bl	8008a9c <HAL_GPIO_WritePin>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40020800 	.word	0x40020800
 80005f8:	40020400 	.word	0x40020400

080005fc <SPI_3W_SET_Cmd>:

void SPI_3W_SET_Cmd(unsigned int Sdata)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	unsigned char i;
	HAL_GPIO_WritePin(SSD2828_CS_GPIO_Port, SSD2828_CS_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2101      	movs	r1, #1
 8000608:	4822      	ldr	r0, [pc, #136]	; (8000694 <SPI_3W_SET_Cmd+0x98>)
 800060a:	f008 fa47 	bl	8008a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2104      	movs	r1, #4
 8000612:	4820      	ldr	r0, [pc, #128]	; (8000694 <SPI_3W_SET_Cmd+0x98>)
 8000614:	f008 fa42 	bl	8008a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2102      	movs	r1, #2
 800061c:	481d      	ldr	r0, [pc, #116]	; (8000694 <SPI_3W_SET_Cmd+0x98>)
 800061e:	f008 fa3d 	bl	8008a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2102      	movs	r1, #2
 8000626:	481b      	ldr	r0, [pc, #108]	; (8000694 <SPI_3W_SET_Cmd+0x98>)
 8000628:	f008 fa38 	bl	8008a9c <HAL_GPIO_WritePin>

	for(i=8; i>0; i--) {
 800062c:	2308      	movs	r3, #8
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e01f      	b.n	8000672 <SPI_3W_SET_Cmd+0x76>
		if(Sdata&0x80)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000638:	2b00      	cmp	r3, #0
 800063a:	d005      	beq.n	8000648 <SPI_3W_SET_Cmd+0x4c>
			HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	2104      	movs	r1, #4
 8000640:	4814      	ldr	r0, [pc, #80]	; (8000694 <SPI_3W_SET_Cmd+0x98>)
 8000642:	f008 fa2b 	bl	8008a9c <HAL_GPIO_WritePin>
 8000646:	e004      	b.n	8000652 <SPI_3W_SET_Cmd+0x56>
		else
			HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	2104      	movs	r1, #4
 800064c:	4811      	ldr	r0, [pc, #68]	; (8000694 <SPI_3W_SET_Cmd+0x98>)
 800064e:	f008 fa25 	bl	8008a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2102      	movs	r1, #2
 8000656:	480f      	ldr	r0, [pc, #60]	; (8000694 <SPI_3W_SET_Cmd+0x98>)
 8000658:	f008 fa20 	bl	8008a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2102      	movs	r1, #2
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <SPI_3W_SET_Cmd+0x98>)
 8000662:	f008 fa1b 	bl	8008a9c <HAL_GPIO_WritePin>
		Sdata <<= 1;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
	for(i=8; i>0; i--) {
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	3b01      	subs	r3, #1
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1dc      	bne.n	8000632 <SPI_3W_SET_Cmd+0x36>
	}
	HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2102      	movs	r1, #2
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <SPI_3W_SET_Cmd+0x98>)
 800067e:	f008 fa0d 	bl	8008a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_CS_GPIO_Port, SSD2828_CS_Pin, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	2101      	movs	r1, #1
 8000686:	4803      	ldr	r0, [pc, #12]	; (8000694 <SPI_3W_SET_Cmd+0x98>)
 8000688:	f008 fa08 	bl	8008a9c <HAL_GPIO_WritePin>
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40020400 	.word	0x40020400

08000698 <SPI_3W_SET_PAs>:

void SPI_3W_SET_PAs(unsigned int Sdata)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	unsigned char i;
	HAL_GPIO_WritePin(SSD2828_CS_GPIO_Port, SSD2828_CS_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2101      	movs	r1, #1
 80006a4:	4822      	ldr	r0, [pc, #136]	; (8000730 <SPI_3W_SET_PAs+0x98>)
 80006a6:	f008 f9f9 	bl	8008a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2104      	movs	r1, #4
 80006ae:	4820      	ldr	r0, [pc, #128]	; (8000730 <SPI_3W_SET_PAs+0x98>)
 80006b0:	f008 f9f4 	bl	8008a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2102      	movs	r1, #2
 80006b8:	481d      	ldr	r0, [pc, #116]	; (8000730 <SPI_3W_SET_PAs+0x98>)
 80006ba:	f008 f9ef 	bl	8008a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2102      	movs	r1, #2
 80006c2:	481b      	ldr	r0, [pc, #108]	; (8000730 <SPI_3W_SET_PAs+0x98>)
 80006c4:	f008 f9ea 	bl	8008a9c <HAL_GPIO_WritePin>

	for(i=8; i>0; i--) {
 80006c8:	2308      	movs	r3, #8
 80006ca:	73fb      	strb	r3, [r7, #15]
 80006cc:	e01f      	b.n	800070e <SPI_3W_SET_PAs+0x76>
		if(Sdata&0x80)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d005      	beq.n	80006e4 <SPI_3W_SET_PAs+0x4c>
			HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2104      	movs	r1, #4
 80006dc:	4814      	ldr	r0, [pc, #80]	; (8000730 <SPI_3W_SET_PAs+0x98>)
 80006de:	f008 f9dd 	bl	8008a9c <HAL_GPIO_WritePin>
 80006e2:	e004      	b.n	80006ee <SPI_3W_SET_PAs+0x56>
		else
			HAL_GPIO_WritePin(SSD2828_SDO_GPIO_Port, SSD2828_SDO_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2104      	movs	r1, #4
 80006e8:	4811      	ldr	r0, [pc, #68]	; (8000730 <SPI_3W_SET_PAs+0x98>)
 80006ea:	f008 f9d7 	bl	8008a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2102      	movs	r1, #2
 80006f2:	480f      	ldr	r0, [pc, #60]	; (8000730 <SPI_3W_SET_PAs+0x98>)
 80006f4:	f008 f9d2 	bl	8008a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2102      	movs	r1, #2
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <SPI_3W_SET_PAs+0x98>)
 80006fe:	f008 f9cd 	bl	8008a9c <HAL_GPIO_WritePin>
		Sdata <<= 1;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
	for(i=8; i>0; i--) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	3b01      	subs	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1dc      	bne.n	80006ce <SPI_3W_SET_PAs+0x36>
	}

	HAL_GPIO_WritePin(SSD2828_SCK_GPIO_Port, SSD2828_SCK_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2102      	movs	r1, #2
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <SPI_3W_SET_PAs+0x98>)
 800071a:	f008 f9bf 	bl	8008a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD2828_CS_GPIO_Port, SSD2828_CS_Pin, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	2101      	movs	r1, #1
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <SPI_3W_SET_PAs+0x98>)
 8000724:	f008 f9ba 	bl	8008a9c <HAL_GPIO_WritePin>
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40020400 	.word	0x40020400

08000734 <SPI_WriteData>:

	return Value;
}

void SPI_WriteData(unsigned char value)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	SPI_3W_SET_PAs(value);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ffa9 	bl	8000698 <SPI_3W_SET_PAs>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <SPI_WriteCmd>:

void SPI_WriteCmd(unsigned char value)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
	SPI_3W_SET_Cmd(value);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff4e 	bl	80005fc <SPI_3W_SET_Cmd>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <SSD2828_initial>:

}


void  SSD2828_initial()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

	SPI_WriteCmd(0xb7);
 800076c:	20b7      	movs	r0, #183	; 0xb7
 800076e:	f7ff ffee 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x50);//50=TX_CLK 70=PCLK
 8000772:	2050      	movs	r0, #80	; 0x50
 8000774:	f7ff ffde 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);   //Configuration Register
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ffdb 	bl	8000734 <SPI_WriteData>

	SPI_WriteCmd(0xb8);
 800077e:	20b8      	movs	r0, #184	; 0xb8
 8000780:	f7ff ffe5 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x00);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff ffd5 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);   //VC(Virtual ChannelID) Control Register
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ffd2 	bl	8000734 <SPI_WriteData>

	SPI_WriteCmd(0xb9);
 8000790:	20b9      	movs	r0, #185	; 0xb9
 8000792:	f7ff ffdc 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x00);//1=PLL disable
 8000796:	2000      	movs	r0, #0
 8000798:	f7ff ffcc 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff ffc9 	bl	8000734 <SPI_WriteData>



 	SPI_WriteCmd(0xBA);//PLL=(TX_CLK/MS)*NS
 80007a2:	20ba      	movs	r0, #186	; 0xba
 80007a4:	f7ff ffd3 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x14);//14,D7-0=NS(0x01 : NS=1)
 80007a8:	2014      	movs	r0, #20
 80007aa:	f7ff ffc3 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x42);//42,D15-14=PLL00=62.5-125 01=126-250 10=251-500 11=501-1000  DB12-8=MS(01:MS=1)
 80007ae:	2042      	movs	r0, #66	; 0x42
 80007b0:	f7ff ffc0 	bl	8000734 <SPI_WriteData>



	SPI_WriteCmd(0xBB);//LP Clock Divider LP clock = 400MHz / LPD / 8 = 480 / 8/ 8 = 7MHz
 80007b4:	20bb      	movs	r0, #187	; 0xbb
 80007b6:	f7ff ffca 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x03);//D5-0=LPD=0x1 C Divide by 2
 80007ba:	2003      	movs	r0, #3
 80007bc:	f7ff ffba 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff ffb7 	bl	8000734 <SPI_WriteData>

	 SPI_WriteCmd(0xb9);
 80007c6:	20b9      	movs	r0, #185	; 0xb9
 80007c8:	f7ff ffc1 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x01);//1=PLL disable
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff ffb1 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff ffae 	bl	8000734 <SPI_WriteData>
	//MIPI lane configuration
	SPI_WriteCmd(0xDE);
 80007d8:	20de      	movs	r0, #222	; 0xde
 80007da:	f7ff ffb8 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x00);//11=4LANE 10=3LANE 01=2LANE 00=1LANE
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff ffa8 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ffa5 	bl	8000734 <SPI_WriteData>

	SPI_WriteCmd(0xc9);
 80007ea:	20c9      	movs	r0, #201	; 0xc9
 80007ec:	f7ff ffaf 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x02);
 80007f0:	2002      	movs	r0, #2
 80007f2:	f7ff ff9f 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x23);   //p1: HS-Data-zero  p2: HS-Data- prepare  --> 8031 issue
 80007f6:	2023      	movs	r0, #35	; 0x23
 80007f8:	f7ff ff9c 	bl	8000734 <SPI_WriteData>

 //    LCD_initial();



	SPI_WriteCmd(0xb7);
 80007fc:	20b7      	movs	r0, #183	; 0xb7
 80007fe:	f7ff ffa6 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x50);
 8000802:	2050      	movs	r0, #80	; 0x50
 8000804:	f7ff ff96 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);   //Configuration Register
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff ff93 	bl	8000734 <SPI_WriteData>

	SPI_WriteCmd(0xb8);
 800080e:	20b8      	movs	r0, #184	; 0xb8
 8000810:	f7ff ff9d 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x00);
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff ff8d 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);   //VC(Virtual ChannelID) Control Register
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff ff8a 	bl	8000734 <SPI_WriteData>

	SPI_WriteCmd(0xb9);
 8000820:	20b9      	movs	r0, #185	; 0xb9
 8000822:	f7ff ff94 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x00);//1=PLL disable
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff ff84 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff ff81 	bl	8000734 <SPI_WriteData>

    SPI_WriteCmd(0xBA);//
 8000832:	20ba      	movs	r0, #186	; 0xba
 8000834:	f7ff ff8b 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x2d);//14,D7-0=NS(0x01 : NS=1)		 //0x25
 8000838:	202d      	movs	r0, #45	; 0x2d
 800083a:	f7ff ff7b 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x82);//42,D15-14=PLL00=62.5-125 01=126-250 10=251-500 11=501-1000  DB12-8=MS(01:MS=1)
 800083e:	2082      	movs	r0, #130	; 0x82
 8000840:	f7ff ff78 	bl	8000734 <SPI_WriteData>


	SPI_WriteCmd(0xBB);//LP Clock Divider LP clock = 400MHz / LPD / 8 = 480 / 8/ 8 = 7MHz
 8000844:	20bb      	movs	r0, #187	; 0xbb
 8000846:	f7ff ff82 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x07);//D5-0=LPD=0x1 C Divide by 2
 800084a:	2007      	movs	r0, #7
 800084c:	f7ff ff72 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff ff6f 	bl	8000734 <SPI_WriteData>

	SPI_WriteCmd(0xb9);
 8000856:	20b9      	movs	r0, #185	; 0xb9
 8000858:	f7ff ff79 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x01);//1=PLL disable
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff ff69 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff ff66 	bl	8000734 <SPI_WriteData>

	SPI_WriteCmd(0xc9);
 8000868:	20c9      	movs	r0, #201	; 0xc9
 800086a:	f7ff ff70 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x02);
 800086e:	2002      	movs	r0, #2
 8000870:	f7ff ff60 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x23);   //p1: HS-Data-zero  p2: HS-Data- prepare  --> 8031 issue
 8000874:	2023      	movs	r0, #35	; 0x23
 8000876:	f7ff ff5d 	bl	8000734 <SPI_WriteData>
	HAL_Delay(100);
 800087a:	2064      	movs	r0, #100	; 0x64
 800087c:	f007 fd9a 	bl	80083b4 <HAL_Delay>

	SPI_WriteCmd(0xCA);
 8000880:	20ca      	movs	r0, #202	; 0xca
 8000882:	f7ff ff64 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x01);//CLK Prepare
 8000886:	2001      	movs	r0, #1
 8000888:	f7ff ff54 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x23);//Clk Zero
 800088c:	2023      	movs	r0, #35	; 0x23
 800088e:	f7ff ff51 	bl	8000734 <SPI_WriteData>

	SPI_WriteCmd(0xCB); //local_write_reg(addr=0xCB,data=0x0510)
 8000892:	20cb      	movs	r0, #203	; 0xcb
 8000894:	f7ff ff5b 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x10); //Clk Post
 8000898:	2010      	movs	r0, #16
 800089a:	f7ff ff4b 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x05); //Clk Per
 800089e:	2005      	movs	r0, #5
 80008a0:	f7ff ff48 	bl	8000734 <SPI_WriteData>

	SPI_WriteCmd(0xCC); //local_write_reg(addr=0xCC,data=0x100A)
 80008a4:	20cc      	movs	r0, #204	; 0xcc
 80008a6:	f7ff ff52 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x05); //HS Trail
 80008aa:	2005      	movs	r0, #5
 80008ac:	f7ff ff42 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x10); //Clk Trail
 80008b0:	2010      	movs	r0, #16
 80008b2:	f7ff ff3f 	bl	8000734 <SPI_WriteData>

	SPI_WriteCmd(0xD0);
 80008b6:	20d0      	movs	r0, #208	; 0xd0
 80008b8:	f7ff ff49 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x00);
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff ff39 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff ff36 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0xa0);//HFPD 8
	SPI_WriteData(0x0c);//VFPD 10
 */


    SPI_WriteCmd(0xB1); //local_write_reg(addr=0xB2,data=0x1224)
 80008c8:	20b1      	movs	r0, #177	; 0xb1
 80008ca:	f7ff ff40 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(LCD_HSPW); //HSA
 80008ce:	2018      	movs	r0, #24
 80008d0:	f7ff ff30 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(LCD_VSPW); //VSA
 80008d4:	2002      	movs	r0, #2
 80008d6:	f7ff ff2d 	bl	8000734 <SPI_WriteData>


	SPI_WriteCmd(0xB2); //local_write_reg(addr=0xB2,data=0x1224)
 80008da:	20b2      	movs	r0, #178	; 0xb2
 80008dc:	f7ff ff37 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(LCD_HBPD); //HBP
 80008e0:	20a0      	movs	r0, #160	; 0xa0
 80008e2:	f7ff ff27 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(LCD_VBPD); //VBP
 80008e6:	200a      	movs	r0, #10
 80008e8:	f7ff ff24 	bl	8000734 <SPI_WriteData>

	SPI_WriteCmd(0xB3); //local_write_reg(addr=0xB3,data=0x060C)
 80008ec:	20b3      	movs	r0, #179	; 0xb3
 80008ee:	f7ff ff2e 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(LCD_HFPD); //HFP
 80008f2:	20a0      	movs	r0, #160	; 0xa0
 80008f4:	f7ff ff1e 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(LCD_VFPD); //VFP
 80008f8:	200c      	movs	r0, #12
 80008fa:	f7ff ff1b 	bl	8000734 <SPI_WriteData>




	SPI_WriteCmd(0xB4);//Horizontal active period 400
 80008fe:	20b4      	movs	r0, #180	; 0xb4
 8000900:	f7ff ff25 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x90);//013F=319 02D0=72
 8000904:	2090      	movs	r0, #144	; 0x90
 8000906:	f7ff ff15 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x01);
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff ff12 	bl	8000734 <SPI_WriteData>

	SPI_WriteCmd(0xB5);//Vertical active period 1280
 8000910:	20b5      	movs	r0, #181	; 0xb5
 8000912:	f7ff ff1c 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x00);//
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff ff0c 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x05);
 800091c:	2005      	movs	r0, #5
 800091e:	f7ff ff09 	bl	8000734 <SPI_WriteData>


	SPI_WriteCmd(0xB6);//RGB CLK  16BPP=00 18BPP=01
 8000922:	20b6      	movs	r0, #182	; 0xb6
 8000924:	f7ff ff13 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x0b);//D7=0 D6=0 D5=0  D1-0=11 C 24bpp	 //07
 8000928:	200b      	movs	r0, #11
 800092a:	f7ff ff03 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0xc0);//D15=VS D14=HS D13=CLK D12-9=NC D8=0=Video with blanking packet. 00-F0
 800092e:	20c0      	movs	r0, #192	; 0xc0
 8000930:	f7ff ff00 	bl	8000734 <SPI_WriteData>



	//MIPI lane configuration
	SPI_WriteCmd(0xDE);//
 8000934:	20de      	movs	r0, #222	; 0xde
 8000936:	f7ff ff0a 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x03);//11=4LANE 10=3LANE 01=2LANE 00=1LANE
 800093a:	2003      	movs	r0, #3
 800093c:	f7ff fefa 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff fef7 	bl	8000734 <SPI_WriteData>

	SPI_WriteCmd(0xD6);//  05=BGR  04=RGB
 8000946:	20d6      	movs	r0, #214	; 0xd6
 8000948:	f7ff ff01 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x01);//D0=0=RGB 1:BGR D1=1=Most significant byte sent first
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fef1 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff feee 	bl	8000734 <SPI_WriteData>

 	SPI_WriteCmd(0xDB);
 8000958:	20db      	movs	r0, #219	; 0xdb
 800095a:	f7ff fef8 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x58);
 800095e:	2058      	movs	r0, #88	; 0x58
 8000960:	f7ff fee8 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x00);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff fee5 	bl	8000734 <SPI_WriteData>


	SPI_WriteCmd(0xB7);
 800096a:	20b7      	movs	r0, #183	; 0xb7
 800096c:	f7ff feef 	bl	800074e <SPI_WriteCmd>
	SPI_WriteData(0x4B);
 8000970:	204b      	movs	r0, #75	; 0x4b
 8000972:	f7ff fedf 	bl	8000734 <SPI_WriteData>
	SPI_WriteData(0x02);
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff fedc 	bl	8000734 <SPI_WriteData>

	SPI_WriteCmd(0x2c);
 800097c:	202c      	movs	r0, #44	; 0x2c
 800097e:	f7ff fee6 	bl	800074e <SPI_WriteCmd>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}

08000986 <delay_us>:
#include <stdio.h>
#include<stdlib.h>
#include "pattern.h"
extern SPI_HandleTypeDef hspi2;
void delay_us(unsigned int i)
{
 8000986:	b480      	push	{r7}
 8000988:	b085      	sub	sp, #20
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
	uchar j;
    while(i--)
 800098e:	e008      	b.n	80009a2 <delay_us+0x1c>
	{
    	for(j=0;j<60;j++);
 8000990:	2300      	movs	r3, #0
 8000992:	73fb      	strb	r3, [r7, #15]
 8000994:	e002      	b.n	800099c <delay_us+0x16>
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	3301      	adds	r3, #1
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	2b3b      	cmp	r3, #59	; 0x3b
 80009a0:	d9f9      	bls.n	8000996 <delay_us+0x10>
    while(i--)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	1e5a      	subs	r2, r3, #1
 80009a6:	607a      	str	r2, [r7, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1f1      	bne.n	8000990 <delay_us+0xa>
	}
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <SPI_Write>:
	HAL_Delay(100);
}

///********************************
void SPI_Write(unsigned char dat)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_SET);
	} while ( --t != 0 );
	HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(SPI_RA8876_MOSI_GPIO_Port, SPI_RA8876_MOSI_Pin, GPIO_PIN_SET);
	*/
	while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
 80009c6:	bf00      	nop
 80009c8:	4808      	ldr	r0, [pc, #32]	; (80009ec <SPI_Write+0x30>)
 80009ca:	f009 fa35 	bl	8009e38 <HAL_SPI_GetState>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d1f9      	bne.n	80009c8 <SPI_Write+0xc>
		HAL_SPI_Transmit(&hspi2, &dat, 1, SPI_TIMEOUT);
 80009d4:	1df9      	adds	r1, r7, #7
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	2201      	movs	r2, #1
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <SPI_Write+0x30>)
 80009de:	f008 ff38 	bl	8009852 <HAL_SPI_Transmit>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000081c 	.word	0x2000081c

080009f0 <SPI_Read>:

//SPI_Read()
unsigned char SPI_Read()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af02      	add	r7, sp, #8
		HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_SET);
	} while ( --t != 0 );
	return dat;
	*/
	uint8_t dummy, data;
	dummy = 0xFF;
 80009f6:	23ff      	movs	r3, #255	; 0xff
 80009f8:	71fb      	strb	r3, [r7, #7]
	data = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	71bb      	strb	r3, [r7, #6]

	while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 80009fe:	bf00      	nop
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <SPI_Read+0x38>)
 8000a02:	f009 fa19 	bl	8009e38 <HAL_SPI_GetState>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d1f9      	bne.n	8000a00 <SPI_Read+0x10>
	HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8000a0c:	1dba      	adds	r2, r7, #6
 8000a0e:	1df9      	adds	r1, r7, #7
 8000a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2301      	movs	r3, #1
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <SPI_Read+0x38>)
 8000a1a:	f009 f85d 	bl	8009ad8 <HAL_SPI_TransmitReceive>

	return data;
 8000a1e:	79bb      	ldrb	r3, [r7, #6]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000081c 	.word	0x2000081c

08000a2c <LCD_CmdWrite>:
void LCD_CmdWrite(unsigned char cmd)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(SPI_RA8876_MOSI_GPIO_Port, SPI_RA8876_MOSI_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <LCD_CmdWrite+0x38>)
 8000a3e:	f008 f82d 	bl	8008a9c <HAL_GPIO_WritePin>
	SPI_Write(0x00);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff ffba 	bl	80009bc <SPI_Write>
	SPI_Write(cmd);
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ffb6 	bl	80009bc <SPI_Write>
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a56:	4803      	ldr	r0, [pc, #12]	; (8000a64 <LCD_CmdWrite+0x38>)
 8000a58:	f008 f820 	bl	8008a9c <HAL_GPIO_WritePin>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40020400 	.word	0x40020400

08000a68 <LCD_DataWrite>:

//----------------------//
void LCD_DataWrite(unsigned char Data)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(SPI_RA8876_MOSI_GPIO_Port, SPI_RA8876_MOSI_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <LCD_DataWrite+0x38>)
 8000a7a:	f008 f80f 	bl	8008a9c <HAL_GPIO_WritePin>
	SPI_Write(0x80);
 8000a7e:	2080      	movs	r0, #128	; 0x80
 8000a80:	f7ff ff9c 	bl	80009bc <SPI_Write>
	SPI_Write(Data);
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff98 	bl	80009bc <SPI_Write>
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a92:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <LCD_DataWrite+0x38>)
 8000a94:	f008 f802 	bl	8008a9c <HAL_GPIO_WritePin>
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <LCD_DataRead>:
	HAL_SPI_Transmit(&hspi2, ptr, len, SPI_TIMEOUT);
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_SET);
}
//----------------------//
unsigned char LCD_DataRead(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	unsigned char Data;

	//HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(SPI_RA8876_MOSI_GPIO_Port, SPI_RA8876_MOSI_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab0:	480a      	ldr	r0, [pc, #40]	; (8000adc <LCD_DataRead+0x38>)
 8000ab2:	f007 fff3 	bl	8008a9c <HAL_GPIO_WritePin>
	SPI_Write(0xC0);
 8000ab6:	20c0      	movs	r0, #192	; 0xc0
 8000ab8:	f7ff ff80 	bl	80009bc <SPI_Write>
	Data = SPI_Read();
 8000abc:	f7ff ff98 	bl	80009f0 <SPI_Read>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <LCD_DataRead+0x38>)
 8000acc:	f007 ffe6 	bl	8008a9c <HAL_GPIO_WritePin>

	return Data;
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40020400 	.word	0x40020400

08000ae0 <LCD_StatusRead>:
//-----------------------//
unsigned char LCD_StatusRead(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
	unsigned char Data;

	//HAL_GPIO_WritePin(SPI_RA8876_SCK_GPIO_Port, SPI_RA8876_SCK_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(SPI_RA8876_MOSI_GPIO_Port, SPI_RA8876_MOSI_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aec:	480a      	ldr	r0, [pc, #40]	; (8000b18 <LCD_StatusRead+0x38>)
 8000aee:	f007 ffd5 	bl	8008a9c <HAL_GPIO_WritePin>
	SPI_Write(0x40);
 8000af2:	2040      	movs	r0, #64	; 0x40
 8000af4:	f7ff ff62 	bl	80009bc <SPI_Write>
	Data = SPI_Read();
 8000af8:	f7ff ff7a 	bl	80009f0 <SPI_Read>
 8000afc:	4603      	mov	r3, r0
 8000afe:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI_RA8876_NSS_GPIO_Port, SPI_RA8876_NSS_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b06:	4804      	ldr	r0, [pc, #16]	; (8000b18 <LCD_StatusRead+0x38>)
 8000b08:	f007 ffc8 	bl	8008a9c <HAL_GPIO_WritePin>

	return Data;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40020400 	.word	0x40020400

08000b1c <LCD_RegisterWrite>:
//********************************/


//==============================================================================
void LCD_RegisterWrite(unsigned char Cmd,unsigned char Data)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	460a      	mov	r2, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
	LCD_CmdWrite(Cmd);
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff7c 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(Data);
 8000b34:	79bb      	ldrb	r3, [r7, #6]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff96 	bl	8000a68 <LCD_DataWrite>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <RA8876_HW_Reset>:
{
  LCD_CmdWrite(0x04); //
}

void RA8876_HW_Reset(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RESET_RA8876_GPIO_Port, RESET_RA8876_Pin, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <RA8876_HW_Reset+0x40>)
 8000b50:	f007 ffa4 	bl	8008a9c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000b54:	200a      	movs	r0, #10
 8000b56:	f007 fc2d 	bl	80083b4 <HAL_Delay>
    HAL_GPIO_WritePin(RESET_RA8876_GPIO_Port, RESET_RA8876_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b60:	4808      	ldr	r0, [pc, #32]	; (8000b84 <RA8876_HW_Reset+0x40>)
 8000b62:	f007 ff9b 	bl	8008a9c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000b66:	2032      	movs	r0, #50	; 0x32
 8000b68:	f007 fc24 	bl	80083b4 <HAL_Delay>
    HAL_GPIO_WritePin(RESET_RA8876_GPIO_Port, RESET_RA8876_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b72:	4804      	ldr	r0, [pc, #16]	; (8000b84 <RA8876_HW_Reset+0x40>)
 8000b74:	f007 ff92 	bl	8008a9c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000b78:	2032      	movs	r0, #50	; 0x32
 8000b7a:	f007 fc1b 	bl	80083b4 <HAL_Delay>
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40020400 	.word	0x40020400

08000b88 <RA8876_initial>:




void RA8876_initial(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

  RA8876_SW_Reset();
 8000b8c:	f000 f8d2 	bl	8000d34 <RA8876_SW_Reset>
  RA8876_PLL_Initial();
 8000b90:	f000 f840 	bl	8000c14 <RA8876_PLL_Initial>
  RA8876_SDRAM_initail();
 8000b94:	f000 f869 	bl	8000c6a <RA8876_SDRAM_initail>
   //**[01h]**//
	TFT_24bit();
 8000b98:	f000 f8ec 	bl	8000d74 <TFT_24bit>
	Enable_SFlash_SPI();
 8000b9c:	f000 f904 	bl	8000da8 <Enable_SFlash_SPI>
	Host_Bus_8bit();
 8000ba0:	f000 f918 	bl	8000dd4 <Host_Bus_8bit>
//**[02h]**//
	RGB_8b_8bpp();
 8000ba4:	f000 f92c 	bl	8000e00 <RGB_8b_8bpp>
    //RGB_16b_24bpp_mode1();
	MemWrite_Left_Right_Top_Down();  // this one
 8000ba8:	f000 f944 	bl	8000e34 <MemWrite_Left_Right_Top_Down>
//	MemWrite_Top_Down_Left_Right();
//	MemWrite_Down_Top_Left_Right();


//**[03h]**//
	Graphic_Mode();
 8000bac:	f000 f95c 	bl	8000e68 <Graphic_Mode>
	Memory_Select_SDRAM();
 8000bb0:	f000 f986 	bl	8000ec0 <Memory_Select_SDRAM>

//  DANE EDITING - These lines are default, adding new ones!
//	HSCAN_L_to_R();   //  <--  Where is this?
//	VSCAN_T_to_B();
    Font_90_degree();
 8000bb4:	f001 fa47 	bl	8002046 <Font_90_degree>
	VSCAN_B_to_T();
 8000bb8:	f000 fa80 	bl	80010bc <VSCAN_B_to_T>
	HSCAN_L_to_R();
 8000bbc:	f000 fa52 	bl	8001064 <HSCAN_L_to_R>
    PDATA_Set_RGB();
 8000bc0:	f000 fa92 	bl	80010e8 <PDATA_Set_RGB>

	PCLK_Rising();
 8000bc4:	f000 f9f6 	bl	8000fb4 <PCLK_Rising>
//		PCLK_Falling();
	DE_High_Active();
 8000bc8:	f000 fad0 	bl	800116c <DE_High_Active>
		HSYNC_Low_Active();
 8000bcc:	f000 faa2 	bl	8001114 <HSYNC_Low_Active>
	//	HSYNC_High_Active();
		VSYNC_Low_Active();
 8000bd0:	f000 fab6 	bl	8001140 <VSYNC_Low_Active>
	//	VSYNC_High_Active();
	LCD_HorizontalWidth_VerticalHeight(400,1280);
 8000bd4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000bd8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000bdc:	f000 fadc 	bl	8001198 <LCD_HorizontalWidth_VerticalHeight>
	//LCD_HorizontalWidth_VerticalHeight(1280,400);

	LCD_Horizontal_Non_Display(160);
 8000be0:	20a0      	movs	r0, #160	; 0xa0
 8000be2:	f000 fb3c 	bl	800125e <LCD_Horizontal_Non_Display>
	LCD_HSYNC_Start_Position(160);
 8000be6:	20a0      	movs	r0, #160	; 0xa0
 8000be8:	f000 fb6d 	bl	80012c6 <LCD_HSYNC_Start_Position>
	LCD_HSYNC_Pulse_Width(24);
 8000bec:	2018      	movs	r0, #24
 8000bee:	f000 fb8a 	bl	8001306 <LCD_HSYNC_Pulse_Width>
	LCD_Vertical_Non_Display(10);
 8000bf2:	200a      	movs	r0, #10
 8000bf4:	f000 fba7 	bl	8001346 <LCD_Vertical_Non_Display>
	LCD_VSYNC_Start_Position(12);
 8000bf8:	200c      	movs	r0, #12
 8000bfa:	f000 fbc1 	bl	8001380 <LCD_VSYNC_Start_Position>
	LCD_VSYNC_Pulse_Width(2);
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f000 fbd2 	bl	80013a8 <LCD_VSYNC_Pulse_Width>

	Select_Main_Window_8bpp();
 8000c04:	f000 f9a2 	bl	8000f4c <Select_Main_Window_8bpp>
	Memory_XY_Mode();
 8000c08:	f000 fd80 	bl	800170c <Memory_XY_Mode>
	Memory_8bpp_Mode();
 8000c0c:	f000 fd94 	bl	8001738 <Memory_8bpp_Mode>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <RA8876_PLL_Initial>:


//==============================================================================
 void RA8876_PLL_Initial(void)
{  /*
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
   LCD_RegisterWrite(0x05,0x04);    //PLL Divided by 4
   LCD_RegisterWrite(0x06,(SCAN_FREQ*4/OSC_FREQ)-1);
  }
  if((SCAN_FREQ>=32)&&(SCAN_FREQ<=62))
  {
   LCD_RegisterWrite(0x05,0x06);    //PLL Divided by 8
 8000c18:	2106      	movs	r1, #6
 8000c1a:	2005      	movs	r0, #5
 8000c1c:	f7ff ff7e 	bl	8000b1c <LCD_RegisterWrite>
   LCD_RegisterWrite(0x06,(SCAN_FREQ*8/OSC_FREQ)-1);
 8000c20:	2127      	movs	r1, #39	; 0x27
 8000c22:	2006      	movs	r0, #6
 8000c24:	f7ff ff7a 	bl	8000b1c <LCD_RegisterWrite>
   LCD_RegisterWrite(0x07,0x02);    //PLL Divided by 2
   LCD_RegisterWrite(0x08,(DRAM_FREQ*2/OSC_FREQ)-1);
  }
  if((DRAM_FREQ>=63)&&(DRAM_FREQ<=124))   //&&(DRAM_FREQ<=166)
  {
   LCD_RegisterWrite(0x07,0x04);    //PLL Divided by 4
 8000c28:	2104      	movs	r1, #4
 8000c2a:	2007      	movs	r0, #7
 8000c2c:	f7ff ff76 	bl	8000b1c <LCD_RegisterWrite>
   LCD_RegisterWrite(0x08,(DRAM_FREQ*4/OSC_FREQ)-1);
 8000c30:	2127      	movs	r1, #39	; 0x27
 8000c32:	2008      	movs	r0, #8
 8000c34:	f7ff ff72 	bl	8000b1c <LCD_RegisterWrite>
   LCD_RegisterWrite(0x09,0x02);    //PLL Divided by 2
   LCD_RegisterWrite(0x0A,(CORE_FREQ*2/OSC_FREQ)-1);
  }
  if((CORE_FREQ>=63)&&(CORE_FREQ<=124))
  {
   LCD_RegisterWrite(0x09,0x04);    //PLL Divided by 4
 8000c38:	2104      	movs	r1, #4
 8000c3a:	2009      	movs	r0, #9
 8000c3c:	f7ff ff6e 	bl	8000b1c <LCD_RegisterWrite>
   LCD_RegisterWrite(0x0A,(CORE_FREQ*4/OSC_FREQ)-1);
 8000c40:	2127      	movs	r1, #39	; 0x27
 8000c42:	200a      	movs	r0, #10
 8000c44:	f7ff ff6a 	bl	8000b1c <LCD_RegisterWrite>
  {
   LCD_RegisterWrite(0x09,0x06);    //PLL Divided by 8
   LCD_RegisterWrite(0x0A,(30*8/OSC_FREQ)-1); //
  }

    LCD_CmdWrite(0x01);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff feef 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(0x00);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff ff0a 	bl	8000a68 <LCD_DataWrite>
	delay_us(10);
 8000c54:	200a      	movs	r0, #10
 8000c56:	f7ff fe96 	bl	8000986 <delay_us>
	LCD_DataWrite(0x80);
 8000c5a:	2080      	movs	r0, #128	; 0x80
 8000c5c:	f7ff ff04 	bl	8000a68 <LCD_DataWrite>
//	Enable_PLL();

	HAL_Delay(10);
 8000c60:	200a      	movs	r0, #10
 8000c62:	f007 fba7 	bl	80083b4 <HAL_Delay>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <RA8876_SDRAM_initail>:


//------------------------------------//----------------------------------*/

void RA8876_SDRAM_initail(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
	LCD_RegisterWrite(0xe4,0x01);
#endif

#ifdef W9812G6JH

	LCD_RegisterWrite(0xe0,0x29);
 8000c70:	2129      	movs	r1, #41	; 0x29
 8000c72:	20e0      	movs	r0, #224	; 0xe0
 8000c74:	f7ff ff52 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0xe1,0x03);
 8000c78:	2103      	movs	r1, #3
 8000c7a:	20e1      	movs	r0, #225	; 0xe1
 8000c7c:	f7ff ff4e 	bl	8000b1c <LCD_RegisterWrite>

    sdram_itv = (64000000 / 8192) / (1000/DRAM_FREQ) ;
 8000c80:	f240 330d 	movw	r3, #781	; 0x30d
 8000c84:	80fb      	strh	r3, [r7, #6]

    sdram_itv-=2;
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	3b02      	subs	r3, #2
 8000c8a:	80fb      	strh	r3, [r7, #6]

	LCD_RegisterWrite(0xe2,sdram_itv);
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	4619      	mov	r1, r3
 8000c92:	20e2      	movs	r0, #226	; 0xe2
 8000c94:	f7ff ff42 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0xe3,sdram_itv >>8);
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	0a1b      	lsrs	r3, r3, #8
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	20e3      	movs	r0, #227	; 0xe3
 8000ca4:	f7ff ff3a 	bl	8000b1c <LCD_RegisterWrite>

	LCD_RegisterWrite(0xe4,0x01);
 8000ca8:	2101      	movs	r1, #1
 8000caa:	20e4      	movs	r0, #228	; 0xe4
 8000cac:	f7ff ff36 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0xe3,sdram_itv >>8);

	LCD_RegisterWrite(0xe4,0x01);
#endif

	Check_SDRAM_Ready();
 8000cb0:	f000 f81e 	bl	8000cf0 <Check_SDRAM_Ready>

HAL_Delay(10);
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f007 fb7d 	bl	80083b4 <HAL_Delay>

}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <Check_Mem_WR_FIFO_not_Full>:
/******************************************************************************/
/*Sub program area		  													  */
/******************************************************************************/
//==============================================================================
void Check_Mem_WR_FIFO_not_Full(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
/*	0: Memory Write FIFO is not full.
	1: Memory Write FIFO is full.		*/
	do
	{

	}while( LCD_StatusRead()&0x80 );
 8000cc6:	f7ff ff0b 	bl	8000ae0 <LCD_StatusRead>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	dbf9      	blt.n	8000cc6 <Check_Mem_WR_FIFO_not_Full+0x4>
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <Check_2D_Busy>:
	{

	}while( LCD_StatusRead()&0x10 );
}
void Check_2D_Busy(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  do
 {
 }while( LCD_StatusRead()&0x08 );
 8000cdc:	f7ff ff00 	bl	8000ae0 <LCD_StatusRead>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f003 0308 	and.w	r3, r3, #8
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f8      	bne.n	8000cdc <Check_2D_Busy+0x4>

}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <Check_SDRAM_Ready>:
void Check_SDRAM_Ready(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
/*	0: SDRAM is not ready for access
	1: SDRAM is ready for access		*/
	unsigned char temp;
	do
	{
		temp=LCD_StatusRead();
 8000cf6:	f7ff fef3 	bl	8000ae0 <LCD_StatusRead>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
	}while( (temp&0x04) == 0x00 );
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0f6      	beq.n	8000cf6 <Check_SDRAM_Ready+0x6>
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <Check_Busy_Draw>:

	}while( (LCD_StatusRead()&0x01) == 0x00 );
}

void Check_Busy_Draw(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0


//(A)
	do
	{
		temp=LCD_StatusRead();
 8000d18:	f7ff fee2 	bl	8000ae0 <LCD_StatusRead>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	71fb      	strb	r3, [r7, #7]
	}	while(temp&0x08);
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f6      	bne.n	8000d18 <Check_Busy_Draw+0x6>
		//temp=LCD_DataRead();
	}	while(temp&0x80);
*/

//HAL_Delay(10);
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <RA8876_SW_Reset>:

//[00h]=========================================================================

void RA8876_SW_Reset(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
	unsigned char temp;

	LCD_CmdWrite(0x00);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff fe76 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000d40:	f7ff feb0 	bl	8000aa4 <LCD_DataRead>
 8000d44:	4603      	mov	r3, r0
 8000d46:	71fb      	strb	r3, [r7, #7]
	temp |= 0x01;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fe88 	bl	8000a68 <LCD_DataWrite>

    do
    {
	    temp = LCD_DataRead();
 8000d58:	f7ff fea4 	bl	8000aa4 <LCD_DataRead>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]
    }
    while( temp&0x01 );
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f6      	bne.n	8000d58 <RA8876_SW_Reset+0x24>
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <TFT_24bit>:
	temp = LCD_DataRead();
	temp &= cClrb5;
	LCD_DataWrite(temp);
}
void TFT_24bit(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
/*  00b: 24-bits output.
    01b: 18-bits output, unused pins are set as GPIO.
    10b: 16-bits output, unused pins are set as GPIO.
    11b: LVDS, all 24-bits unused output pins are set as GPIO.*/
	unsigned char temp;
	LCD_CmdWrite(0x01);
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f7ff fe56 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000d80:	f7ff fe90 	bl	8000aa4 <LCD_DataRead>
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb4;
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f023 0310 	bic.w	r3, r3, #16
 8000d8e:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb3;
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f023 0308 	bic.w	r3, r3, #8
 8000d96:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fe64 	bl	8000a68 <LCD_DataWrite>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <Enable_SFlash_SPI>:
	temp &= cClrb2;
	LCD_DataWrite(temp);
}

void Enable_SFlash_SPI(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
/*  Serial Flash SPI Interface Enable/Disable
    0: Disable
    1: Enable*/
	unsigned char temp;
	LCD_CmdWrite(0x01);
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff fe3c 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000db4:	f7ff fe76 	bl	8000aa4 <LCD_DataRead>
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb1;
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fe4e 	bl	8000a68 <LCD_DataWrite>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <Host_Bus_8bit>:
	temp = LCD_DataRead();
	temp &= cClrb1;
	LCD_DataWrite(temp);
}
void Host_Bus_8bit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
/*  Parallel Host Data Bus Width Selection
    0: 8-bit Parallel Host Data Bus.
    1: 16-bit Parallel Host Data Bus.*/
	unsigned char temp;
	LCD_CmdWrite(0x01);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff fe26 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000de0:	f7ff fe60 	bl	8000aa4 <LCD_DataRead>
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb0;
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f023 0301 	bic.w	r3, r3, #1
 8000dee:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fe38 	bl	8000a68 <LCD_DataWrite>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <RGB_8b_8bpp>:
}

//[02h][02h][02h][02h][02h][02h][02h][02h][02h][02h][02h][02h][02h][02h][02h][02h]

void RGB_8b_8bpp(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x02);
 8000e06:	2002      	movs	r0, #2
 8000e08:	f7ff fe10 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000e0c:	f7ff fe4a 	bl	8000aa4 <LCD_DataRead>
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb7;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e1a:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb6;
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e22:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fe1e 	bl	8000a68 <LCD_DataWrite>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <MemWrite_Left_Right_Top_Down>:
	temp |= cSetb5;
	temp |= cSetb4;
	LCD_DataWrite(temp);
}
void MemWrite_Left_Right_Top_Down(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x02);
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f7ff fdf6 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000e40:	f7ff fe30 	bl	8000aa4 <LCD_DataRead>
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb2;
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f023 0304 	bic.w	r3, r3, #4
 8000e4e:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb1;
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f023 0302 	bic.w	r3, r3, #2
 8000e56:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fe04 	bl	8000a68 <LCD_DataWrite>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <Graphic_Mode>:
	temp = LCD_DataRead();
    temp |= cSetb3;
	LCD_DataWrite(temp);
}
void Graphic_Mode(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x03);
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f7ff fddc 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000e74:	f7ff fe16 	bl	8000aa4 <LCD_DataRead>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb2;
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f023 0304 	bic.w	r3, r3, #4
 8000e82:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fdee 	bl	8000a68 <LCD_DataWrite>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <Text_Mode>:
void Text_Mode(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x03);
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f7ff fdc6 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000ea0:	f7ff fe00 	bl	8000aa4 <LCD_DataRead>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb2;
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fdd8 	bl	8000a68 <LCD_DataWrite>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <Memory_Select_SDRAM>:
void Memory_Select_SDRAM(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x03);
 8000ec6:	2003      	movs	r0, #3
 8000ec8:	f7ff fdb0 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000ecc:	f7ff fdea 	bl	8000aa4 <LCD_DataRead>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb1;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f023 0302 	bic.w	r3, r3, #2
 8000eda:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb0;	// B
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fdbe 	bl	8000a68 <LCD_DataWrite>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <Enable_PIP1>:
	LCD_DataWrite(temp);
}

//[10h]=========================================================================
void Enable_PIP1(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
0 : PIP 1 window disable.
1 : PIP 1 window enable
PIP 1 window always on top of PIP 2 window.
*/
	unsigned char temp;
	LCD_CmdWrite(0x10);
 8000efa:	2010      	movs	r0, #16
 8000efc:	f7ff fd96 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000f00:	f7ff fdd0 	bl	8000aa4 <LCD_DataRead>
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb7;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f0e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fda8 	bl	8000a68 <LCD_DataWrite>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <Select_PIP1_Parameter>:
	temp = LCD_DataRead();
    temp &= cClrb6;
	LCD_DataWrite(temp);
}
void Select_PIP1_Parameter(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x10);
 8000f26:	2010      	movs	r0, #16
 8000f28:	f7ff fd80 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000f2c:	f7ff fdba 	bl	8000aa4 <LCD_DataRead>
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb4;
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f023 0310 	bic.w	r3, r3, #16
 8000f3a:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fd92 	bl	8000a68 <LCD_DataWrite>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <Select_Main_Window_8bpp>:
	temp = LCD_DataRead();
    temp |= cSetb4;
	LCD_DataWrite(temp);
}
void Select_Main_Window_8bpp(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
00b: 8-bpp generic TFT, i.e. 256 colors.
01b: 16-bpp generic TFT, i.e. 65K colors.
1xb: 24-bpp generic TFT, i.e. 1.67M colors.
*/
	unsigned char temp;
	LCD_CmdWrite(0x10);
 8000f52:	2010      	movs	r0, #16
 8000f54:	f7ff fd6a 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000f58:	f7ff fda4 	bl	8000aa4 <LCD_DataRead>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb3;
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f023 0308 	bic.w	r3, r3, #8
 8000f66:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb2;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f023 0304 	bic.w	r3, r3, #4
 8000f6e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fd78 	bl	8000a68 <LCD_DataWrite>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <Select_PIP1_Window_8bpp>:
    temp |= cSetb1;
    temp &= cClrb0;
	LCD_DataWrite(temp);
}
void Select_PIP1_Window_8bpp(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
00b: 8-bpp generic TFT, i.e. 256 colors.
01b: 16-bpp generic TFT, i.e. 65K colors.
1xb: 24-bpp generic TFT, i.e. 1.67M colors.
*/
	unsigned char temp;
	LCD_CmdWrite(0x11);
 8000f86:	2011      	movs	r0, #17
 8000f88:	f7ff fd50 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000f8c:	f7ff fd8a 	bl	8000aa4 <LCD_DataRead>
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb3;
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f023 0308 	bic.w	r3, r3, #8
 8000f9a:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb2;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f023 0304 	bic.w	r3, r3, #4
 8000fa2:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fd5e 	bl	8000a68 <LCD_DataWrite>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <PCLK_Rising>:
	LCD_DataWrite(temp);
}

//[12h]=========================================================================
void PCLK_Rising(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
PCLK Inversion
0: PDAT, DE, HSYNC etc. Drive(/ change) at PCLK falling edge.
1: PDAT, DE, HSYNC etc. Drive(/ change) at PCLK rising edge.
*/
	unsigned char temp;
	LCD_CmdWrite(0x12);
 8000fba:	2012      	movs	r0, #18
 8000fbc:	f7ff fd36 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000fc0:	f7ff fd70 	bl	8000aa4 <LCD_DataRead>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb7;
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fce:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fd48 	bl	8000a68 <LCD_DataWrite>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <Display_ON>:
	temp = LCD_DataRead();
    temp |= cSetb7;
	LCD_DataWrite(temp);
}
void Display_ON(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
0b: Display Off.
1b: Display On.
*/
	unsigned char temp;

	LCD_CmdWrite(0x12);
 8000fe6:	2012      	movs	r0, #18
 8000fe8:	f7ff fd20 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000fec:	f7ff fd5a 	bl	8000aa4 <LCD_DataRead>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb6;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ffa:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fd32 	bl	8000a68 <LCD_DataWrite>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <Color_Bar_ON>:
	temp = LCD_DataRead();
	temp &= cClrb6;
	LCD_DataWrite(temp);
}
void Color_Bar_ON(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
0b: Disable.
1b: Enable.
*/
	unsigned char temp;

	LCD_CmdWrite(0x12);
 8001012:	2012      	movs	r0, #18
 8001014:	f7ff fd0a 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001018:	f7ff fd44 	bl	8000aa4 <LCD_DataRead>
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb5;
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f043 0320 	orr.w	r3, r3, #32
 8001026:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fd1c 	bl	8000a68 <LCD_DataWrite>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Color_Bar_OFF>:
void Color_Bar_OFF(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
0b: Disable.
1b: Enable.
*/
	unsigned char temp;

	LCD_CmdWrite(0x12);
 800103e:	2012      	movs	r0, #18
 8001040:	f7ff fcf4 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001044:	f7ff fd2e 	bl	8000aa4 <LCD_DataRead>
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb5;
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f023 0320 	bic.w	r3, r3, #32
 8001052:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fd06 	bl	8000a68 <LCD_DataWrite>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HSCAN_L_to_R>:


void HSCAN_L_to_R(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
1 : From Right to Left
PIP window will be disabled when HDIR set as 1.
*/
	unsigned char temp;

	LCD_CmdWrite(0x12);
 800106a:	2012      	movs	r0, #18
 800106c:	f7ff fcde 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001070:	f7ff fd18 	bl	8000aa4 <LCD_DataRead>
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb4;
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f023 0310 	bic.w	r3, r3, #16
 800107e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fcf0 	bl	8000a68 <LCD_DataWrite>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <VSCAN_T_to_B>:
	temp = LCD_DataRead();
	temp |= cSetb4;
	LCD_DataWrite(temp);
}
void VSCAN_T_to_B(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
1 : From bottom to Top
PIP window will be disabled when VDIR set as 1.
*/
	unsigned char temp;

	LCD_CmdWrite(0x12);
 8001096:	2012      	movs	r0, #18
 8001098:	f7ff fcc8 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 800109c:	f7ff fd02 	bl	8000aa4 <LCD_DataRead>
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb3;
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f023 0308 	bic.w	r3, r3, #8
 80010aa:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fcda 	bl	8000a68 <LCD_DataWrite>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <VSCAN_B_to_T>:
void VSCAN_B_to_T(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
PIP window will be disabled when VDIR set as 1.
That is this mode...
*/
	unsigned char temp;

	LCD_CmdWrite(0x12);
 80010c2:	2012      	movs	r0, #18
 80010c4:	f7ff fcb2 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 80010c8:	f7ff fcec 	bl	8000aa4 <LCD_DataRead>
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb3;
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fcc4 	bl	8000a68 <LCD_DataWrite>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <PDATA_Set_RGB>:
void PDATA_Set_RGB(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
100b : BRG.
101b : BGR.
*/
	unsigned char temp;

	LCD_CmdWrite(0x12);
 80010ee:	2012      	movs	r0, #18
 80010f0:	f7ff fc9c 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 80010f4:	f7ff fcd6 	bl	8000aa4 <LCD_DataRead>
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
    temp &=0xf8;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f023 0307 	bic.w	r3, r3, #7
 8001102:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fcae 	bl	8000a68 <LCD_DataWrite>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HSYNC_Low_Active>:
}


//[13h]=========================================================================
void HSYNC_Low_Active(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
0 : Low active.
1 : High active.
*/
	unsigned char temp;

	LCD_CmdWrite(0x13);
 800111a:	2013      	movs	r0, #19
 800111c:	f7ff fc86 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001120:	f7ff fcc0 	bl	8000aa4 <LCD_DataRead>
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb7;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800112e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fc98 	bl	8000a68 <LCD_DataWrite>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <VSYNC_Low_Active>:
	temp = LCD_DataRead();
	temp |= cSetb7;
	LCD_DataWrite(temp);
}
void VSYNC_Low_Active(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
0 : Low active.
1 : High active.
*/
	unsigned char temp;

	LCD_CmdWrite(0x13);
 8001146:	2013      	movs	r0, #19
 8001148:	f7ff fc70 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 800114c:	f7ff fcaa 	bl	8000aa4 <LCD_DataRead>
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb6;
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800115a:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fc82 	bl	8000a68 <LCD_DataWrite>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <DE_High_Active>:
	temp = LCD_DataRead();
    temp |= cSetb5;
	LCD_DataWrite(temp);
}
void DE_High_Active(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
0 : High active.
1 : Low active.
*/
	unsigned char temp;

	LCD_CmdWrite(0x13);
 8001172:	2013      	movs	r0, #19
 8001174:	f7ff fc5a 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001178:	f7ff fc94 	bl	8000aa4 <LCD_DataRead>
 800117c:	4603      	mov	r3, r0
 800117e:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb5;
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f023 0320 	bic.w	r3, r3, #32
 8001186:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fc6c 	bl	8000a68 <LCD_DataWrite>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <LCD_HorizontalWidth_VerticalHeight>:
	LCD_DataWrite(temp);
}

//[14h][15h][1Ah][1Bh]=========================================================================
void LCD_HorizontalWidth_VerticalHeight(unsigned short WX,unsigned short HY)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	460a      	mov	r2, r1
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	4613      	mov	r3, r2
 80011a6:	80bb      	strh	r3, [r7, #4]
Vertical Display Height(Line) = VDHR + 1
[1Bh] Vertical Display Height Bit[10:8]
Vertical Display Height(Line) = VDHR + 1
*/
	unsigned char temp;
	if(WX<8)
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	2b07      	cmp	r3, #7
 80011ac:	d824      	bhi.n	80011f8 <LCD_HorizontalWidth_VerticalHeight+0x60>
    {
	LCD_CmdWrite(0x14);
 80011ae:	2014      	movs	r0, #20
 80011b0:	f7ff fc3c 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(0x00);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fc57 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x15);
 80011ba:	2015      	movs	r0, #21
 80011bc:	f7ff fc36 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(WX);
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fc4f 	bl	8000a68 <LCD_DataWrite>

    temp=HY-1;
 80011ca:	88bb      	ldrh	r3, [r7, #4]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	3b01      	subs	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1A);
 80011d2:	201a      	movs	r0, #26
 80011d4:	f7ff fc2a 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp);
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fc44 	bl	8000a68 <LCD_DataWrite>

	temp=(HY-1)>>8;
 80011e0:	88bb      	ldrh	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	121b      	asrs	r3, r3, #8
 80011e6:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1B);
 80011e8:	201b      	movs	r0, #27
 80011ea:	f7ff fc1f 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp);
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fc39 	bl	8000a68 <LCD_DataWrite>

	temp=(HY-1)>>8;
	LCD_CmdWrite(0x1B);
	LCD_DataWrite(temp);
	}
}
 80011f6:	e02e      	b.n	8001256 <LCD_HorizontalWidth_VerticalHeight+0xbe>
    temp=(WX/8)-1;
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	3b01      	subs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x14);
 8001204:	2014      	movs	r0, #20
 8001206:	f7ff fc11 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp);
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fc2b 	bl	8000a68 <LCD_DataWrite>
    temp=WX%8;
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x15);
 800121c:	2015      	movs	r0, #21
 800121e:	f7ff fc05 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fc1f 	bl	8000a68 <LCD_DataWrite>
    temp=HY-1;
 800122a:	88bb      	ldrh	r3, [r7, #4]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	3b01      	subs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1A);
 8001232:	201a      	movs	r0, #26
 8001234:	f7ff fbfa 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fc14 	bl	8000a68 <LCD_DataWrite>
	temp=(HY-1)>>8;
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	121b      	asrs	r3, r3, #8
 8001246:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1B);
 8001248:	201b      	movs	r0, #27
 800124a:	f7ff fbef 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp);
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fc09 	bl	8000a68 <LCD_DataWrite>
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <LCD_Horizontal_Non_Display>:
//[16h][17h]=========================================================================
void LCD_Horizontal_Non_Display(unsigned short WX)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	80fb      	strh	r3, [r7, #6]
period; it is used to support the SYNC mode panel. Each level of
this modulation is 1-pixel.
Horizontal non-display period(pixels) = (HNDR + 1) * 8 + HNDFTR
*/
	unsigned char temp;
	if(WX<8)
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	2b07      	cmp	r3, #7
 800126c:	d80e      	bhi.n	800128c <LCD_Horizontal_Non_Display+0x2e>
	{
	LCD_CmdWrite(0x16);
 800126e:	2016      	movs	r0, #22
 8001270:	f7ff fbdc 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(0x00);
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fbf7 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x17);
 800127a:	2017      	movs	r0, #23
 800127c:	f7ff fbd6 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(WX);
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fbef 	bl	8000a68 <LCD_DataWrite>

    temp=WX%8;
	LCD_CmdWrite(0x17);
	LCD_DataWrite(temp);
	}
}
 800128a:	e018      	b.n	80012be <LCD_Horizontal_Non_Display+0x60>
    temp=(WX/8)-1;
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	08db      	lsrs	r3, r3, #3
 8001290:	b29b      	uxth	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	3b01      	subs	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x16);
 8001298:	2016      	movs	r0, #22
 800129a:	f7ff fbc7 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp);
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fbe1 	bl	8000a68 <LCD_DataWrite>
    temp=WX%8;
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x17);
 80012b0:	2017      	movs	r0, #23
 80012b2:	f7ff fbbb 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp);
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fbd5 	bl	8000a68 <LCD_DataWrite>
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <LCD_HSYNC_Start_Position>:
//[18h]=========================================================================
void LCD_HSYNC_Start_Position(unsigned short WX)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	80fb      	strh	r3, [r7, #6]
beginning of HSYNC. Each level of this modulation is 8-pixel.
Also called front porch.
HSYNC Start Position(pixels) = (HSTR + 1)x8
*/
	unsigned char temp;
	if(WX<8)
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	2b07      	cmp	r3, #7
 80012d4:	d806      	bhi.n	80012e4 <LCD_HSYNC_Start_Position+0x1e>
	{
	LCD_CmdWrite(0x18);
 80012d6:	2018      	movs	r0, #24
 80012d8:	f7ff fba8 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(0x00);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff fbc3 	bl	8000a68 <LCD_DataWrite>
	{
    temp=(WX/8)-1;
	LCD_CmdWrite(0x18);
	LCD_DataWrite(temp);
	}
}
 80012e2:	e00c      	b.n	80012fe <LCD_HSYNC_Start_Position+0x38>
    temp=(WX/8)-1;
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	08db      	lsrs	r3, r3, #3
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	3b01      	subs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x18);
 80012f0:	2018      	movs	r0, #24
 80012f2:	f7ff fb9b 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp);
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fbb5 	bl	8000a68 <LCD_DataWrite>
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <LCD_HSYNC_Pulse_Width>:
//[19h]=========================================================================
void LCD_HSYNC_Pulse_Width(unsigned short WX)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	80fb      	strh	r3, [r7, #6]
[19h] HSYNC Pulse Width(HPW) [4:0]
The period width of HSYNC.
HSYNC Pulse Width(pixels) = (HPW + 1)x8
*/
	unsigned char temp;
	if(WX<8)
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	2b07      	cmp	r3, #7
 8001314:	d806      	bhi.n	8001324 <LCD_HSYNC_Pulse_Width+0x1e>
	{
	LCD_CmdWrite(0x19);
 8001316:	2019      	movs	r0, #25
 8001318:	f7ff fb88 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(0x00);
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff fba3 	bl	8000a68 <LCD_DataWrite>
	{
    temp=(WX/8)-1;
	LCD_CmdWrite(0x19);
	LCD_DataWrite(temp);
	}
}
 8001322:	e00c      	b.n	800133e <LCD_HSYNC_Pulse_Width+0x38>
    temp=(WX/8)-1;
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	08db      	lsrs	r3, r3, #3
 8001328:	b29b      	uxth	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	3b01      	subs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x19);
 8001330:	2019      	movs	r0, #25
 8001332:	f7ff fb7b 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fb95 	bl	8000a68 <LCD_DataWrite>
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <LCD_Vertical_Non_Display>:
//[1Ch][1Dh]=========================================================================
void LCD_Vertical_Non_Display(unsigned short HY)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	80fb      	strh	r3, [r7, #6]

[1Dh] Vertical Non-Display Period Bit[9:8]
Vertical Non-Display Period(Line) = (VNDR + 1)
*/
	unsigned char temp;
    temp=HY-1;
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	3b01      	subs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1C);
 8001358:	201c      	movs	r0, #28
 800135a:	f7ff fb67 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp);
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fb81 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x1D);
 8001366:	201d      	movs	r0, #29
 8001368:	f7ff fb60 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp>>8);
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	121b      	asrs	r3, r3, #8
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fb78 	bl	8000a68 <LCD_DataWrite>
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <LCD_VSYNC_Start_Position>:
//[1Eh]=========================================================================
void LCD_VSYNC_Start_Position(unsigned short HY)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
[1Eh] VSYNC Start Position[7:0]
The starting position from the end of display area to the beginning of VSYNC.
VSYNC Start Position(Line) = (VSTR + 1)
*/
	unsigned char temp;
    temp=HY-1;
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	3b01      	subs	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1E);
 8001392:	201e      	movs	r0, #30
 8001394:	f7ff fb4a 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fb64 	bl	8000a68 <LCD_DataWrite>
}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <LCD_VSYNC_Pulse_Width>:
//[1Fh]=========================================================================
void LCD_VSYNC_Pulse_Width(unsigned short HY)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
[1Fh] VSYNC Pulse Width[5:0]
The pulse width of VSYNC in lines.
VSYNC Pulse Width(Line) = (VPWR + 1)
*/
	unsigned char temp;
    temp=HY-1;
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	3b01      	subs	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1F);
 80013ba:	201f      	movs	r0, #31
 80013bc:	f7ff fb36 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp);
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fb50 	bl	8000a68 <LCD_DataWrite>
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <Main_Image_Start_Address>:
//[20h][21h][22h][23h]=========================================================================
void Main_Image_Start_Address(unsigned long Addr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
[20h] Main Image Start Address[7:2]
[21h] Main Image Start Address[15:8]
[22h] Main Image Start Address [23:16]
[23h] Main Image Start Address [31:24]
*/
	LCD_RegisterWrite(0x20,Addr);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4619      	mov	r1, r3
 80013de:	2020      	movs	r0, #32
 80013e0:	f7ff fb9c 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x21,Addr>>8);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4619      	mov	r1, r3
 80013ec:	2021      	movs	r0, #33	; 0x21
 80013ee:	f7ff fb95 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x22,Addr>>16);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0c1b      	lsrs	r3, r3, #16
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	4619      	mov	r1, r3
 80013fa:	2022      	movs	r0, #34	; 0x22
 80013fc:	f7ff fb8e 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x23,Addr>>24);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	0e1b      	lsrs	r3, r3, #24
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4619      	mov	r1, r3
 8001408:	2023      	movs	r0, #35	; 0x23
 800140a:	f7ff fb87 	bl	8000b1c <LCD_RegisterWrite>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <Main_Image_Width>:
//[24h][25h]=========================================================================
void Main_Image_Width(unsigned short WX)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	80fb      	strh	r3, [r7, #6]
[25h] Main Image Width [12:8]
Unit: Pixel.
It must be divisible by 4. MIW Bit [1:0] tie to internally.
The value is physical pixel number. Maximum value is 8188 pixels
*/
	LCD_RegisterWrite(0x24,WX);
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4619      	mov	r1, r3
 8001426:	2024      	movs	r0, #36	; 0x24
 8001428:	f7ff fb78 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x25,WX>>8);
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	0a1b      	lsrs	r3, r3, #8
 8001430:	b29b      	uxth	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4619      	mov	r1, r3
 8001436:	2025      	movs	r0, #37	; 0x25
 8001438:	f7ff fb70 	bl	8000b1c <LCD_RegisterWrite>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <Main_Window_Start_XY>:
//[26h][27h][28h][29h]=========================================================================
void Main_Window_Start_XY(unsigned short WX,unsigned short HY)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	4613      	mov	r3, r2
 8001452:	80bb      	strh	r3, [r7, #4]
[29h] Main Window Upper-Left corner Y-coordination [12:8]
Reference Main Image coordination.
Unit: Pixel
Range is between 0 and 8191.
*/
	LCD_RegisterWrite(0x26,WX);
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4619      	mov	r1, r3
 800145a:	2026      	movs	r0, #38	; 0x26
 800145c:	f7ff fb5e 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x27,WX>>8);
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	b29b      	uxth	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4619      	mov	r1, r3
 800146a:	2027      	movs	r0, #39	; 0x27
 800146c:	f7ff fb56 	bl	8000b1c <LCD_RegisterWrite>

	LCD_RegisterWrite(0x28,HY);
 8001470:	88bb      	ldrh	r3, [r7, #4]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4619      	mov	r1, r3
 8001476:	2028      	movs	r0, #40	; 0x28
 8001478:	f7ff fb50 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x29,HY>>8);
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	b29b      	uxth	r3, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4619      	mov	r1, r3
 8001486:	2029      	movs	r0, #41	; 0x29
 8001488:	f7ff fb48 	bl	8000b1c <LCD_RegisterWrite>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <PIP_Display_Start_XY>:
//[2Ah][2Bh][2Ch][2Dh]=========================================================================
void PIP_Display_Start_XY(unsigned short WX,unsigned short HY)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	460a      	mov	r2, r1
 800149e:	80fb      	strh	r3, [r7, #6]
 80014a0:	4613      	mov	r3, r2
 80014a2:	80bb      	strh	r3, [r7, #4]
Unit: Pixel
Y-axis coordination should less than vertical display height.
According to bit of Select Configure PIP 1 or 2 Windows parameters.
Function bit will be configured for relative PIP window.
*/
	LCD_RegisterWrite(0x2A,WX);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	4619      	mov	r1, r3
 80014aa:	202a      	movs	r0, #42	; 0x2a
 80014ac:	f7ff fb36 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x2B,WX>>8);
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4619      	mov	r1, r3
 80014ba:	202b      	movs	r0, #43	; 0x2b
 80014bc:	f7ff fb2e 	bl	8000b1c <LCD_RegisterWrite>

	LCD_RegisterWrite(0x2C,HY);
 80014c0:	88bb      	ldrh	r3, [r7, #4]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4619      	mov	r1, r3
 80014c6:	202c      	movs	r0, #44	; 0x2c
 80014c8:	f7ff fb28 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x2D,HY>>8);
 80014cc:	88bb      	ldrh	r3, [r7, #4]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4619      	mov	r1, r3
 80014d6:	202d      	movs	r0, #45	; 0x2d
 80014d8:	f7ff fb20 	bl	8000b1c <LCD_RegisterWrite>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <PIP_Image_Start_Address>:
//[2Eh][2Fh][30h][31h]=========================================================================
void PIP_Image_Start_Address(unsigned long Addr)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
[2Eh] PIP Image Start Address[7:2]
[2Fh] PIP Image Start Address[15:8]
[30h] PIP Image Start Address [23:16]
[31h] PIP Image Start Address [31:24]
*/
	LCD_RegisterWrite(0x2E,Addr);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4619      	mov	r1, r3
 80014f2:	202e      	movs	r0, #46	; 0x2e
 80014f4:	f7ff fb12 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x2F,Addr>>8);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	4619      	mov	r1, r3
 8001500:	202f      	movs	r0, #47	; 0x2f
 8001502:	f7ff fb0b 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x30,Addr>>16);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	0c1b      	lsrs	r3, r3, #16
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4619      	mov	r1, r3
 800150e:	2030      	movs	r0, #48	; 0x30
 8001510:	f7ff fb04 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x31,Addr>>24);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	0e1b      	lsrs	r3, r3, #24
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4619      	mov	r1, r3
 800151c:	2031      	movs	r0, #49	; 0x31
 800151e:	f7ff fafd 	bl	8000b1c <LCD_RegisterWrite>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <PIP_Image_Width>:
//[32h][33h]=========================================================================
void PIP_Image_Width(unsigned short WX)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	80fb      	strh	r3, [r7, #6]
The value is physical pixel number.
This width should less than horizontal display width.
According to bit of Select Configure PIP 1 or 2 Windows parameters.
Function bit will be configured for relative PIP window.
*/
	LCD_RegisterWrite(0x32,WX);
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4619      	mov	r1, r3
 800153a:	2032      	movs	r0, #50	; 0x32
 800153c:	f7ff faee 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x33,WX>>8);
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	b29b      	uxth	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4619      	mov	r1, r3
 800154a:	2033      	movs	r0, #51	; 0x33
 800154c:	f7ff fae6 	bl	8000b1c <LCD_RegisterWrite>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <PIP_Window_Image_Start_XY>:
//[34h][35h][36h][37h]=========================================================================
void PIP_Window_Image_Start_XY(unsigned short WX,unsigned short HY)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	460a      	mov	r2, r1
 8001562:	80fb      	strh	r3, [r7, #6]
 8001564:	4613      	mov	r3, r2
 8001566:	80bb      	strh	r3, [r7, #4]
Unit: Pixel
Y-axis coordination plus PIP window height should less than 8191.
According to bit of Select Configure PIP 1 or 2 Windows parameters.
Function bit will be configured for relative PIP window.
*/
	LCD_RegisterWrite(0x34,WX);
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4619      	mov	r1, r3
 800156e:	2034      	movs	r0, #52	; 0x34
 8001570:	f7ff fad4 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x35,WX>>8);
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	b29b      	uxth	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	4619      	mov	r1, r3
 800157e:	2035      	movs	r0, #53	; 0x35
 8001580:	f7ff facc 	bl	8000b1c <LCD_RegisterWrite>

	LCD_RegisterWrite(0x36,HY);
 8001584:	88bb      	ldrh	r3, [r7, #4]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4619      	mov	r1, r3
 800158a:	2036      	movs	r0, #54	; 0x36
 800158c:	f7ff fac6 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x37,HY>>8);
 8001590:	88bb      	ldrh	r3, [r7, #4]
 8001592:	0a1b      	lsrs	r3, r3, #8
 8001594:	b29b      	uxth	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	2037      	movs	r0, #55	; 0x37
 800159c:	f7ff fabe 	bl	8000b1c <LCD_RegisterWrite>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <PIP_Window_Width_Height>:
//[38h][39h][3Ah][3Bh]=========================================================================
void PIP_Window_Width_Height(unsigned short WX,unsigned short HY)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	460a      	mov	r2, r1
 80015b2:	80fb      	strh	r3, [r7, #6]
 80015b4:	4613      	mov	r3, r2
 80015b6:	80bb      	strh	r3, [r7, #4]
Unit: Pixel
The value is physical pixel number. Maximum value is 8191 pixels.
According to bit of Select Configure PIP 1 or 2 Windows parameters.
Function bit will be configured for relative PIP window.
*/
	LCD_RegisterWrite(0x38,WX);
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4619      	mov	r1, r3
 80015be:	2038      	movs	r0, #56	; 0x38
 80015c0:	f7ff faac 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x39,WX>>8);
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4619      	mov	r1, r3
 80015ce:	2039      	movs	r0, #57	; 0x39
 80015d0:	f7ff faa4 	bl	8000b1c <LCD_RegisterWrite>

	LCD_RegisterWrite(0x3A,HY);
 80015d4:	88bb      	ldrh	r3, [r7, #4]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4619      	mov	r1, r3
 80015da:	203a      	movs	r0, #58	; 0x3a
 80015dc:	f7ff fa9e 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x3B,HY>>8);
 80015e0:	88bb      	ldrh	r3, [r7, #4]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	4619      	mov	r1, r3
 80015ea:	203b      	movs	r0, #59	; 0x3b
 80015ec:	f7ff fa96 	bl	8000b1c <LCD_RegisterWrite>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <Canvas_Image_Start_address>:
*/
	LCD_RegisterWrite(0x45,temp);
}
//[50h][51h][52h][53h]=========================================================================
void Canvas_Image_Start_address(unsigned long Addr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
[50h] Start address of Canvas [7:0]
[51h] Start address of Canvas [15:8]
[52h] Start address of Canvas [23:16]
[53h] Start address of Canvas [31:24]
*/
	LCD_RegisterWrite(0x50,Addr);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4619      	mov	r1, r3
 8001606:	2050      	movs	r0, #80	; 0x50
 8001608:	f7ff fa88 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x51,Addr>>8);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4619      	mov	r1, r3
 8001614:	2051      	movs	r0, #81	; 0x51
 8001616:	f7ff fa81 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x52,Addr>>16);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	0c1b      	lsrs	r3, r3, #16
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4619      	mov	r1, r3
 8001622:	2052      	movs	r0, #82	; 0x52
 8001624:	f7ff fa7a 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x53,Addr>>24);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	0e1b      	lsrs	r3, r3, #24
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4619      	mov	r1, r3
 8001630:	2053      	movs	r0, #83	; 0x53
 8001632:	f7ff fa73 	bl	8000b1c <LCD_RegisterWrite>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <Canvas_image_width>:
//[54h][55h]=========================================================================
void Canvas_image_width(unsigned short WX)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	80fb      	strh	r3, [r7, #6]
/*
[54h] Canvas image width [7:2]
[55h] Canvas image width [12:8]
*/
	LCD_RegisterWrite(0x54,WX);
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	4619      	mov	r1, r3
 800164e:	2054      	movs	r0, #84	; 0x54
 8001650:	f7ff fa64 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x55,WX>>8);
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	b29b      	uxth	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	4619      	mov	r1, r3
 800165e:	2055      	movs	r0, #85	; 0x55
 8001660:	f7ff fa5c 	bl	8000b1c <LCD_RegisterWrite>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <Active_Window_XY>:
//[56h][57h][58h][59h]=========================================================================
void Active_Window_XY(unsigned short WX,unsigned short HY)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	460a      	mov	r2, r1
 8001676:	80fb      	strh	r3, [r7, #6]
 8001678:	4613      	mov	r3, r2
 800167a:	80bb      	strh	r3, [r7, #4]
[56h] Active Window Upper-Left corner X-coordination [7:0]
[57h] Active Window Upper-Left corner X-coordination [12:8]
[58h] Active Window Upper-Left corner Y-coordination [7:0]
[59h] Active Window Upper-Left corner Y-coordination [12:8]
*/
	LCD_RegisterWrite(0x56,WX);
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	4619      	mov	r1, r3
 8001682:	2056      	movs	r0, #86	; 0x56
 8001684:	f7ff fa4a 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x57,WX>>8);
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	b29b      	uxth	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	4619      	mov	r1, r3
 8001692:	2057      	movs	r0, #87	; 0x57
 8001694:	f7ff fa42 	bl	8000b1c <LCD_RegisterWrite>

	LCD_RegisterWrite(0x58,HY);
 8001698:	88bb      	ldrh	r3, [r7, #4]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4619      	mov	r1, r3
 800169e:	2058      	movs	r0, #88	; 0x58
 80016a0:	f7ff fa3c 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x59,HY>>8);
 80016a4:	88bb      	ldrh	r3, [r7, #4]
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	4619      	mov	r1, r3
 80016ae:	2059      	movs	r0, #89	; 0x59
 80016b0:	f7ff fa34 	bl	8000b1c <LCD_RegisterWrite>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <Active_Window_WH>:
//[5Ah][5Bh][5Ch][5Dh]=========================================================================
void Active_Window_WH(unsigned short WX,unsigned short HY)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	460a      	mov	r2, r1
 80016c6:	80fb      	strh	r3, [r7, #6]
 80016c8:	4613      	mov	r3, r2
 80016ca:	80bb      	strh	r3, [r7, #4]
[5Ah] Width of Active Window [7:0]
[5Bh] Width of Active Window [12:8]
[5Ch] Height of Active Window [7:0]
[5Dh] Height of Active Window [12:8]
*/
	LCD_RegisterWrite(0x5A,WX);
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	4619      	mov	r1, r3
 80016d2:	205a      	movs	r0, #90	; 0x5a
 80016d4:	f7ff fa22 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x5B,WX>>8);
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	b29b      	uxth	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4619      	mov	r1, r3
 80016e2:	205b      	movs	r0, #91	; 0x5b
 80016e4:	f7ff fa1a 	bl	8000b1c <LCD_RegisterWrite>

 	LCD_RegisterWrite(0x5C,HY);
 80016e8:	88bb      	ldrh	r3, [r7, #4]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4619      	mov	r1, r3
 80016ee:	205c      	movs	r0, #92	; 0x5c
 80016f0:	f7ff fa14 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x5D,HY>>8);
 80016f4:	88bb      	ldrh	r3, [r7, #4]
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	4619      	mov	r1, r3
 80016fe:	205d      	movs	r0, #93	; 0x5d
 8001700:	f7ff fa0c 	bl	8000b1c <LCD_RegisterWrite>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <Memory_XY_Mode>:
	temp = LCD_DataRead();
	temp |= cSetb3;
	LCD_DataWrite(temp);
}
void Memory_XY_Mode(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
0: Block mode (X-Y coordination addressing)
1: linear mode
*/
	unsigned char temp;

	LCD_CmdWrite(0x5E);
 8001712:	205e      	movs	r0, #94	; 0x5e
 8001714:	f7ff f98a 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001718:	f7ff f9c4 	bl	8000aa4 <LCD_DataRead>
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb2;
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f023 0304 	bic.w	r3, r3, #4
 8001726:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff f99c 	bl	8000a68 <LCD_DataWrite>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <Memory_8bpp_Mode>:
	temp = LCD_DataRead();
	temp |= cSetb2;
	LCD_DataWrite(temp);
}
void Memory_8bpp_Mode(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
X0: 8-bits memory data read/write.
X1: 16-bits memory data read/write
*/
	unsigned char temp;

	LCD_CmdWrite(0x5E);
 800173e:	205e      	movs	r0, #94	; 0x5e
 8001740:	f7ff f974 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001744:	f7ff f9ae 	bl	8000aa4 <LCD_DataRead>
 8001748:	4603      	mov	r3, r0
 800174a:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb1;
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f023 0302 	bic.w	r3, r3, #2
 8001752:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb0;
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f023 0301 	bic.w	r3, r3, #1
 800175a:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff f982 	bl	8000a68 <LCD_DataWrite>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <Goto_Text_XY>:
}


//[63h][64h][65h][66h]=========================================================================
void Goto_Text_XY(unsigned short WX,unsigned short HY)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	80fb      	strh	r3, [r7, #6]
 8001778:	4613      	mov	r3, r2
 800177a:	80bb      	strh	r3, [r7, #4]
Text Write X-coordination [12:8][7:0]
Text Write Y-coordination [12:8][7:0]
Reference Canvas image coordination.
Unit: Pixel
*/
	LCD_RegisterWrite(0x63,WX);
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4619      	mov	r1, r3
 8001782:	2063      	movs	r0, #99	; 0x63
 8001784:	f7ff f9ca 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x64,WX>>8);
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	0a1b      	lsrs	r3, r3, #8
 800178c:	b29b      	uxth	r3, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4619      	mov	r1, r3
 8001792:	2064      	movs	r0, #100	; 0x64
 8001794:	f7ff f9c2 	bl	8000b1c <LCD_RegisterWrite>

	LCD_RegisterWrite(0x65,HY);
 8001798:	88bb      	ldrh	r3, [r7, #4]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	4619      	mov	r1, r3
 800179e:	2065      	movs	r0, #101	; 0x65
 80017a0:	f7ff f9bc 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x66,HY>>8);
 80017a4:	88bb      	ldrh	r3, [r7, #4]
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	2066      	movs	r0, #102	; 0x66
 80017b0:	f7ff f9b4 	bl	8000b1c <LCD_RegisterWrite>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <Start_Triangle_Fill>:
	LCD_CmdWrite(0x67);
	LCD_DataWrite(0x82);//B1000_0010
	Check_Busy_Draw();
}
void Start_Triangle_Fill(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

	LCD_CmdWrite(0x67);
 80017c0:	2067      	movs	r0, #103	; 0x67
 80017c2:	f7ff f933 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(0xA2);//B1010_0010
 80017c6:	20a2      	movs	r0, #162	; 0xa2
 80017c8:	f7ff f94e 	bl	8000a68 <LCD_DataWrite>
	Check_Busy_Draw();
 80017cc:	f7ff faa1 	bl	8000d12 <Check_Busy_Draw>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <Line_Start_XY>:
//[68h][69h][6Ah][6Bh]=========================================================================
//�u�_�I
void Line_Start_XY(unsigned short WX,unsigned short HY)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	460a      	mov	r2, r1
 80017de:	80fb      	strh	r3, [r7, #6]
 80017e0:	4613      	mov	r3, r2
 80017e2:	80bb      	strh	r3, [r7, #4]
[68h] Draw Line/Square/Triangle Start X-coordination [7:0]
[69h] Draw Line/Square/Triangle Start X-coordination [12:8]
[6Ah] Draw Line/Square/Triangle Start Y-coordination [7:0]
[6Bh] Draw Line/Square/Triangle Start Y-coordination [12:8]
*/
	LCD_CmdWrite(0x68);
 80017e4:	2068      	movs	r0, #104	; 0x68
 80017e6:	f7ff f921 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(WX);
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff f93a 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x69);
 80017f4:	2069      	movs	r0, #105	; 0x69
 80017f6:	f7ff f919 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	b29b      	uxth	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f930 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x6A);
 8001808:	206a      	movs	r0, #106	; 0x6a
 800180a:	f7ff f90f 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(HY);
 800180e:	88bb      	ldrh	r3, [r7, #4]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f928 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x6B);
 8001818:	206b      	movs	r0, #107	; 0x6b
 800181a:	f7ff f907 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 800181e:	88bb      	ldrh	r3, [r7, #4]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	b29b      	uxth	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f91e 	bl	8000a68 <LCD_DataWrite>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <Line_End_XY>:
//[6Ch][6Dh][6Eh][6Fh]=========================================================================
void Line_End_XY(unsigned short WX,unsigned short HY)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	460a      	mov	r2, r1
 800183e:	80fb      	strh	r3, [r7, #6]
 8001840:	4613      	mov	r3, r2
 8001842:	80bb      	strh	r3, [r7, #4]
[6Ch] Draw Line/Square/Triangle End X-coordination [7:0]
[6Dh] Draw Line/Square/Triangle End X-coordination [12:8]
[6Eh] Draw Line/Square/Triangle End Y-coordination [7:0]
[6Fh] Draw Line/Square/Triangle End Y-coordination [12:8]
*/
	LCD_CmdWrite(0x6C);
 8001844:	206c      	movs	r0, #108	; 0x6c
 8001846:	f7ff f8f1 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(WX);
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff f90a 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x6D);
 8001854:	206d      	movs	r0, #109	; 0x6d
 8001856:	f7ff f8e9 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	b29b      	uxth	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f900 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x6E);
 8001868:	206e      	movs	r0, #110	; 0x6e
 800186a:	f7ff f8df 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(HY);
 800186e:	88bb      	ldrh	r3, [r7, #4]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f8f8 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x6F);
 8001878:	206f      	movs	r0, #111	; 0x6f
 800187a:	f7ff f8d7 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 800187e:	88bb      	ldrh	r3, [r7, #4]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	b29b      	uxth	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f8ee 	bl	8000a68 <LCD_DataWrite>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <Triangle_Point1_XY>:
//[68h]~[73h]=========================================================================
void Triangle_Point1_XY(unsigned short WX,unsigned short HY)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	460a      	mov	r2, r1
 800189e:	80fb      	strh	r3, [r7, #6]
 80018a0:	4613      	mov	r3, r2
 80018a2:	80bb      	strh	r3, [r7, #4]
[68h] Draw Line/Square/Triangle Start X-coordination [7:0]
[69h] Draw Line/Square/Triangle Start X-coordination [12:8]
[6Ah] Draw Line/Square/Triangle Start Y-coordination [7:0]
[6Bh] Draw Line/Square/Triangle Start Y-coordination [12:8]
*/
	LCD_CmdWrite(0x68);
 80018a4:	2068      	movs	r0, #104	; 0x68
 80018a6:	f7ff f8c1 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(WX);
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f8da 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x69);
 80018b4:	2069      	movs	r0, #105	; 0x69
 80018b6:	f7ff f8b9 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	b29b      	uxth	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f8d0 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x6A);
 80018c8:	206a      	movs	r0, #106	; 0x6a
 80018ca:	f7ff f8af 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(HY);
 80018ce:	88bb      	ldrh	r3, [r7, #4]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f8c8 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x6B);
 80018d8:	206b      	movs	r0, #107	; 0x6b
 80018da:	f7ff f8a7 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 80018de:	88bb      	ldrh	r3, [r7, #4]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f8be 	bl	8000a68 <LCD_DataWrite>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <Triangle_Point2_XY>:
void Triangle_Point2_XY(unsigned short WX,unsigned short HY)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	80fb      	strh	r3, [r7, #6]
 8001900:	4613      	mov	r3, r2
 8001902:	80bb      	strh	r3, [r7, #4]
[6Ch] Draw Line/Square/Triangle End X-coordination [7:0]
[6Dh] Draw Line/Square/Triangle End X-coordination [12:8]
[6Eh] Draw Line/Square/Triangle End Y-coordination [7:0]
[6Fh] Draw Line/Square/Triangle End Y-coordination [12:8]
*/
	LCD_CmdWrite(0x6C);
 8001904:	206c      	movs	r0, #108	; 0x6c
 8001906:	f7ff f891 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(WX);
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f8aa 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x6D);
 8001914:	206d      	movs	r0, #109	; 0x6d
 8001916:	f7ff f889 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	b29b      	uxth	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff f8a0 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x6E);
 8001928:	206e      	movs	r0, #110	; 0x6e
 800192a:	f7ff f87f 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(HY);
 800192e:	88bb      	ldrh	r3, [r7, #4]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f898 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x6F);
 8001938:	206f      	movs	r0, #111	; 0x6f
 800193a:	f7ff f877 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	b29b      	uxth	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f88e 	bl	8000a68 <LCD_DataWrite>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <Triangle_Point3_XY>:
void Triangle_Point3_XY (unsigned short WX,unsigned short HY)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	460a      	mov	r2, r1
 800195e:	80fb      	strh	r3, [r7, #6]
 8001960:	4613      	mov	r3, r2
 8001962:	80bb      	strh	r3, [r7, #4]
[70h] Draw Triangle Point 3 X-coordination [7:0]
[71h] Draw Triangle Point 3 X-coordination [12:8]
[72h] Draw Triangle Point 3 Y-coordination [7:0]
[73h] Draw Triangle Point 3 Y-coordination [12:8]
*/
	LCD_CmdWrite(0x70);
 8001964:	2070      	movs	r0, #112	; 0x70
 8001966:	f7ff f861 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(WX);
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f87a 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x71);
 8001974:	2071      	movs	r0, #113	; 0x71
 8001976:	f7ff f859 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	b29b      	uxth	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f870 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x72);
 8001988:	2072      	movs	r0, #114	; 0x72
 800198a:	f7ff f84f 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(HY);
 800198e:	88bb      	ldrh	r3, [r7, #4]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff f868 	bl	8000a68 <LCD_DataWrite>

	LCD_CmdWrite(0x73);
 8001998:	2073      	movs	r0, #115	; 0x73
 800199a:	f7ff f847 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f85e 	bl	8000a68 <LCD_DataWrite>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <Start_Square_Fill>:
	LCD_CmdWrite(0x76);
	LCD_DataWrite(0xA0);//B1010_XXXX
	Check_Busy_Draw();
}
void Start_Square_Fill(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	LCD_CmdWrite(0x76);
 80019b8:	2076      	movs	r0, #118	; 0x76
 80019ba:	f7ff f837 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(0xE0);//B1110_XXXX
 80019be:	20e0      	movs	r0, #224	; 0xe0
 80019c0:	f7ff f852 	bl	8000a68 <LCD_DataWrite>
	Check_Busy_Draw();
 80019c4:	f7ff f9a5 	bl	8000d12 <Check_Busy_Draw>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <BTE_Enable>:

//[90h]~[B5h]=========================================================================

//[90h]=========================================================================
void BTE_Enable(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
BTE Function Enable
0 : BTE Function disable.
1 : BTE Function enable.
*/
    unsigned char temp;
    LCD_CmdWrite(0x90);
 80019d2:	2090      	movs	r0, #144	; 0x90
 80019d4:	f7ff f82a 	bl	8000a2c <LCD_CmdWrite>
    temp = LCD_DataRead();
 80019d8:	f7ff f864 	bl	8000aa4 <LCD_DataRead>
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb4 ;
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f043 0310 	orr.w	r3, r3, #16
 80019e6:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f83c 	bl	8000a68 <LCD_DataWrite>
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <Check_BTE_Busy>:
	LCD_DataWrite(temp);
}

//[90h]=========================================================================
void Check_BTE_Busy(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
1 : BTE Function is busy.
*/
	unsigned char temp;
	do
	{
		temp=LCD_StatusRead();
 80019fe:	f7ff f86f 	bl	8000ae0 <LCD_StatusRead>
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
	}while(temp&0x08);
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f6      	bne.n	80019fe <Check_BTE_Busy+0x6>

}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <BTE_ROP_Code>:
	  LCD_DataWrite(temp);
}

//[91h]=========================================================================
void BTE_ROP_Code(unsigned char setx)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	71fb      	strb	r3, [r7, #7]
1101 : S0+~S1
1110 : S0+S1
1111 : 1 ( Whiteness )
*/
    unsigned char temp;
    LCD_CmdWrite(0x91);
 8001a24:	2091      	movs	r0, #145	; 0x91
 8001a26:	f7ff f801 	bl	8000a2c <LCD_CmdWrite>
    temp = LCD_DataRead();
 8001a2a:	f7ff f83b 	bl	8000aa4 <LCD_DataRead>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	73fb      	strb	r3, [r7, #15]
    temp &= 0x0f ;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	73fb      	strb	r3, [r7, #15]
		temp |= (setx<<4);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	b25a      	sxtb	r2, r3
 8001a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	73fb      	strb	r3, [r7, #15]
	  LCD_DataWrite(temp);
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f80b 	bl	8000a68 <LCD_DataWrite>
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <BTE_Operation_Code>:

//[91h]=========================================================================
void BTE_Operation_Code(unsigned char setx)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
1101 : Reserved
1110 : Reserved
1111 : Reserved
*/
    unsigned char temp;
    LCD_CmdWrite(0x91);
 8001a64:	2091      	movs	r0, #145	; 0x91
 8001a66:	f7fe ffe1 	bl	8000a2c <LCD_CmdWrite>
    temp = LCD_DataRead();
 8001a6a:	f7ff f81b 	bl	8000aa4 <LCD_DataRead>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	73fb      	strb	r3, [r7, #15]
    temp &= 0xf0 ;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	f023 030f 	bic.w	r3, r3, #15
 8001a78:	73fb      	strb	r3, [r7, #15]
		temp |= setx ;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	73fb      	strb	r3, [r7, #15]
	  LCD_DataWrite(temp);
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe ffef 	bl	8000a68 <LCD_DataWrite>

}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <BTE_S0_Color_8bpp>:
//[92h]=========================================================================
void BTE_S0_Color_8bpp(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
00 : 256 Color
01 : 64k Color
1x : 16M Color
*/
    unsigned char temp;
    LCD_CmdWrite(0x92);
 8001a98:	2092      	movs	r0, #146	; 0x92
 8001a9a:	f7fe ffc7 	bl	8000a2c <LCD_CmdWrite>
    temp = LCD_DataRead();
 8001a9e:	f7ff f801 	bl	8000aa4 <LCD_DataRead>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb6 ;
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aac:	71fb      	strb	r3, [r7, #7]
		temp &= cClrb5 ;
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	f023 0320 	bic.w	r3, r3, #32
 8001ab4:	71fb      	strb	r3, [r7, #7]
	  LCD_DataWrite(temp);
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe ffd5 	bl	8000a68 <LCD_DataWrite>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <BTE_S1_Color_8bpp>:
		//temp |= cSetb5 ;
	  LCD_DataWrite(temp);
}
//[92h]=========================================================================
void BTE_S1_Color_8bpp(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
011 : Constant Color
100 : 8 bit pixel alpha blending
101 : 16 bit pixel alpha blending
*/
    unsigned char temp;
    LCD_CmdWrite(0x92);
 8001acc:	2092      	movs	r0, #146	; 0x92
 8001ace:	f7fe ffad 	bl	8000a2c <LCD_CmdWrite>
    temp = LCD_DataRead();
 8001ad2:	f7fe ffe7 	bl	8000aa4 <LCD_DataRead>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb4 ;
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f023 0310 	bic.w	r3, r3, #16
 8001ae0:	71fb      	strb	r3, [r7, #7]
		temp &= cClrb3 ;
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f023 0308 	bic.w	r3, r3, #8
 8001ae8:	71fb      	strb	r3, [r7, #7]
	  temp &= cClrb2 ;
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	71fb      	strb	r3, [r7, #7]
	  LCD_DataWrite(temp);
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe ffb7 	bl	8000a68 <LCD_DataWrite>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <BTE_Destination_Color_8bpp>:
	  LCD_DataWrite(temp);
}

//[92h]=========================================================================
void BTE_Destination_Color_8bpp(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
00 : 256 Color
01 : 64k Color
1x : 16M Color
*/
    unsigned char temp;
    LCD_CmdWrite(0x92);
 8001b08:	2092      	movs	r0, #146	; 0x92
 8001b0a:	f7fe ff8f 	bl	8000a2c <LCD_CmdWrite>
    temp = LCD_DataRead();
 8001b0e:	f7fe ffc9 	bl	8000aa4 <LCD_DataRead>
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb1 ;
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	f023 0302 	bic.w	r3, r3, #2
 8001b1c:	71fb      	strb	r3, [r7, #7]
		temp &= cClrb0 ;
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	71fb      	strb	r3, [r7, #7]
	  LCD_DataWrite(temp);
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe ff9d 	bl	8000a68 <LCD_DataWrite>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <BTE_S0_Memory_Start_Address>:
}


//[93h][94h][95h][96h]=========================================================================
void BTE_S0_Memory_Start_Address(unsigned long Addr)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
[93h] BTE S0 Memory Start Address [7:0]
[94h] BTE S0 Memory Start Address [15:8]
[95h] BTE S0 Memory Start Address [23:16]
[96h] BTE S0 Memory Start Address [31:24]
*/
	LCD_RegisterWrite(0x93,Addr);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	4619      	mov	r1, r3
 8001b44:	2093      	movs	r0, #147	; 0x93
 8001b46:	f7fe ffe9 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x94,Addr>>8);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4619      	mov	r1, r3
 8001b52:	2094      	movs	r0, #148	; 0x94
 8001b54:	f7fe ffe2 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x95,Addr>>16);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	0c1b      	lsrs	r3, r3, #16
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4619      	mov	r1, r3
 8001b60:	2095      	movs	r0, #149	; 0x95
 8001b62:	f7fe ffdb 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x96,Addr>>24);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	0e1b      	lsrs	r3, r3, #24
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	2096      	movs	r0, #150	; 0x96
 8001b70:	f7fe ffd4 	bl	8000b1c <LCD_RegisterWrite>
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <BTE_S0_Image_Width>:


//[97h][98h]=========================================================================
void BTE_S0_Image_Width(unsigned short WX)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
/*
[97h] BTE S0 Image Width [7:0]
[98h] BTE S0 Image Width [12:8]
Unit: Pixel.
*/
	LCD_RegisterWrite(0x97,WX);
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	2097      	movs	r0, #151	; 0x97
 8001b8e:	f7fe ffc5 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x98,WX>>8);
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	2098      	movs	r0, #152	; 0x98
 8001b9e:	f7fe ffbd 	bl	8000b1c <LCD_RegisterWrite>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <BTE_S0_Window_Start_XY>:


//[99h][9Ah][9Bh][9Ch]=========================================================================
void BTE_S0_Window_Start_XY(unsigned short WX,unsigned short HY)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	460a      	mov	r2, r1
 8001bb4:	80fb      	strh	r3, [r7, #6]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	80bb      	strh	r3, [r7, #4]
[99h] BTE S0 Window Upper-Left corner X-coordination [7:0]
[9Ah] BTE S0 Window Upper-Left corner X-coordination [12:8]
[9Bh] BTE S0 Window Upper-Left corner Y-coordination [7:0]
[9Ch] BTE S0 Window Upper-Left corner Y-coordination [12:8]
*/
	LCD_RegisterWrite(0x99,WX);
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	2099      	movs	r0, #153	; 0x99
 8001bc2:	f7fe ffab 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x9A,WX>>8);
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	4619      	mov	r1, r3
 8001bd0:	209a      	movs	r0, #154	; 0x9a
 8001bd2:	f7fe ffa3 	bl	8000b1c <LCD_RegisterWrite>

	LCD_RegisterWrite(0x9B,HY);
 8001bd6:	88bb      	ldrh	r3, [r7, #4]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	4619      	mov	r1, r3
 8001bdc:	209b      	movs	r0, #155	; 0x9b
 8001bde:	f7fe ff9d 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x9C,HY>>8);
 8001be2:	88bb      	ldrh	r3, [r7, #4]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	4619      	mov	r1, r3
 8001bec:	209c      	movs	r0, #156	; 0x9c
 8001bee:	f7fe ff95 	bl	8000b1c <LCD_RegisterWrite>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <BTE_S1_Memory_Start_Address>:



//[9Dh][9Eh][9Fh][A0h]=========================================================================
void BTE_S1_Memory_Start_Address(unsigned long Addr)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
[9Dh] BTE S1 Memory Start Address [7:0]
[9Eh] BTE S1 Memory Start Address [15:8]
[9Fh] BTE S1 Memory Start Address [23:16]
[A0h] BTE S1 Memory Start Address [31:24]
*/
	LCD_RegisterWrite(0x9D,Addr);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	4619      	mov	r1, r3
 8001c08:	209d      	movs	r0, #157	; 0x9d
 8001c0a:	f7fe ff87 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x9E,Addr>>8);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	4619      	mov	r1, r3
 8001c16:	209e      	movs	r0, #158	; 0x9e
 8001c18:	f7fe ff80 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0x9F,Addr>>16);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	0c1b      	lsrs	r3, r3, #16
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4619      	mov	r1, r3
 8001c24:	209f      	movs	r0, #159	; 0x9f
 8001c26:	f7fe ff79 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0xA0,Addr>>24);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	0e1b      	lsrs	r3, r3, #24
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	4619      	mov	r1, r3
 8001c32:	20a0      	movs	r0, #160	; 0xa0
 8001c34:	f7fe ff72 	bl	8000b1c <LCD_RegisterWrite>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <BTE_S1_Image_Width>:



//[A1h][A2h]=========================================================================
void BTE_S1_Image_Width(unsigned short WX)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	80fb      	strh	r3, [r7, #6]
/*
[A1h] BTE S1 Image Width [7:0]
[A2h] BTE S1 Image Width [12:8]
Unit: Pixel.
*/
	LCD_RegisterWrite(0xA1,WX);
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	4619      	mov	r1, r3
 8001c50:	20a1      	movs	r0, #161	; 0xa1
 8001c52:	f7fe ff63 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0xA2,WX>>8);
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4619      	mov	r1, r3
 8001c60:	20a2      	movs	r0, #162	; 0xa2
 8001c62:	f7fe ff5b 	bl	8000b1c <LCD_RegisterWrite>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <BTE_S1_Window_Start_XY>:


//[A3h][A4h][A5h][A6h]=========================================================================
void BTE_S1_Window_Start_XY(unsigned short WX,unsigned short HY)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	460a      	mov	r2, r1
 8001c78:	80fb      	strh	r3, [r7, #6]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	80bb      	strh	r3, [r7, #4]
[A3h] BTE S1 Window Upper-Left corner X-coordination [7:0]
[A4h] BTE S1 Window Upper-Left corner X-coordination [12:8]
[A5h] BTE S1 Window Upper-Left corner Y-coordination [7:0]
[A6h] BTE S1 Window Upper-Left corner Y-coordination [12:8]
*/
	LCD_RegisterWrite(0xA3,WX);
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	4619      	mov	r1, r3
 8001c84:	20a3      	movs	r0, #163	; 0xa3
 8001c86:	f7fe ff49 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0xA4,WX>>8);
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	20a4      	movs	r0, #164	; 0xa4
 8001c96:	f7fe ff41 	bl	8000b1c <LCD_RegisterWrite>

	LCD_RegisterWrite(0xA5,HY);
 8001c9a:	88bb      	ldrh	r3, [r7, #4]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	20a5      	movs	r0, #165	; 0xa5
 8001ca2:	f7fe ff3b 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0xA6,HY>>8);
 8001ca6:	88bb      	ldrh	r3, [r7, #4]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	20a6      	movs	r0, #166	; 0xa6
 8001cb2:	f7fe ff33 	bl	8000b1c <LCD_RegisterWrite>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <BTE_Destination_Memory_Start_Address>:



//[A7h][A8h][A9h][AAh]=========================================================================
void BTE_Destination_Memory_Start_Address(unsigned long Addr)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
[A7h] BTE Destination Memory Start Address [7:0]
[A8h] BTE Destination Memory Start Address [15:8]
[A9h] BTE Destination Memory Start Address [23:16]
[AAh] BTE Destination Memory Start Address [31:24]
*/
	LCD_RegisterWrite(0xA7,Addr);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	20a7      	movs	r0, #167	; 0xa7
 8001cce:	f7fe ff25 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0xA8,Addr>>8);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	4619      	mov	r1, r3
 8001cda:	20a8      	movs	r0, #168	; 0xa8
 8001cdc:	f7fe ff1e 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0xA9,Addr>>16);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	0c1b      	lsrs	r3, r3, #16
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	20a9      	movs	r0, #169	; 0xa9
 8001cea:	f7fe ff17 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0xAA,Addr>>24);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	0e1b      	lsrs	r3, r3, #24
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	20aa      	movs	r0, #170	; 0xaa
 8001cf8:	f7fe ff10 	bl	8000b1c <LCD_RegisterWrite>
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <BTE_Destination_Image_Width>:


//[ABh][ACh]=========================================================================
void BTE_Destination_Image_Width(unsigned short WX)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
/*
[ABh] BTE Destination Image Width [7:0]
[ACh] BTE Destination Image Width [12:8]
Unit: Pixel.
*/
	LCD_RegisterWrite(0xAB,WX);
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4619      	mov	r1, r3
 8001d14:	20ab      	movs	r0, #171	; 0xab
 8001d16:	f7fe ff01 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0xAC,WX>>8);
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	4619      	mov	r1, r3
 8001d24:	20ac      	movs	r0, #172	; 0xac
 8001d26:	f7fe fef9 	bl	8000b1c <LCD_RegisterWrite>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <BTE_Destination_Window_Start_XY>:


//[ADh][AEh][AFh][B0h]=========================================================================
void BTE_Destination_Window_Start_XY(unsigned short WX,unsigned short HY)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	460a      	mov	r2, r1
 8001d3c:	80fb      	strh	r3, [r7, #6]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	80bb      	strh	r3, [r7, #4]
[ADh] BTE Destination Window Upper-Left corner X-coordination [7:0]
[AEh] BTE Destination Window Upper-Left corner X-coordination [12:8]
[AFh] BTE Destination Window Upper-Left corner Y-coordination [7:0]
[B0h] BTE Destination Window Upper-Left corner Y-coordination [12:8]
*/
	LCD_RegisterWrite(0xAD,WX);
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4619      	mov	r1, r3
 8001d48:	20ad      	movs	r0, #173	; 0xad
 8001d4a:	f7fe fee7 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0xAE,WX>>8);
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	4619      	mov	r1, r3
 8001d58:	20ae      	movs	r0, #174	; 0xae
 8001d5a:	f7fe fedf 	bl	8000b1c <LCD_RegisterWrite>

	LCD_RegisterWrite(0xAF,HY);
 8001d5e:	88bb      	ldrh	r3, [r7, #4]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4619      	mov	r1, r3
 8001d64:	20af      	movs	r0, #175	; 0xaf
 8001d66:	f7fe fed9 	bl	8000b1c <LCD_RegisterWrite>
	LCD_RegisterWrite(0xB0,HY>>8);
 8001d6a:	88bb      	ldrh	r3, [r7, #4]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4619      	mov	r1, r3
 8001d74:	20b0      	movs	r0, #176	; 0xb0
 8001d76:	f7fe fed1 	bl	8000b1c <LCD_RegisterWrite>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <BTE_Window_Size>:

//[B1h][B2h][B3h][B4h]===============================================================

void BTE_Window_Size(unsigned short WX, unsigned short WY)

{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	460a      	mov	r2, r1
 8001d8c:	80fb      	strh	r3, [r7, #6]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	80bb      	strh	r3, [r7, #4]
[B2h] BTE Window Width [12:8]

[B3h] BTE Window Height [7:0]
[B4h] BTE Window Height [12:8]
*/
        LCD_RegisterWrite(0xB1,WX);
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	4619      	mov	r1, r3
 8001d98:	20b1      	movs	r0, #177	; 0xb1
 8001d9a:	f7fe febf 	bl	8000b1c <LCD_RegisterWrite>
        LCD_RegisterWrite(0xB2,WX>>8);
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4619      	mov	r1, r3
 8001da8:	20b2      	movs	r0, #178	; 0xb2
 8001daa:	f7fe feb7 	bl	8000b1c <LCD_RegisterWrite>

	    LCD_RegisterWrite(0xB3,WY);
 8001dae:	88bb      	ldrh	r3, [r7, #4]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	4619      	mov	r1, r3
 8001db4:	20b3      	movs	r0, #179	; 0xb3
 8001db6:	f7fe feb1 	bl	8000b1c <LCD_RegisterWrite>
        LCD_RegisterWrite(0xB4,WY>>8);
 8001dba:	88bb      	ldrh	r3, [r7, #4]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	20b4      	movs	r0, #180	; 0xb4
 8001dc6:	f7fe fea9 	bl	8000b1c <LCD_RegisterWrite>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <Select_SFI_0>:
}


//[B7h]=========================================================================
void Select_SFI_0(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
Serial Flash/ROM I/F # Select
0: Serial Flash/ROM 0 I/F is selected.
1: Serial Flash/ROM 1 I/F is selected.
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8001dd8:	20b7      	movs	r0, #183	; 0xb7
 8001dda:	f7fe fe27 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001dde:	f7fe fe61 	bl	8000aa4 <LCD_DataRead>
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb7;
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dec:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fe39 	bl	8000a68 <LCD_DataWrite>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <Select_SFI_Font_Mode>:
	temp = LCD_DataRead();
    temp |= cSetb7;
	LCD_DataWrite(temp);
}
void Select_SFI_Font_Mode(void)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
Serial Flash /ROM Access Mode
0: Font mode V for external cgrom
1: DMA mode V for cgram , pattern , bootstart image or osd
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8001e04:	20b7      	movs	r0, #183	; 0xb7
 8001e06:	f7fe fe11 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001e0a:	f7fe fe4b 	bl	8000aa4 <LCD_DataRead>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb6;
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e18:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fe23 	bl	8000a68 <LCD_DataWrite>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <Select_SFI_24bit_Address>:
	temp = LCD_DataRead();
    temp |= cSetb6;
	LCD_DataWrite(temp);
}
void Select_SFI_24bit_Address(void)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
Serial Flash/ROM Address Mode
0: 24 bits address mode
1: 32 bits address mode
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8001e30:	20b7      	movs	r0, #183	; 0xb7
 8001e32:	f7fe fdfb 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001e36:	f7fe fe35 	bl	8000aa4 <LCD_DataRead>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb5;
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f023 0320 	bic.w	r3, r3, #32
 8001e44:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fe0d 	bl	8000a68 <LCD_DataWrite>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <Select_SFI_Waveform_Mode_0>:
	temp = LCD_DataRead();
    temp |= cSetb5;
	LCD_DataWrite(temp);
}
void Select_SFI_Waveform_Mode_0(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
Serial Flash/ROM Waveform Mode
Mode 0.
Mode 3.
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8001e5c:	20b7      	movs	r0, #183	; 0xb7
 8001e5e:	f7fe fde5 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001e62:	f7fe fe1f 	bl	8000aa4 <LCD_DataRead>
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb4;
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f023 0310 	bic.w	r3, r3, #16
 8001e70:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fdf7 	bl	8000a68 <LCD_DataWrite>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <Select_SFI_0_DummyRead>:
	temp = LCD_DataRead();
    temp |= cSetb4;
	LCD_DataWrite(temp);
}
void Select_SFI_0_DummyRead(void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
01b: 1 dummy cycle mode
10b: 2 dummy cycle mode
11b: 4 dummy cycle mode
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8001e88:	20b7      	movs	r0, #183	; 0xb7
 8001e8a:	f7fe fdcf 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001e8e:	f7fe fe09 	bl	8000aa4 <LCD_DataRead>
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
	temp &= 0xF3;
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f023 030c 	bic.w	r3, r3, #12
 8001e9c:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fde1 	bl	8000a68 <LCD_DataWrite>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <Select_SFI_Single_Mode>:
	temp = LCD_DataRead();
    temp |= 0x0c;
	LCD_DataWrite(temp);
}
void Select_SFI_Single_Mode(void)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
0Xb: Single Mode
10b: Dual Mode 0.
11b: Dual Mode 1.
*/
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 8001eb4:	20b7      	movs	r0, #183	; 0xb7
 8001eb6:	f7fe fdb9 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001eba:	f7fe fdf3 	bl	8000aa4 <LCD_DataRead>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
	temp &= 0xFC;
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f023 0303 	bic.w	r3, r3, #3
 8001ec8:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fdcb 	bl	8000a68 <LCD_DataWrite>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <SPI_Clock_Period>:
}


//REG[BB] SPI Clock period (SPIDIV)
void SPI_Clock_Period(unsigned char temp)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
   LCD_CmdWrite(0xBB);
 8001ee4:	20bb      	movs	r0, #187	; 0xbb
 8001ee6:	f7fe fda1 	bl	8000a2c <LCD_CmdWrite>
   LCD_DataWrite(temp);
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fdbb 	bl	8000a68 <LCD_DataWrite>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <CGROM_Select_Genitop_FontROM>:
	temp &= cClrb7;
    temp &= cClrb6;
	LCD_DataWrite(temp);
}
void CGROM_Select_Genitop_FontROM(void)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
00 : Internal CGROM
01 : Genitop serial flash
10 : User-defined Font
*/
	unsigned char temp;
	LCD_CmdWrite(0xCC);
 8001f00:	20cc      	movs	r0, #204	; 0xcc
 8001f02:	f7fe fd93 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001f06:	f7fe fdcd 	bl	8000aa4 <LCD_DataRead>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb7;
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f14:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb6;
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f1c:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fda1 	bl	8000a68 <LCD_DataWrite>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <Font_Select_12x24_24x24>:
    temp &= cClrb4;
	LCD_DataWrite(temp);
}

void Font_Select_12x24_24x24(void)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
*** User-defined Font width is decided by font code. Genitop
serial flashs font width is decided by font code or GT Font ROM
control register.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCC);
 8001f34:	20cc      	movs	r0, #204	; 0xcc
 8001f36:	f7fe fd79 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001f3a:	f7fe fdb3 	bl	8000aa4 <LCD_DataRead>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb5;
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f023 0320 	bic.w	r3, r3, #32
 8001f48:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb4;
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	f043 0310 	orr.w	r3, r3, #16
 8001f50:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fd87 	bl	8000a68 <LCD_DataWrite>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <Font_Select_16x32_32x32>:

void Font_Select_16x32_32x32(void)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
*** User-defined Font width is decided by font code. Genitop
serial flashs font width is decided by font code or GT Font ROM
control register.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCC);
 8001f68:	20cc      	movs	r0, #204	; 0xcc
 8001f6a:	f7fe fd5f 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001f6e:	f7fe fd99 	bl	8000aa4 <LCD_DataRead>
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb5;
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	f043 0320 	orr.w	r3, r3, #32
 8001f7c:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb4;
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	f023 0310 	bic.w	r3, r3, #16
 8001f84:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fd6d 	bl	8000a68 <LCD_DataWrite>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <Enable_Font_Alignment>:
	LCD_DataWrite(temp);
}

//[CDh]=========================================================================
void Enable_Font_Alignment(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
Full Alignment Selection Bit
0 : Full alignment disable.
1 : Full alignment enable.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 8001f9c:	20cd      	movs	r0, #205	; 0xcd
 8001f9e:	f7fe fd45 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001fa2:	f7fe fd7f 	bl	8000aa4 <LCD_DataRead>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb7;
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fb0:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fd57 	bl	8000a68 <LCD_DataWrite>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <Disable_Font_Alignment>:

void Disable_Font_Alignment(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
Full Alignment Selection Bit
0 : Full alignment disable.
1 : Full alignment enable.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 8001fc8:	20cd      	movs	r0, #205	; 0xcd
 8001fca:	f7fe fd2f 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001fce:	f7fe fd69 	bl	8000aa4 <LCD_DataRead>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb7;
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fdc:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fd41 	bl	8000a68 <LCD_DataWrite>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <Font_Background_select_Transparency>:

void Font_Background_select_Transparency(void)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
Font Transparency
0 : Font with background color.
1 : Font with background transparency.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 8001ff4:	20cd      	movs	r0, #205	; 0xcd
 8001ff6:	f7fe fd19 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001ffa:	f7fe fd53 	bl	8000aa4 <LCD_DataRead>
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb6;
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002008:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fd2b 	bl	8000a68 <LCD_DataWrite>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <Font_Background_select_Color>:

void Font_Background_select_Color(void)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
Font Transparency
0 : Font with background color.
1 : Font with background transparency.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 8002020:	20cd      	movs	r0, #205	; 0xcd
 8002022:	f7fe fd03 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002026:	f7fe fd3d 	bl	8000aa4 <LCD_DataRead>
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb6;
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002034:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fd15 	bl	8000a68 <LCD_DataWrite>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <Font_90_degree>:
    temp &= cClrb4;
	LCD_DataWrite(temp);
}

void Font_90_degree(void)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
(it should accommodate with set VDIR as 1)
This attribute can be changed only when previous font write
finished (core_busy = 0)
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 800204c:	20cd      	movs	r0, #205	; 0xcd
 800204e:	f7fe fced 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002052:	f7fe fd27 	bl	8000aa4 <LCD_DataRead>
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb4;
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f043 0310 	orr.w	r3, r3, #16
 8002060:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fcff 	bl	8000a68 <LCD_DataWrite>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <Font_Width_X1>:

void Font_Width_X1(void)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 8002078:	20cd      	movs	r0, #205	; 0xcd
 800207a:	f7fe fcd7 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 800207e:	f7fe fd11 	bl	8000aa4 <LCD_DataRead>
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb3;
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	f023 0308 	bic.w	r3, r3, #8
 800208c:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb2;
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fce5 	bl	8000a68 <LCD_DataWrite>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <Font_Width_X2>:

void Font_Width_X2(void)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 80020ac:	20cd      	movs	r0, #205	; 0xcd
 80020ae:	f7fe fcbd 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 80020b2:	f7fe fcf7 	bl	8000aa4 <LCD_DataRead>
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb3;
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f023 0308 	bic.w	r3, r3, #8
 80020c0:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb2;
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fccb 	bl	8000a68 <LCD_DataWrite>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <Font_Width_X3>:

void Font_Width_X3(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 80020e0:	20cd      	movs	r0, #205	; 0xcd
 80020e2:	f7fe fca3 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 80020e6:	f7fe fcdd 	bl	8000aa4 <LCD_DataRead>
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb3;
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb2;
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f023 0304 	bic.w	r3, r3, #4
 80020fc:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fcb1 	bl	8000a68 <LCD_DataWrite>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <Font_Width_X4>:

void Font_Width_X4(void)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 8002114:	20cd      	movs	r0, #205	; 0xcd
 8002116:	f7fe fc89 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 800211a:	f7fe fcc3 	bl	8000aa4 <LCD_DataRead>
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb3;
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb2;
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fc97 	bl	8000a68 <LCD_DataWrite>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <Font_Height_X1>:

void Font_Height_X1(void)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 8002148:	20cd      	movs	r0, #205	; 0xcd
 800214a:	f7fe fc6f 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 800214e:	f7fe fca9 	bl	8000aa4 <LCD_DataRead>
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb1;
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	f023 0302 	bic.w	r3, r3, #2
 800215c:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb0;
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fc7d 	bl	8000a68 <LCD_DataWrite>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <Font_Height_X2>:

void Font_Height_X2(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 800217c:	20cd      	movs	r0, #205	; 0xcd
 800217e:	f7fe fc55 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 8002182:	f7fe fc8f 	bl	8000aa4 <LCD_DataRead>
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb1;
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	f023 0302 	bic.w	r3, r3, #2
 8002190:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb0;
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fc63 	bl	8000a68 <LCD_DataWrite>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <Font_Height_X3>:

void Font_Height_X3(void)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 80021b0:	20cd      	movs	r0, #205	; 0xcd
 80021b2:	f7fe fc3b 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 80021b6:	f7fe fc75 	bl	8000aa4 <LCD_DataRead>
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb1;
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb0;
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe fc49 	bl	8000a68 <LCD_DataWrite>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <Font_Height_X4>:

void Font_Height_X4(void)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 80021e4:	20cd      	movs	r0, #205	; 0xcd
 80021e6:	f7fe fc21 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 80021ea:	f7fe fc5b 	bl	8000aa4 <LCD_DataRead>
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb1;
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb0;
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fc2f 	bl	8000a68 <LCD_DataWrite>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>:
    temp |= cSetb5;
	LCD_DataWrite(temp);
}

void GTFont_Select_GT23L32S4W_GT23H32S4W(void)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
101b: GT20L24F6Y
110b: GT21L24S1W
111b: GT22L16A1Y
*/
	unsigned char temp;
	LCD_CmdWrite(0xCE);
 8002218:	20ce      	movs	r0, #206	; 0xce
 800221a:	f7fe fc07 	bl	8000a2c <LCD_CmdWrite>
	temp = LCD_DataRead();
 800221e:	f7fe fc41 	bl	8000aa4 <LCD_DataRead>
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb7;
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800222c:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb6;
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002234:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb5;
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	f023 0320 	bic.w	r3, r3, #32
 800223c:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fc11 	bl	8000a68 <LCD_DataWrite>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <Set_GTFont_Decoder>:
	LCD_DataWrite(temp);
}

//[CFh]=========================================================================
void Set_GTFont_Decoder(unsigned char temp)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	71fb      	strb	r3, [r7, #7]
00b		Normal			Normal 					NA
01b		Arial 		Variable Width 			Presentation Forms-A
10b		Roman 			NA 					Presentation Forms-B
11b		Bold			NA 						NA
*/
	LCD_CmdWrite(0xCF);
 8002258:	20cf      	movs	r0, #207	; 0xcf
 800225a:	f7fe fbe7 	bl	8000a2c <LCD_CmdWrite>
	LCD_DataWrite(temp);
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fc01 	bl	8000a68 <LCD_DataWrite>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <Foreground_color_256>:
 LCD_DataWrite(BLUE);
}

//Input data format:R3G3B2
void Foreground_color_256(unsigned char temp)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	71fb      	strb	r3, [r7, #7]
	//if(fullcolor == 0) temp = MONOCHROME_COLOR;
    LCD_CmdWrite(0xD2);
 8002278:	20d2      	movs	r0, #210	; 0xd2
 800227a:	f7fe fbd7 	bl	8000a2c <LCD_CmdWrite>
 LCD_DataWrite(temp);
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fbf1 	bl	8000a68 <LCD_DataWrite>

    LCD_CmdWrite(0xD3);
 8002286:	20d3      	movs	r0, #211	; 0xd3
 8002288:	f7fe fbd0 	bl	8000a2c <LCD_CmdWrite>
 LCD_DataWrite(temp<<3);
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fbe8 	bl	8000a68 <LCD_DataWrite>

    LCD_CmdWrite(0xD4);
 8002298:	20d4      	movs	r0, #212	; 0xd4
 800229a:	f7fe fbc7 	bl	8000a2c <LCD_CmdWrite>
 LCD_DataWrite(temp<<6);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	019b      	lsls	r3, r3, #6
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe fbdf 	bl	8000a68 <LCD_DataWrite>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <Background_color_256>:
 LCD_DataWrite(BLUE);
}

//Input data format:R3G3B2
void Background_color_256(unsigned char temp)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	71fb      	strb	r3, [r7, #7]
    LCD_CmdWrite(0xD5);
 80022bc:	20d5      	movs	r0, #213	; 0xd5
 80022be:	f7fe fbb5 	bl	8000a2c <LCD_CmdWrite>
 LCD_DataWrite(temp);
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe fbcf 	bl	8000a68 <LCD_DataWrite>

    LCD_CmdWrite(0xD6);
 80022ca:	20d6      	movs	r0, #214	; 0xd6
 80022cc:	f7fe fbae 	bl	8000a2c <LCD_CmdWrite>
 LCD_DataWrite(temp<<3);
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fbc6 	bl	8000a68 <LCD_DataWrite>

    LCD_CmdWrite(0xD7);
 80022dc:	20d7      	movs	r0, #215	; 0xd7
 80022de:	f7fe fba5 	bl	8000a2c <LCD_CmdWrite>
 LCD_DataWrite(temp<<6);
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	019b      	lsls	r3, r3, #6
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fbbd 	bl	8000a68 <LCD_DataWrite>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <Show_String>:
}



void Show_String(char *str)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  Text_Mode();
 80022fe:	f7fe fdc9 	bl	8000e94 <Text_Mode>
  LCD_CmdWrite(0x04);
 8002302:	2004      	movs	r0, #4
 8002304:	f7fe fb92 	bl	8000a2c <LCD_CmdWrite>
  while(*str != '\0')
 8002308:	e009      	b.n	800231e <Show_String+0x28>
  {
   LCD_DataWrite(*str);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fbaa 	bl	8000a68 <LCD_DataWrite>
   Check_Mem_WR_FIFO_not_Full();
 8002314:	f7fe fcd5 	bl	8000cc2 <Check_Mem_WR_FIFO_not_Full>
  ++str;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3301      	adds	r3, #1
 800231c:	607b      	str	r3, [r7, #4]
  while(*str != '\0')
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f1      	bne.n	800230a <Show_String+0x14>
  }
   Check_2D_Busy();
 8002326:	f7fe fcd7 	bl	8000cd8 <Check_2D_Busy>

   Graphic_Mode(); //back to graphic mode
 800232a:	f7fe fd9d 	bl	8000e68 <Graphic_Mode>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <Show_picture2>:
   }

}

void Show_picture2(unsigned long numbers,const unsigned char *datap)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
  unsigned long i;

  LCD_CmdWrite(0x04);
 8002340:	2004      	movs	r0, #4
 8002342:	f7fe fb73 	bl	8000a2c <LCD_CmdWrite>
  for(i=0;i<numbers;i++)
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	e00b      	b.n	8002364 <Show_picture2+0x2e>
   {
   LCD_DataWrite(datap[i]);
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4413      	add	r3, r2
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fb87 	bl	8000a68 <LCD_DataWrite>
   Check_Mem_WR_FIFO_not_Full();
 800235a:	f7fe fcb2 	bl	8000cc2 <Check_Mem_WR_FIFO_not_Full>
  for(i=0;i<numbers;i++)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3301      	adds	r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	d3ef      	bcc.n	800234c <Show_picture2+0x16>
   }

}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <Show_picture3>:


// Added by Dane, revesing the loop in an effort to write the image to RAM backward
// The result is the image is upside down.
void Show_picture3(unsigned long w,unsigned long h,const unsigned char *datap)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
  unsigned long i,j;

  LCD_CmdWrite(0x04);
 8002382:	2004      	movs	r0, #4
 8002384:	f7fe fb52 	bl	8000a2c <LCD_CmdWrite>
  for(j=0;j<h;j++)
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	e01d      	b.n	80023ca <Show_picture3+0x54>
  for(i=0;i<w;i++)
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	e013      	b.n	80023bc <Show_picture3+0x46>
   {
   LCD_DataWrite(datap[(h-1-j)*w+i]);
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	fb03 f202 	mul.w	r2, r3, r2
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	4413      	add	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fb5b 	bl	8000a68 <LCD_DataWrite>
   Check_Mem_WR_FIFO_not_Full();
 80023b2:	f7fe fc86 	bl	8000cc2 <Check_Mem_WR_FIFO_not_Full>
  for(i=0;i<w;i++)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	3301      	adds	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d3e7      	bcc.n	8002394 <Show_picture3+0x1e>
  for(j=0;j<h;j++)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	3301      	adds	r3, #1
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d3dd      	bcc.n	800238e <Show_picture3+0x18>
   }
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <Show_pictureX2>:

// The result is the image is upside down.
void Show_pictureX2(unsigned long w,unsigned long h,const unsigned char *datap)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  unsigned long i,j;

  LCD_CmdWrite(0x04);
 80023e8:	2004      	movs	r0, #4
 80023ea:	f7fe fb1f 	bl	8000a2c <LCD_CmdWrite>
  for(j=0;j<h;j++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	e021      	b.n	8002438 <Show_pictureX2+0x5c>
  for(i=0;i<w;i++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	e017      	b.n	800242a <Show_pictureX2+0x4e>
   {
   LCD_DataWrite(datap[(h/2-1-j/2)*w/2+i/2]);
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	085a      	lsrs	r2, r3, #1
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	085b      	lsrs	r3, r3, #1
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	fb02 f303 	mul.w	r3, r2, r3
 800240c:	085a      	lsrs	r2, r3, #1
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	085b      	lsrs	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fb24 	bl	8000a68 <LCD_DataWrite>
   Check_Mem_WR_FIFO_not_Full();
 8002420:	f7fe fc4f 	bl	8000cc2 <Check_Mem_WR_FIFO_not_Full>
  for(i=0;i<w;i++)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	3301      	adds	r3, #1
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	429a      	cmp	r2, r3
 8002430:	d3e3      	bcc.n	80023fa <Show_pictureX2+0x1e>
  for(j=0;j<h;j++)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	3301      	adds	r3, #1
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	429a      	cmp	r2, r3
 800243e:	d3d9      	bcc.n	80023f4 <Show_pictureX2+0x18>
   }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <Show_greenPicture>:

void Show_greenPicture(unsigned long w,unsigned long h,const unsigned char *datap)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b088      	sub	sp, #32
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
	unsigned long i,j;
	unsigned char temp;

	LCD_CmdWrite(0x04);
 8002456:	2004      	movs	r0, #4
 8002458:	f7fe fae8 	bl	8000a2c <LCD_CmdWrite>
	for(j=0;j<h;j++)
 800245c:	2300      	movs	r3, #0
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	e021      	b.n	80024a6 <Show_greenPicture+0x5c>
	for(i=0;i<w;i++)
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e017      	b.n	8002498 <Show_greenPicture+0x4e>
	{
	  //temp = datap[(h-1-j)*w+i];
	  //temp = (((temp>>5) + ((temp>>2)&0x03) + ((temp&0x03)<<1))/3)<<2;

	  //New code 2024/4/23
	  temp = (datap[(h-1-j)*w+i])&((unsigned char)MONOCHROME_COLOR);
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	fb03 f202 	mul.w	r2, r3, r2
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	4413      	add	r3, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	75fb      	strb	r3, [r7, #23]
	  // MONOCHROME_COLOR = color256_green  0x1c, color256_blue    0x03
	  //    xxx, GREEN, RED
	  //temp = ((((temp>>5)&0x03) + (((temp>>2)&0x1C)) + ((temp&0x03)<<1))/3)<<2;
	  //temp = ((((temp>>5)&(0x1C|0x03)) + ((temp>>2)&0x03) + ((temp&0x03)<<1))/3)<<2;
	  //temp = (((temp>>5) + ((temp>>2)&0x03) + ((temp&0x03)<<1))/3)<<2;
	  LCD_DataWrite(temp);
 8002486:	7dfb      	ldrb	r3, [r7, #23]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe faed 	bl	8000a68 <LCD_DataWrite>
	  Check_Mem_WR_FIFO_not_Full();
 800248e:	f7fe fc18 	bl	8000cc2 <Check_Mem_WR_FIFO_not_Full>
	for(i=0;i<w;i++)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3301      	adds	r3, #1
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	429a      	cmp	r2, r3
 800249e:	d3e3      	bcc.n	8002468 <Show_greenPicture+0x1e>
	for(j=0;j<h;j++)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	3301      	adds	r3, #1
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d3d9      	bcc.n	8002462 <Show_greenPicture+0x18>
	}
}
 80024ae:	bf00      	nop
 80024b0:	bf00      	nop
 80024b2:	3720      	adds	r7, #32
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <InitCommands>:
unsigned char  rxidlecnt               = 0;
unsigned char  fullcolor               = 1;         // 0 = Monochrome, 1 = Color, Set this to 1


void InitCommands(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin) == GPIO_PIN_RESET)
 80024bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024c0:	483b      	ldr	r0, [pc, #236]	; (80025b0 <InitCommands+0xf8>)
 80024c2:	f006 fad3 	bl	8008a6c <HAL_GPIO_ReadPin>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <InitCommands+0x1a>
		fullcolor = 0;  // Set this to 0
 80024cc:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <InitCommands+0xfc>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
    //  Uncomment to force monochrome
	//	fullcolor = 0;


	// Turn on the LED... PA5
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);  // GPIO_PIN_SET
 80024d2:	2201      	movs	r2, #1
 80024d4:	2120      	movs	r1, #32
 80024d6:	4838      	ldr	r0, [pc, #224]	; (80025b8 <InitCommands+0x100>)
 80024d8:	f006 fae0 	bl	8008a9c <HAL_GPIO_WritePin>

	// Please see the length = 2
	if(HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 2) != HAL_OK)
 80024dc:	2202      	movs	r2, #2
 80024de:	4937      	ldr	r1, [pc, #220]	; (80025bc <InitCommands+0x104>)
 80024e0:	4837      	ldr	r0, [pc, #220]	; (80025c0 <InitCommands+0x108>)
 80024e2:	f007 fe8c 	bl	800a1fe <HAL_UART_Receive_IT>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <InitCommands+0x38>
		Error_Handler();
 80024ec:	f005 fc48 	bl	8007d80 <Error_Handler>
	// SSD2828 RAM Initial
	SSD2828_Reset();
 80024f0:	f7fe f85c 	bl	80005ac <SSD2828_Reset>
	SSD2828_initial();
 80024f4:	f7fe f938 	bl	8000768 <SSD2828_initial>
	//Initial_Display_test	and  set SW2 pin2 = 1
	RA8876_HW_Reset();
 80024f8:	f7fe fb24 	bl	8000b44 <RA8876_HW_Reset>
	while(LCD_StatusRead()&0x02);
 80024fc:	bf00      	nop
 80024fe:	f7fe faef 	bl	8000ae0 <LCD_StatusRead>
 8002502:	4603      	mov	r3, r0
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f8      	bne.n	80024fe <InitCommands+0x46>
	RA8876_initial();
 800250c:	f7fe fb3c 	bl	8000b88 <RA8876_initial>
	Display_ON();
 8002510:	f7fe fd66 	bl	8000fe0 <Display_ON>
	HAL_Delay(20);
 8002514:	2014      	movs	r0, #20
 8002516:	f005 ff4d 	bl	80083b4 <HAL_Delay>
	// Main buffer config in 1ayer10
	Main_Image_Start_Address(layer_start_addr(10));
 800251a:	482a      	ldr	r0, [pc, #168]	; (80025c4 <InitCommands+0x10c>)
 800251c:	f7fe ff58 	bl	80013d0 <Main_Image_Start_Address>
	Main_Image_Width(400);
 8002520:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002524:	f7fe ff77 	bl	8001416 <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 8002528:	2100      	movs	r1, #0
 800252a:	2000      	movs	r0, #0
 800252c:	f7fe ff8a 	bl	8001444 <Main_Window_Start_XY>
	Canvas_Image_Start_address(layer_start_addr(10));
 8002530:	4824      	ldr	r0, [pc, #144]	; (80025c4 <InitCommands+0x10c>)
 8002532:	f7ff f861 	bl	80015f8 <Canvas_Image_Start_address>
	Canvas_image_width(400);
 8002536:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800253a:	f7ff f880 	bl	800163e <Canvas_image_width>
	Active_Window_XY(0,0);
 800253e:	2100      	movs	r1, #0
 8002540:	2000      	movs	r0, #0
 8002542:	f7ff f893 	bl	800166c <Active_Window_XY>
	Active_Window_WH(400,1280);
 8002546:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800254a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800254e:	f7ff f8b5 	bl	80016bc <Active_Window_WH>
	// Clear screen
	Foreground_color_256(Black);
 8002552:	2000      	movs	r0, #0
 8002554:	f7ff fe8b 	bl	800226e <Foreground_color_256>
	Background_color_256(Black);
 8002558:	2000      	movs	r0, #0
 800255a:	f7ff feaa 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 800255e:	2100      	movs	r1, #0
 8002560:	2000      	movs	r0, #0
 8002562:	f7ff f937 	bl	80017d4 <Line_Start_XY>
	Line_End_XY(399,1279);  //  Y,X
 8002566:	f240 41ff 	movw	r1, #1279	; 0x4ff
 800256a:	f240 108f 	movw	r0, #399	; 0x18f
 800256e:	f7ff f961 	bl	8001834 <Line_End_XY>
	Start_Square_Fill();
 8002572:	f7ff fa1f 	bl	80019b4 <Start_Square_Fill>
	// Font Chip setting
	CGROM_Select_Genitop_FontROM();
 8002576:	f7ff fcc0 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 800257a:	f7ff fe4a 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	Font_Select_16x32_32x32();
 800257e:	f7ff fcf0 	bl	8001f62 <Font_Select_16x32_32x32>
	Select_SFI_0();
 8002582:	f7ff fc26 	bl	8001dd2 <Select_SFI_0>
	Select_SFI_Font_Mode();
 8002586:	f7ff fc3a 	bl	8001dfe <Select_SFI_Font_Mode>
	Select_SFI_24bit_Address();
 800258a:	f7ff fc4e 	bl	8001e2a <Select_SFI_24bit_Address>
	Select_SFI_Waveform_Mode_0();
 800258e:	f7ff fc62 	bl	8001e56 <Select_SFI_Waveform_Mode_0>
	Select_SFI_0_DummyRead();
 8002592:	f7ff fc76 	bl	8001e82 <Select_SFI_0_DummyRead>
	Select_SFI_Single_Mode();
 8002596:	f7ff fc8a 	bl	8001eae <Select_SFI_Single_Mode>
	SPI_Clock_Period(4);	 // Freq must setting <=20MHZ
 800259a:	2004      	movs	r0, #4
 800259c:	f7ff fc9d 	bl	8001eda <SPI_Clock_Period>
	Enable_SFlash_SPI();
 80025a0:	f7fe fc02 	bl	8000da8 <Enable_SFlash_SPI>
	// Preloading
	WelcomeAnimation();
 80025a4:	f004 fec0 	bl	8007328 <WelcomeAnimation>
	preloadScreen();
 80025a8:	f005 f828 	bl	80075fc <preloadScreen>
	//screen0x1F();
//	screen0x07();
//	while(1);
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40020800 	.word	0x40020800
 80025b4:	20000000 	.word	0x20000000
 80025b8:	40020000 	.word	0x40020000
 80025bc:	200000a0 	.word	0x200000a0
 80025c0:	200008bc 	.word	0x200008bc
 80025c4:	004e2000 	.word	0x004e2000

080025c8 <PacketProc>:

void PacketProc(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
	/* Set transmission flag: transfer complete */
	uint8_t                            a, y = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	71bb      	strb	r3, [r7, #6]
	idleTime = 0;
 80025d2:	4b9d      	ldr	r3, [pc, #628]	; (8002848 <PacketProc+0x280>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
	switch(rxState)
 80025d8:	4b9c      	ldr	r3, [pc, #624]	; (800284c <PacketProc+0x284>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d07d      	beq.n	80026dc <PacketProc+0x114>
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	f300 82b1 	bgt.w	8002b48 <PacketProc+0x580>
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <PacketProc+0x28>
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d059      	beq.n	80026a2 <PacketProc+0xda>
 80025ee:	e2ab      	b.n	8002b48 <PacketProc+0x580>
	{
	case _CMD:
		cmd = aRxBuffer[1];
 80025f0:	4b97      	ldr	r3, [pc, #604]	; (8002850 <PacketProc+0x288>)
 80025f2:	885b      	ldrh	r3, [r3, #2]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4b97      	ldr	r3, [pc, #604]	; (8002854 <PacketProc+0x28c>)
 80025f8:	701a      	strb	r2, [r3, #0]
		//  poll packet check
		if(cmd == 0){
 80025fa:	4b96      	ldr	r3, [pc, #600]	; (8002854 <PacketProc+0x28c>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d13c      	bne.n	800267c <PacketProc+0xb4>
			// poll packet response
			aTxBuffer[0] = 0x0E;
 8002602:	4b95      	ldr	r3, [pc, #596]	; (8002858 <PacketProc+0x290>)
 8002604:	220e      	movs	r2, #14
 8002606:	801a      	strh	r2, [r3, #0]
			if(initping){
 8002608:	4b94      	ldr	r3, [pc, #592]	; (800285c <PacketProc+0x294>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00d      	beq.n	800262c <PacketProc+0x64>
				aTxBuffer[1] = 0x00;
 8002610:	4b91      	ldr	r3, [pc, #580]	; (8002858 <PacketProc+0x290>)
 8002612:	2200      	movs	r2, #0
 8002614:	805a      	strh	r2, [r3, #2]
				if(HAL_UART_Transmit_IT(&huart3, (uint8_t *)aTxBuffer, 2) != HAL_OK)
 8002616:	2202      	movs	r2, #2
 8002618:	498f      	ldr	r1, [pc, #572]	; (8002858 <PacketProc+0x290>)
 800261a:	4891      	ldr	r0, [pc, #580]	; (8002860 <PacketProc+0x298>)
 800261c:	f007 fdb9 	bl	800a192 <HAL_UART_Transmit_IT>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01e      	beq.n	8002664 <PacketProc+0x9c>
					Error_Handler();
 8002626:	f005 fbab 	bl	8007d80 <Error_Handler>
 800262a:	e01b      	b.n	8002664 <PacketProc+0x9c>
			}
			else{
				initping = 1;
 800262c:	4b8b      	ldr	r3, [pc, #556]	; (800285c <PacketProc+0x294>)
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
				aTxBuffer[1] = 0x25;
 8002632:	4b89      	ldr	r3, [pc, #548]	; (8002858 <PacketProc+0x290>)
 8002634:	2225      	movs	r2, #37	; 0x25
 8002636:	805a      	strh	r2, [r3, #2]
				aTxBuffer[2] = 0x06;
 8002638:	4b87      	ldr	r3, [pc, #540]	; (8002858 <PacketProc+0x290>)
 800263a:	2206      	movs	r2, #6
 800263c:	809a      	strh	r2, [r3, #4]
				aTxBuffer[3] = 0x00;
 800263e:	4b86      	ldr	r3, [pc, #536]	; (8002858 <PacketProc+0x290>)
 8002640:	2200      	movs	r2, #0
 8002642:	80da      	strh	r2, [r3, #6]
				aTxBuffer[4] = 0x14;
 8002644:	4b84      	ldr	r3, [pc, #528]	; (8002858 <PacketProc+0x290>)
 8002646:	2214      	movs	r2, #20
 8002648:	811a      	strh	r2, [r3, #8]
				aTxBuffer[5] = 0xC0;
 800264a:	4b83      	ldr	r3, [pc, #524]	; (8002858 <PacketProc+0x290>)
 800264c:	22c0      	movs	r2, #192	; 0xc0
 800264e:	815a      	strh	r2, [r3, #10]
				if(HAL_UART_Transmit_IT(&huart3, (uint8_t *)aTxBuffer, 6) != HAL_OK)
 8002650:	2206      	movs	r2, #6
 8002652:	4981      	ldr	r1, [pc, #516]	; (8002858 <PacketProc+0x290>)
 8002654:	4882      	ldr	r0, [pc, #520]	; (8002860 <PacketProc+0x298>)
 8002656:	f007 fd9c 	bl	800a192 <HAL_UART_Transmit_IT>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <PacketProc+0x9c>
					Error_Handler();
 8002660:	f005 fb8e 	bl	8007d80 <Error_Handler>
			}
			if(HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 2) != HAL_OK)
 8002664:	2202      	movs	r2, #2
 8002666:	497a      	ldr	r1, [pc, #488]	; (8002850 <PacketProc+0x288>)
 8002668:	487d      	ldr	r0, [pc, #500]	; (8002860 <PacketProc+0x298>)
 800266a:	f007 fdc8 	bl	800a1fe <HAL_UART_Receive_IT>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8277 	beq.w	8002b64 <PacketProc+0x59c>
				Error_Handler();
 8002676:	f005 fb83 	bl	8007d80 <Error_Handler>
			memcpy(mainBuffer,aRxBuffer,4);
			// please see the length = 1
			if(HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1) != HAL_OK)
				Error_Handler();
		}
		break;
 800267a:	e273      	b.n	8002b64 <PacketProc+0x59c>
			rxState = _LENGTH;
 800267c:	4b73      	ldr	r3, [pc, #460]	; (800284c <PacketProc+0x284>)
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	4b73      	ldr	r3, [pc, #460]	; (8002850 <PacketProc+0x288>)
 8002684:	681b      	ldr	r3, [r3, #0]
			memcpy(mainBuffer,aRxBuffer,4);
 8002686:	4a77      	ldr	r2, [pc, #476]	; (8002864 <PacketProc+0x29c>)
 8002688:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1) != HAL_OK)
 800268a:	2201      	movs	r2, #1
 800268c:	4970      	ldr	r1, [pc, #448]	; (8002850 <PacketProc+0x288>)
 800268e:	4874      	ldr	r0, [pc, #464]	; (8002860 <PacketProc+0x298>)
 8002690:	f007 fdb5 	bl	800a1fe <HAL_UART_Receive_IT>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8264 	beq.w	8002b64 <PacketProc+0x59c>
				Error_Handler();
 800269c:	f005 fb70 	bl	8007d80 <Error_Handler>
		break;
 80026a0:	e260      	b.n	8002b64 <PacketProc+0x59c>
	case _LENGTH:
		rxState = _DATA;
 80026a2:	4b6a      	ldr	r3, [pc, #424]	; (800284c <PacketProc+0x284>)
 80026a4:	2202      	movs	r2, #2
 80026a6:	701a      	strb	r2, [r3, #0]
		len = aRxBuffer[0] - 3;
 80026a8:	4b69      	ldr	r3, [pc, #420]	; (8002850 <PacketProc+0x288>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	3b03      	subs	r3, #3
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4b6d      	ldr	r3, [pc, #436]	; (8002868 <PacketProc+0x2a0>)
 80026b4:	701a      	strb	r2, [r3, #0]
		mainBuffer[2] = aRxBuffer[0];
 80026b6:	4b66      	ldr	r3, [pc, #408]	; (8002850 <PacketProc+0x288>)
 80026b8:	881a      	ldrh	r2, [r3, #0]
 80026ba:	4b6a      	ldr	r3, [pc, #424]	; (8002864 <PacketProc+0x29c>)
 80026bc:	809a      	strh	r2, [r3, #4]
		// please see the length = len
		if(HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, len) != HAL_OK)
 80026be:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <PacketProc+0x2a0>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	4962      	ldr	r1, [pc, #392]	; (8002850 <PacketProc+0x288>)
 80026c8:	4865      	ldr	r0, [pc, #404]	; (8002860 <PacketProc+0x298>)
 80026ca:	f007 fd98 	bl	800a1fe <HAL_UART_Receive_IT>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 8249 	beq.w	8002b68 <PacketProc+0x5a0>
			Error_Handler();
 80026d6:	f005 fb53 	bl	8007d80 <Error_Handler>
		break;
 80026da:	e245      	b.n	8002b68 <PacketProc+0x5a0>
	case _DATA:
		rxState = _CMD;
 80026dc:	4b5b      	ldr	r3, [pc, #364]	; (800284c <PacketProc+0x284>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
		memcpy(mainBuffer+3,aRxBuffer,2*len);
 80026e2:	4862      	ldr	r0, [pc, #392]	; (800286c <PacketProc+0x2a4>)
 80026e4:	4b60      	ldr	r3, [pc, #384]	; (8002868 <PacketProc+0x2a0>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	461a      	mov	r2, r3
 80026ec:	4958      	ldr	r1, [pc, #352]	; (8002850 <PacketProc+0x288>)
 80026ee:	f008 ff6a 	bl	800b5c6 <memcpy>
		if(crc16_ccitt_reversed_w16(mainBuffer,len+1) == mainBuffer[len+2] *256 + mainBuffer[len+1])
 80026f2:	4b5d      	ldr	r3, [pc, #372]	; (8002868 <PacketProc+0x2a0>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	3301      	adds	r3, #1
 80026f8:	4619      	mov	r1, r3
 80026fa:	485a      	ldr	r0, [pc, #360]	; (8002864 <PacketProc+0x29c>)
 80026fc:	f000 fb54 	bl	8002da8 <crc16_ccitt_reversed_w16>
 8002700:	4603      	mov	r3, r0
 8002702:	4618      	mov	r0, r3
 8002704:	4b58      	ldr	r3, [pc, #352]	; (8002868 <PacketProc+0x2a0>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	3302      	adds	r3, #2
 800270a:	4a56      	ldr	r2, [pc, #344]	; (8002864 <PacketProc+0x29c>)
 800270c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	4a55      	ldr	r2, [pc, #340]	; (8002868 <PacketProc+0x2a0>)
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	3201      	adds	r2, #1
 8002718:	4952      	ldr	r1, [pc, #328]	; (8002864 <PacketProc+0x29c>)
 800271a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800271e:	4413      	add	r3, r2
 8002720:	4298      	cmp	r0, r3
 8002722:	f040 8205 	bne.w	8002b30 <PacketProc+0x568>
		{
			//rxState = _CMD;
			if(!(mainBuffer[1] == 1 && mainBuffer[2] == 5)){
 8002726:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <PacketProc+0x29c>)
 8002728:	885b      	ldrh	r3, [r3, #2]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d103      	bne.n	8002736 <PacketProc+0x16e>
 800272e:	4b4d      	ldr	r3, [pc, #308]	; (8002864 <PacketProc+0x29c>)
 8002730:	889b      	ldrh	r3, [r3, #4]
 8002732:	2b05      	cmp	r3, #5
 8002734:	d018      	beq.n	8002768 <PacketProc+0x1a0>
				aTxBuffer[0] = 0x0E;
 8002736:	4b48      	ldr	r3, [pc, #288]	; (8002858 <PacketProc+0x290>)
 8002738:	220e      	movs	r2, #14
 800273a:	801a      	strh	r2, [r3, #0]
				aTxBuffer[1] = 0x01;
 800273c:	4b46      	ldr	r3, [pc, #280]	; (8002858 <PacketProc+0x290>)
 800273e:	2201      	movs	r2, #1
 8002740:	805a      	strh	r2, [r3, #2]
				aTxBuffer[2] = 0x05;
 8002742:	4b45      	ldr	r3, [pc, #276]	; (8002858 <PacketProc+0x290>)
 8002744:	2205      	movs	r2, #5
 8002746:	809a      	strh	r2, [r3, #4]
				aTxBuffer[3] = 0x6E;
 8002748:	4b43      	ldr	r3, [pc, #268]	; (8002858 <PacketProc+0x290>)
 800274a:	226e      	movs	r2, #110	; 0x6e
 800274c:	80da      	strh	r2, [r3, #6]
				aTxBuffer[4] = 0x5E;
 800274e:	4b42      	ldr	r3, [pc, #264]	; (8002858 <PacketProc+0x290>)
 8002750:	225e      	movs	r2, #94	; 0x5e
 8002752:	811a      	strh	r2, [r3, #8]
				if(HAL_UART_Transmit_IT(&huart3, (uint8_t *)aTxBuffer, 5))
 8002754:	2205      	movs	r2, #5
 8002756:	4940      	ldr	r1, [pc, #256]	; (8002858 <PacketProc+0x290>)
 8002758:	4841      	ldr	r0, [pc, #260]	; (8002860 <PacketProc+0x298>)
 800275a:	f007 fd1a 	bl	800a192 <HAL_UART_Transmit_IT>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <PacketProc+0x1a0>
					Error_Handler();
 8002764:	f005 fb0c 	bl	8007d80 <Error_Handler>
			}
			// please see the length = 2
			if(HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 2) != HAL_OK)
 8002768:	2202      	movs	r2, #2
 800276a:	4939      	ldr	r1, [pc, #228]	; (8002850 <PacketProc+0x288>)
 800276c:	483c      	ldr	r0, [pc, #240]	; (8002860 <PacketProc+0x298>)
 800276e:	f007 fd46 	bl	800a1fe <HAL_UART_Receive_IT>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <PacketProc+0x1b4>
				Error_Handler();
 8002778:	f005 fb02 	bl	8007d80 <Error_Handler>

			// Packet categorize
			if(mainBuffer[1] == 0x01) currentTask = TASK_RESET;
 800277c:	4b39      	ldr	r3, [pc, #228]	; (8002864 <PacketProc+0x29c>)
 800277e:	885b      	ldrh	r3, [r3, #2]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d103      	bne.n	800278c <PacketProc+0x1c4>
 8002784:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <PacketProc+0x2a8>)
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
			//rxState = _CMD;
			// please see the length = 2
			if(HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 2) != HAL_OK)
				Error_Handler();
		}
	    break;
 800278a:	e1ef      	b.n	8002b6c <PacketProc+0x5a4>
			else if(mainBuffer[1] == 0x31){
 800278c:	4b35      	ldr	r3, [pc, #212]	; (8002864 <PacketProc+0x29c>)
 800278e:	885b      	ldrh	r3, [r3, #2]
 8002790:	2b31      	cmp	r3, #49	; 0x31
 8002792:	d103      	bne.n	800279c <PacketProc+0x1d4>
				currentTask = TASK_CLEAR;
 8002794:	4b36      	ldr	r3, [pc, #216]	; (8002870 <PacketProc+0x2a8>)
 8002796:	2202      	movs	r2, #2
 8002798:	701a      	strb	r2, [r3, #0]
	    break;
 800279a:	e1e7      	b.n	8002b6c <PacketProc+0x5a4>
			else if((mainBuffer[1]&0x3F) == 0x30){// load data
 800279c:	4b31      	ldr	r3, [pc, #196]	; (8002864 <PacketProc+0x29c>)
 800279e:	885b      	ldrh	r3, [r3, #2]
 80027a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027a4:	2b30      	cmp	r3, #48	; 0x30
 80027a6:	f040 816a 	bne.w	8002a7e <PacketProc+0x4b6>
				multiIndex[mainBuffer[3]] = mainBuffer[4];	// this line is error
 80027aa:	4b2e      	ldr	r3, [pc, #184]	; (8002864 <PacketProc+0x29c>)
 80027ac:	8919      	ldrh	r1, [r3, #8]
 80027ae:	4b2d      	ldr	r3, [pc, #180]	; (8002864 <PacketProc+0x29c>)
 80027b0:	88db      	ldrh	r3, [r3, #6]
 80027b2:	461a      	mov	r2, r3
 80027b4:	b2c9      	uxtb	r1, r1
 80027b6:	4b2f      	ldr	r3, [pc, #188]	; (8002874 <PacketProc+0x2ac>)
 80027b8:	5499      	strb	r1, [r3, r2]
				if(mainBuffer[4] == 0x06 || mainBuffer[4] == 0x12)
 80027ba:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <PacketProc+0x29c>)
 80027bc:	891b      	ldrh	r3, [r3, #8]
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d003      	beq.n	80027ca <PacketProc+0x202>
 80027c2:	4b28      	ldr	r3, [pc, #160]	; (8002864 <PacketProc+0x29c>)
 80027c4:	891b      	ldrh	r3, [r3, #8]
 80027c6:	2b12      	cmp	r3, #18
 80027c8:	d102      	bne.n	80027d0 <PacketProc+0x208>
					currentTask = TASK_SINGLE;	// for exception 0x06 AND 0x12
 80027ca:	4b29      	ldr	r3, [pc, #164]	; (8002870 <PacketProc+0x2a8>)
 80027cc:	2204      	movs	r2, #4
 80027ce:	701a      	strb	r2, [r3, #0]
				if(mainBuffer[2] == 0x08 && mainBuffer[3] == 0x00 && mainBuffer[4] == 0x00 && mainBuffer[5] == 0x00)
 80027d0:	4b24      	ldr	r3, [pc, #144]	; (8002864 <PacketProc+0x29c>)
 80027d2:	889b      	ldrh	r3, [r3, #4]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d10f      	bne.n	80027f8 <PacketProc+0x230>
 80027d8:	4b22      	ldr	r3, [pc, #136]	; (8002864 <PacketProc+0x29c>)
 80027da:	88db      	ldrh	r3, [r3, #6]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10b      	bne.n	80027f8 <PacketProc+0x230>
 80027e0:	4b20      	ldr	r3, [pc, #128]	; (8002864 <PacketProc+0x29c>)
 80027e2:	891b      	ldrh	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d107      	bne.n	80027f8 <PacketProc+0x230>
 80027e8:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <PacketProc+0x29c>)
 80027ea:	895b      	ldrh	r3, [r3, #10]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d103      	bne.n	80027f8 <PacketProc+0x230>
				    currentTask = TASK_PAUSE;
 80027f0:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <PacketProc+0x2a8>)
 80027f2:	2203      	movs	r2, #3
 80027f4:	701a      	strb	r2, [r3, #0]
					break;
 80027f6:	e1bc      	b.n	8002b72 <PacketProc+0x5aa>
				if(mainBuffer[4] == 0x00){
 80027f8:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <PacketProc+0x29c>)
 80027fa:	891b      	ldrh	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d11b      	bne.n	8002838 <PacketProc+0x270>
					for (a = 6; y < (mainBuffer[2] - 8); a++)
 8002800:	2306      	movs	r3, #6
 8002802:	71fb      	strb	r3, [r7, #7]
 8002804:	e00d      	b.n	8002822 <PacketProc+0x25a>
					  screen0x00Text[y] = mainBuffer[a];
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	4a16      	ldr	r2, [pc, #88]	; (8002864 <PacketProc+0x29c>)
 800280a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800280e:	79bb      	ldrb	r3, [r7, #6]
 8002810:	b2d1      	uxtb	r1, r2
 8002812:	4a19      	ldr	r2, [pc, #100]	; (8002878 <PacketProc+0x2b0>)
 8002814:	54d1      	strb	r1, [r2, r3]
					  y++;
 8002816:	79bb      	ldrb	r3, [r7, #6]
 8002818:	3301      	adds	r3, #1
 800281a:	71bb      	strb	r3, [r7, #6]
					for (a = 6; y < (mainBuffer[2] - 8); a++)
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	3301      	adds	r3, #1
 8002820:	71fb      	strb	r3, [r7, #7]
 8002822:	79ba      	ldrb	r2, [r7, #6]
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <PacketProc+0x29c>)
 8002826:	889b      	ldrh	r3, [r3, #4]
 8002828:	3b08      	subs	r3, #8
 800282a:	429a      	cmp	r2, r3
 800282c:	dbeb      	blt.n	8002806 <PacketProc+0x23e>
					screen0x00Text[y] = '\0';  // 4-18-2024 it was 0
 800282e:	79bb      	ldrb	r3, [r7, #6]
 8002830:	4a11      	ldr	r2, [pc, #68]	; (8002878 <PacketProc+0x2b0>)
 8002832:	2100      	movs	r1, #0
 8002834:	54d1      	strb	r1, [r2, r3]
	    break;
 8002836:	e199      	b.n	8002b6c <PacketProc+0x5a4>
				else if(mainBuffer[4] == 0x01){
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <PacketProc+0x29c>)
 800283a:	891b      	ldrh	r3, [r3, #8]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d136      	bne.n	80028ae <PacketProc+0x2e6>
					for (a = 6; y < (mainBuffer[2] - 8); a++)
 8002840:	2306      	movs	r3, #6
 8002842:	71fb      	strb	r3, [r7, #7]
 8002844:	e028      	b.n	8002898 <PacketProc+0x2d0>
 8002846:	bf00      	nop
 8002848:	20000814 	.word	0x20000814
 800284c:	200007fb 	.word	0x200007fb
 8002850:	200000a0 	.word	0x200000a0
 8002854:	200007fc 	.word	0x200007fc
 8002858:	200004a0 	.word	0x200004a0
 800285c:	200007fe 	.word	0x200007fe
 8002860:	200008bc 	.word	0x200008bc
 8002864:	200002a0 	.word	0x200002a0
 8002868:	200007fd 	.word	0x200007fd
 800286c:	200002a6 	.word	0x200002a6
 8002870:	200007fa 	.word	0x200007fa
 8002874:	20000804 	.word	0x20000804
 8002878:	200007a0 	.word	0x200007a0
					  screen0x01Text[y] = mainBuffer[a];
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	4a92      	ldr	r2, [pc, #584]	; (8002ac8 <PacketProc+0x500>)
 8002880:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002884:	79bb      	ldrb	r3, [r7, #6]
 8002886:	b2d1      	uxtb	r1, r2
 8002888:	4a90      	ldr	r2, [pc, #576]	; (8002acc <PacketProc+0x504>)
 800288a:	54d1      	strb	r1, [r2, r3]
					  y++;
 800288c:	79bb      	ldrb	r3, [r7, #6]
 800288e:	3301      	adds	r3, #1
 8002890:	71bb      	strb	r3, [r7, #6]
					for (a = 6; y < (mainBuffer[2] - 8); a++)
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	3301      	adds	r3, #1
 8002896:	71fb      	strb	r3, [r7, #7]
 8002898:	79ba      	ldrb	r2, [r7, #6]
 800289a:	4b8b      	ldr	r3, [pc, #556]	; (8002ac8 <PacketProc+0x500>)
 800289c:	889b      	ldrh	r3, [r3, #4]
 800289e:	3b08      	subs	r3, #8
 80028a0:	429a      	cmp	r2, r3
 80028a2:	dbeb      	blt.n	800287c <PacketProc+0x2b4>
					screen0x01Text[y] = '\0';   // 4-18-2024 it was 0
 80028a4:	79bb      	ldrb	r3, [r7, #6]
 80028a6:	4a89      	ldr	r2, [pc, #548]	; (8002acc <PacketProc+0x504>)
 80028a8:	2100      	movs	r1, #0
 80028aa:	54d1      	strb	r1, [r2, r3]
	    break;
 80028ac:	e15e      	b.n	8002b6c <PacketProc+0x5a4>
				else if(mainBuffer[4] == 0x11 || mainBuffer[4] == 0x12){  // Screen0x11
 80028ae:	4b86      	ldr	r3, [pc, #536]	; (8002ac8 <PacketProc+0x500>)
 80028b0:	891b      	ldrh	r3, [r3, #8]
 80028b2:	2b11      	cmp	r3, #17
 80028b4:	d003      	beq.n	80028be <PacketProc+0x2f6>
 80028b6:	4b84      	ldr	r3, [pc, #528]	; (8002ac8 <PacketProc+0x500>)
 80028b8:	891b      	ldrh	r3, [r3, #8]
 80028ba:	2b12      	cmp	r3, #18
 80028bc:	d163      	bne.n	8002986 <PacketProc+0x3be>
					offerText[0] = '\0';
 80028be:	4b84      	ldr	r3, [pc, #528]	; (8002ad0 <PacketProc+0x508>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
					offerText[1] = '\0';
 80028c4:	4b82      	ldr	r3, [pc, #520]	; (8002ad0 <PacketProc+0x508>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	705a      	strb	r2, [r3, #1]
					offerText[2] = '\0';
 80028ca:	4b81      	ldr	r3, [pc, #516]	; (8002ad0 <PacketProc+0x508>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	709a      	strb	r2, [r3, #2]
					offerText[3] = '\0';
 80028d0:	4b7f      	ldr	r3, [pc, #508]	; (8002ad0 <PacketProc+0x508>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	70da      	strb	r2, [r3, #3]
					offerText[4] = '\0';
 80028d6:	4b7e      	ldr	r3, [pc, #504]	; (8002ad0 <PacketProc+0x508>)
 80028d8:	2200      	movs	r2, #0
 80028da:	711a      	strb	r2, [r3, #4]
					offerText[5] = '\0';
 80028dc:	4b7c      	ldr	r3, [pc, #496]	; (8002ad0 <PacketProc+0x508>)
 80028de:	2200      	movs	r2, #0
 80028e0:	715a      	strb	r2, [r3, #5]
					if(mainBuffer[6] == '0' && mainBuffer[7] == '0' && mainBuffer[8] == '0'){
 80028e2:	4b79      	ldr	r3, [pc, #484]	; (8002ac8 <PacketProc+0x500>)
 80028e4:	899b      	ldrh	r3, [r3, #12]
 80028e6:	2b30      	cmp	r3, #48	; 0x30
 80028e8:	d10d      	bne.n	8002906 <PacketProc+0x33e>
 80028ea:	4b77      	ldr	r3, [pc, #476]	; (8002ac8 <PacketProc+0x500>)
 80028ec:	89db      	ldrh	r3, [r3, #14]
 80028ee:	2b30      	cmp	r3, #48	; 0x30
 80028f0:	d109      	bne.n	8002906 <PacketProc+0x33e>
 80028f2:	4b75      	ldr	r3, [pc, #468]	; (8002ac8 <PacketProc+0x500>)
 80028f4:	8a1b      	ldrh	r3, [r3, #16]
 80028f6:	2b30      	cmp	r3, #48	; 0x30
 80028f8:	d105      	bne.n	8002906 <PacketProc+0x33e>
						offerText[0] = mainBuffer[9];
 80028fa:	4b73      	ldr	r3, [pc, #460]	; (8002ac8 <PacketProc+0x500>)
 80028fc:	8a5b      	ldrh	r3, [r3, #18]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	4b73      	ldr	r3, [pc, #460]	; (8002ad0 <PacketProc+0x508>)
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	e03e      	b.n	8002984 <PacketProc+0x3bc>
					}else if(mainBuffer[6] == '0' && mainBuffer[7] == '0'){
 8002906:	4b70      	ldr	r3, [pc, #448]	; (8002ac8 <PacketProc+0x500>)
 8002908:	899b      	ldrh	r3, [r3, #12]
 800290a:	2b30      	cmp	r3, #48	; 0x30
 800290c:	d10e      	bne.n	800292c <PacketProc+0x364>
 800290e:	4b6e      	ldr	r3, [pc, #440]	; (8002ac8 <PacketProc+0x500>)
 8002910:	89db      	ldrh	r3, [r3, #14]
 8002912:	2b30      	cmp	r3, #48	; 0x30
 8002914:	d10a      	bne.n	800292c <PacketProc+0x364>
						offerText[0] = mainBuffer[8];
 8002916:	4b6c      	ldr	r3, [pc, #432]	; (8002ac8 <PacketProc+0x500>)
 8002918:	8a1b      	ldrh	r3, [r3, #16]
 800291a:	b2da      	uxtb	r2, r3
 800291c:	4b6c      	ldr	r3, [pc, #432]	; (8002ad0 <PacketProc+0x508>)
 800291e:	701a      	strb	r2, [r3, #0]
						offerText[1] = mainBuffer[9];
 8002920:	4b69      	ldr	r3, [pc, #420]	; (8002ac8 <PacketProc+0x500>)
 8002922:	8a5b      	ldrh	r3, [r3, #18]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4b6a      	ldr	r3, [pc, #424]	; (8002ad0 <PacketProc+0x508>)
 8002928:	705a      	strb	r2, [r3, #1]
 800292a:	e02b      	b.n	8002984 <PacketProc+0x3bc>
					}else if(mainBuffer[6] == '0'){
 800292c:	4b66      	ldr	r3, [pc, #408]	; (8002ac8 <PacketProc+0x500>)
 800292e:	899b      	ldrh	r3, [r3, #12]
 8002930:	2b30      	cmp	r3, #48	; 0x30
 8002932:	d10f      	bne.n	8002954 <PacketProc+0x38c>
						offerText[0] = mainBuffer[7];
 8002934:	4b64      	ldr	r3, [pc, #400]	; (8002ac8 <PacketProc+0x500>)
 8002936:	89db      	ldrh	r3, [r3, #14]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <PacketProc+0x508>)
 800293c:	701a      	strb	r2, [r3, #0]
						offerText[1] = mainBuffer[8];
 800293e:	4b62      	ldr	r3, [pc, #392]	; (8002ac8 <PacketProc+0x500>)
 8002940:	8a1b      	ldrh	r3, [r3, #16]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	4b62      	ldr	r3, [pc, #392]	; (8002ad0 <PacketProc+0x508>)
 8002946:	705a      	strb	r2, [r3, #1]
						offerText[2] = mainBuffer[9];
 8002948:	4b5f      	ldr	r3, [pc, #380]	; (8002ac8 <PacketProc+0x500>)
 800294a:	8a5b      	ldrh	r3, [r3, #18]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4b60      	ldr	r3, [pc, #384]	; (8002ad0 <PacketProc+0x508>)
 8002950:	709a      	strb	r2, [r3, #2]
					if(mainBuffer[6] == '0' && mainBuffer[7] == '0' && mainBuffer[8] == '0'){
 8002952:	e0f8      	b.n	8002b46 <PacketProc+0x57e>
						offerText[0] = mainBuffer[6];
 8002954:	4b5c      	ldr	r3, [pc, #368]	; (8002ac8 <PacketProc+0x500>)
 8002956:	899b      	ldrh	r3, [r3, #12]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4b5d      	ldr	r3, [pc, #372]	; (8002ad0 <PacketProc+0x508>)
 800295c:	701a      	strb	r2, [r3, #0]
						offerText[1] = ',';
 800295e:	4b5c      	ldr	r3, [pc, #368]	; (8002ad0 <PacketProc+0x508>)
 8002960:	222c      	movs	r2, #44	; 0x2c
 8002962:	705a      	strb	r2, [r3, #1]
						offerText[2] = mainBuffer[7];
 8002964:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <PacketProc+0x500>)
 8002966:	89db      	ldrh	r3, [r3, #14]
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4b59      	ldr	r3, [pc, #356]	; (8002ad0 <PacketProc+0x508>)
 800296c:	709a      	strb	r2, [r3, #2]
						offerText[3] = mainBuffer[8];
 800296e:	4b56      	ldr	r3, [pc, #344]	; (8002ac8 <PacketProc+0x500>)
 8002970:	8a1b      	ldrh	r3, [r3, #16]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	4b56      	ldr	r3, [pc, #344]	; (8002ad0 <PacketProc+0x508>)
 8002976:	70da      	strb	r2, [r3, #3]
						offerText[4] = mainBuffer[9];
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <PacketProc+0x500>)
 800297a:	8a5b      	ldrh	r3, [r3, #18]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4b54      	ldr	r3, [pc, #336]	; (8002ad0 <PacketProc+0x508>)
 8002980:	711a      	strb	r2, [r3, #4]
					if(mainBuffer[6] == '0' && mainBuffer[7] == '0' && mainBuffer[8] == '0'){
 8002982:	e0e0      	b.n	8002b46 <PacketProc+0x57e>
 8002984:	e0df      	b.n	8002b46 <PacketProc+0x57e>
				else if(mainBuffer[4] == 0x13){
 8002986:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <PacketProc+0x500>)
 8002988:	891b      	ldrh	r3, [r3, #8]
 800298a:	2b13      	cmp	r3, #19
 800298c:	f040 80ee 	bne.w	8002b6c <PacketProc+0x5a4>
					offerText[0] = '\0';
 8002990:	4b4f      	ldr	r3, [pc, #316]	; (8002ad0 <PacketProc+0x508>)
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
					offerText[1] = '\0';
 8002996:	4b4e      	ldr	r3, [pc, #312]	; (8002ad0 <PacketProc+0x508>)
 8002998:	2200      	movs	r2, #0
 800299a:	705a      	strb	r2, [r3, #1]
					offerText[2] = '\0';
 800299c:	4b4c      	ldr	r3, [pc, #304]	; (8002ad0 <PacketProc+0x508>)
 800299e:	2200      	movs	r2, #0
 80029a0:	709a      	strb	r2, [r3, #2]
					offerText[3] = '\0';
 80029a2:	4b4b      	ldr	r3, [pc, #300]	; (8002ad0 <PacketProc+0x508>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	70da      	strb	r2, [r3, #3]
					offerText[4] = '\0';
 80029a8:	4b49      	ldr	r3, [pc, #292]	; (8002ad0 <PacketProc+0x508>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	711a      	strb	r2, [r3, #4]
					offerText[5] = '\0';
 80029ae:	4b48      	ldr	r3, [pc, #288]	; (8002ad0 <PacketProc+0x508>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	715a      	strb	r2, [r3, #5]
					if(mainBuffer[6] == '0' && mainBuffer[7] == '0' && mainBuffer[8] == '0'){
 80029b4:	4b44      	ldr	r3, [pc, #272]	; (8002ac8 <PacketProc+0x500>)
 80029b6:	899b      	ldrh	r3, [r3, #12]
 80029b8:	2b30      	cmp	r3, #48	; 0x30
 80029ba:	d110      	bne.n	80029de <PacketProc+0x416>
 80029bc:	4b42      	ldr	r3, [pc, #264]	; (8002ac8 <PacketProc+0x500>)
 80029be:	89db      	ldrh	r3, [r3, #14]
 80029c0:	2b30      	cmp	r3, #48	; 0x30
 80029c2:	d10c      	bne.n	80029de <PacketProc+0x416>
 80029c4:	4b40      	ldr	r3, [pc, #256]	; (8002ac8 <PacketProc+0x500>)
 80029c6:	8a1b      	ldrh	r3, [r3, #16]
 80029c8:	2b30      	cmp	r3, #48	; 0x30
 80029ca:	d108      	bne.n	80029de <PacketProc+0x416>
						offerText[0] = mainBuffer[9];
 80029cc:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <PacketProc+0x500>)
 80029ce:	8a5b      	ldrh	r3, [r3, #18]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4b3f      	ldr	r3, [pc, #252]	; (8002ad0 <PacketProc+0x508>)
 80029d4:	701a      	strb	r2, [r3, #0]
						offerText[1] = '\0';
 80029d6:	4b3e      	ldr	r3, [pc, #248]	; (8002ad0 <PacketProc+0x508>)
 80029d8:	2200      	movs	r2, #0
 80029da:	705a      	strb	r2, [r3, #1]
 80029dc:	e046      	b.n	8002a6c <PacketProc+0x4a4>
					}else if(mainBuffer[6] == '0' && mainBuffer[7] == '0'){
 80029de:	4b3a      	ldr	r3, [pc, #232]	; (8002ac8 <PacketProc+0x500>)
 80029e0:	899b      	ldrh	r3, [r3, #12]
 80029e2:	2b30      	cmp	r3, #48	; 0x30
 80029e4:	d111      	bne.n	8002a0a <PacketProc+0x442>
 80029e6:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <PacketProc+0x500>)
 80029e8:	89db      	ldrh	r3, [r3, #14]
 80029ea:	2b30      	cmp	r3, #48	; 0x30
 80029ec:	d10d      	bne.n	8002a0a <PacketProc+0x442>
						offerText[0] = mainBuffer[8];
 80029ee:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <PacketProc+0x500>)
 80029f0:	8a1b      	ldrh	r3, [r3, #16]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <PacketProc+0x508>)
 80029f6:	701a      	strb	r2, [r3, #0]
						offerText[1] = mainBuffer[9];
 80029f8:	4b33      	ldr	r3, [pc, #204]	; (8002ac8 <PacketProc+0x500>)
 80029fa:	8a5b      	ldrh	r3, [r3, #18]
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <PacketProc+0x508>)
 8002a00:	705a      	strb	r2, [r3, #1]
						offerText[2] = '\0';
 8002a02:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <PacketProc+0x508>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	709a      	strb	r2, [r3, #2]
 8002a08:	e030      	b.n	8002a6c <PacketProc+0x4a4>
					}else if(mainBuffer[6] == '0'){
 8002a0a:	4b2f      	ldr	r3, [pc, #188]	; (8002ac8 <PacketProc+0x500>)
 8002a0c:	899b      	ldrh	r3, [r3, #12]
 8002a0e:	2b30      	cmp	r3, #48	; 0x30
 8002a10:	d112      	bne.n	8002a38 <PacketProc+0x470>
						offerText[0] = mainBuffer[7];
 8002a12:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <PacketProc+0x500>)
 8002a14:	89db      	ldrh	r3, [r3, #14]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <PacketProc+0x508>)
 8002a1a:	701a      	strb	r2, [r3, #0]
						offerText[1] = mainBuffer[8];
 8002a1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ac8 <PacketProc+0x500>)
 8002a1e:	8a1b      	ldrh	r3, [r3, #16]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <PacketProc+0x508>)
 8002a24:	705a      	strb	r2, [r3, #1]
						offerText[2] = mainBuffer[9];
 8002a26:	4b28      	ldr	r3, [pc, #160]	; (8002ac8 <PacketProc+0x500>)
 8002a28:	8a5b      	ldrh	r3, [r3, #18]
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <PacketProc+0x508>)
 8002a2e:	709a      	strb	r2, [r3, #2]
						offerText[3] = '\0';
 8002a30:	4b27      	ldr	r3, [pc, #156]	; (8002ad0 <PacketProc+0x508>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	70da      	strb	r2, [r3, #3]
 8002a36:	e019      	b.n	8002a6c <PacketProc+0x4a4>
						offerText[0] = mainBuffer[6];
 8002a38:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <PacketProc+0x500>)
 8002a3a:	899b      	ldrh	r3, [r3, #12]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <PacketProc+0x508>)
 8002a40:	701a      	strb	r2, [r3, #0]
						offerText[1] = ',';
 8002a42:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <PacketProc+0x508>)
 8002a44:	222c      	movs	r2, #44	; 0x2c
 8002a46:	705a      	strb	r2, [r3, #1]
						offerText[2] = mainBuffer[7];
 8002a48:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <PacketProc+0x500>)
 8002a4a:	89db      	ldrh	r3, [r3, #14]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <PacketProc+0x508>)
 8002a50:	709a      	strb	r2, [r3, #2]
						offerText[3] = mainBuffer[8];
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <PacketProc+0x500>)
 8002a54:	8a1b      	ldrh	r3, [r3, #16]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <PacketProc+0x508>)
 8002a5a:	70da      	strb	r2, [r3, #3]
						offerText[4] = mainBuffer[9];
 8002a5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <PacketProc+0x500>)
 8002a5e:	8a5b      	ldrh	r3, [r3, #18]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <PacketProc+0x508>)
 8002a64:	711a      	strb	r2, [r3, #4]
						offerText[5] = '\0';
 8002a66:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <PacketProc+0x508>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	715a      	strb	r2, [r3, #5]
					offerLeftText[0] = mainBuffer[10];
 8002a6c:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <PacketProc+0x500>)
 8002a6e:	8a9b      	ldrh	r3, [r3, #20]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <PacketProc+0x50c>)
 8002a74:	701a      	strb	r2, [r3, #0]
					offerLeftText[1] = '\0';
 8002a76:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <PacketProc+0x50c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	705a      	strb	r2, [r3, #1]
	    break;
 8002a7c:	e076      	b.n	8002b6c <PacketProc+0x5a4>
			}else if((mainBuffer[1]&0x3F) == 0x31){// show data
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <PacketProc+0x500>)
 8002a80:	885b      	ldrh	r3, [r3, #2]
 8002a82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a86:	2b31      	cmp	r3, #49	; 0x31
 8002a88:	d170      	bne.n	8002b6c <PacketProc+0x5a4>
				if(mainBuffer[2] == 0x06 && mainBuffer[3] == 1){
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <PacketProc+0x500>)
 8002a8c:	889b      	ldrh	r3, [r3, #4]
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d10a      	bne.n	8002aa8 <PacketProc+0x4e0>
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <PacketProc+0x500>)
 8002a94:	88db      	ldrh	r3, [r3, #6]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d106      	bne.n	8002aa8 <PacketProc+0x4e0>
					currentTask = TASK_CLEAR;
 8002a9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <PacketProc+0x510>)
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	701a      	strb	r2, [r3, #0]
					mtflag = 0;
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <PacketProc+0x514>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e04e      	b.n	8002b46 <PacketProc+0x57e>
				else if(mainBuffer[2] == 0x08){
 8002aa8:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <PacketProc+0x500>)
 8002aaa:	889b      	ldrh	r3, [r3, #4]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d119      	bne.n	8002ae4 <PacketProc+0x51c>
					currentIndex = mainBuffer[4];
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <PacketProc+0x500>)
 8002ab2:	891b      	ldrh	r3, [r3, #8]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <PacketProc+0x518>)
 8002ab8:	701a      	strb	r2, [r3, #0]
					currentTask = TASK_SINGLE;
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <PacketProc+0x510>)
 8002abc:	2204      	movs	r2, #4
 8002abe:	701a      	strb	r2, [r3, #0]
					mtflag = 0;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <PacketProc+0x514>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
	    break;
 8002ac6:	e051      	b.n	8002b6c <PacketProc+0x5a4>
 8002ac8:	200002a0 	.word	0x200002a0
 8002acc:	200007c8 	.word	0x200007c8
 8002ad0:	200007f0 	.word	0x200007f0
 8002ad4:	200007f8 	.word	0x200007f8
 8002ad8:	200007fa 	.word	0x200007fa
 8002adc:	200007ff 	.word	0x200007ff
 8002ae0:	20000800 	.word	0x20000800
				}else if(mainBuffer[2] == 0x0A){
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <PacketProc+0x5b4>)
 8002ae6:	889b      	ldrh	r3, [r3, #4]
 8002ae8:	2b0a      	cmp	r3, #10
 8002aea:	d13f      	bne.n	8002b6c <PacketProc+0x5a4>
					multiLength[mainBuffer[4]] = (uint16_t)mainBuffer[5]*200;
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <PacketProc+0x5b4>)
 8002aee:	895b      	ldrh	r3, [r3, #10]
 8002af0:	461a      	mov	r2, r3
 8002af2:	23c8      	movs	r3, #200	; 0xc8
 8002af4:	fb03 f102 	mul.w	r1, r3, r2
 8002af8:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <PacketProc+0x5b4>)
 8002afa:	891b      	ldrh	r3, [r3, #8]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <PacketProc+0x5b8>)
 8002b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					multiLength[mainBuffer[6]] = (uint16_t)mainBuffer[7]*200;
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <PacketProc+0x5b4>)
 8002b06:	89db      	ldrh	r3, [r3, #14]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	23c8      	movs	r3, #200	; 0xc8
 8002b0c:	fb03 f102 	mul.w	r1, r3, r2
 8002b10:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <PacketProc+0x5b4>)
 8002b12:	899b      	ldrh	r3, [r3, #12]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <PacketProc+0x5b8>)
 8002b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					currentIndex = 0;
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <PacketProc+0x5bc>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
					currentTask = TASK_MULTI;
 8002b22:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <PacketProc+0x5c0>)
 8002b24:	2205      	movs	r2, #5
 8002b26:	701a      	strb	r2, [r3, #0]
					mtflag = 1;
 8002b28:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <PacketProc+0x5c4>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
	    break;
 8002b2e:	e01d      	b.n	8002b6c <PacketProc+0x5a4>
			if(HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 2) != HAL_OK)
 8002b30:	2202      	movs	r2, #2
 8002b32:	4917      	ldr	r1, [pc, #92]	; (8002b90 <PacketProc+0x5c8>)
 8002b34:	4817      	ldr	r0, [pc, #92]	; (8002b94 <PacketProc+0x5cc>)
 8002b36:	f007 fb62 	bl	800a1fe <HAL_UART_Receive_IT>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d015      	beq.n	8002b6c <PacketProc+0x5a4>
				Error_Handler();
 8002b40:	f005 f91e 	bl	8007d80 <Error_Handler>
	    break;
 8002b44:	e012      	b.n	8002b6c <PacketProc+0x5a4>
 8002b46:	e011      	b.n	8002b6c <PacketProc+0x5a4>
	default:
		// rxState value unexpected
		rxState = _CMD;
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <PacketProc+0x5d0>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
		// please see the length = 2
		if(HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 2) != HAL_OK)
 8002b4e:	2202      	movs	r2, #2
 8002b50:	490f      	ldr	r1, [pc, #60]	; (8002b90 <PacketProc+0x5c8>)
 8002b52:	4810      	ldr	r0, [pc, #64]	; (8002b94 <PacketProc+0x5cc>)
 8002b54:	f007 fb53 	bl	800a1fe <HAL_UART_Receive_IT>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <PacketProc+0x5a8>
			Error_Handler();
 8002b5e:	f005 f90f 	bl	8007d80 <Error_Handler>
		break;
 8002b62:	e005      	b.n	8002b70 <PacketProc+0x5a8>
		break;
 8002b64:	bf00      	nop
 8002b66:	e004      	b.n	8002b72 <PacketProc+0x5aa>
		break;
 8002b68:	bf00      	nop
 8002b6a:	e002      	b.n	8002b72 <PacketProc+0x5aa>
	    break;
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <PacketProc+0x5aa>
		break;
 8002b70:	bf00      	nop
	}// switch rxState

}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200002a0 	.word	0x200002a0
 8002b80:	2000080c 	.word	0x2000080c
 8002b84:	20000800 	.word	0x20000800
 8002b88:	200007fa 	.word	0x200007fa
 8002b8c:	200007ff 	.word	0x200007ff
 8002b90:	200000a0 	.word	0x200000a0
 8002b94:	200008bc 	.word	0x200008bc
 8002b98:	200007fb 	.word	0x200007fb

08002b9c <HandlePacket>:

void HandlePacket(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
	if(currentTask == TASK_RESET)
 8002ba0:	4b7c      	ldr	r3, [pc, #496]	; (8002d94 <HandlePacket+0x1f8>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d113      	bne.n	8002bd0 <HandlePacket+0x34>
	{
		Color_Bar_OFF();
 8002ba8:	f7fe fa46 	bl	8001038 <Color_Bar_OFF>
		Foreground_color_256(color256_white);
 8002bac:	20ff      	movs	r0, #255	; 0xff
 8002bae:	f7ff fb5e 	bl	800226e <Foreground_color_256>
		Background_color_256(color256_black);
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7ff fb7d 	bl	80022b2 <Background_color_256>
		Goto_Text_XY(80,0);
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2050      	movs	r0, #80	; 0x50
 8002bbc:	f7fe fdd6 	bl	800176c <Goto_Text_XY>
		Font_Width_X1();
 8002bc0:	f7ff fa57 	bl	8002072 <Font_Width_X1>
		Font_Height_X1();
 8002bc4:	f7ff fabd 	bl	8002142 <Font_Height_X1>
//		Show_String("RESET response");
		currentTask = TASK_NO;
 8002bc8:	4b72      	ldr	r3, [pc, #456]	; (8002d94 <HandlePacket+0x1f8>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e095      	b.n	8002cfc <HandlePacket+0x160>
	}
	else if(currentTask == TASK_CLEAR)
 8002bd0:	4b70      	ldr	r3, [pc, #448]	; (8002d94 <HandlePacket+0x1f8>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d114      	bne.n	8002c02 <HandlePacket+0x66>
	{
		Color_Bar_OFF();
 8002bd8:	f7fe fa2e 	bl	8001038 <Color_Bar_OFF>
		Foreground_color_256(color256_black);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7ff fb46 	bl	800226e <Foreground_color_256>
		Line_Start_XY(0,0);
 8002be2:	2100      	movs	r1, #0
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fe fdf5 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(399,1279);  // 1280x400
 8002bea:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8002bee:	f240 108f 	movw	r0, #399	; 0x18f
 8002bf2:	f7fe fe1f 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 8002bf6:	f7fe fedd 	bl	80019b4 <Start_Square_Fill>
		currentTask = TASK_NO;
 8002bfa:	4b66      	ldr	r3, [pc, #408]	; (8002d94 <HandlePacket+0x1f8>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e07c      	b.n	8002cfc <HandlePacket+0x160>
	}
	else if(currentTask == TASK_PAUSE){
 8002c02:	4b64      	ldr	r3, [pc, #400]	; (8002d94 <HandlePacket+0x1f8>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d102      	bne.n	8002c10 <HandlePacket+0x74>
		Color_Bar_OFF();
 8002c0a:	f7fe fa15 	bl	8001038 <Color_Bar_OFF>
 8002c0e:	e075      	b.n	8002cfc <HandlePacket+0x160>
	}
	else if(currentTask == TASK_SINGLE || currentTask == TASK_MULTI){
 8002c10:	4b60      	ldr	r3, [pc, #384]	; (8002d94 <HandlePacket+0x1f8>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d003      	beq.n	8002c20 <HandlePacket+0x84>
 8002c18:	4b5e      	ldr	r3, [pc, #376]	; (8002d94 <HandlePacket+0x1f8>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b05      	cmp	r3, #5
 8002c1e:	d16d      	bne.n	8002cfc <HandlePacket+0x160>
		//debug(currentTask,currentIndex,multiIndex[0],multiIndex[1],multiLength[0],multiLength[1]);
		//currentTask = 0;

		switch(multiIndex[currentIndex]){
 8002c20:	4b5d      	ldr	r3, [pc, #372]	; (8002d98 <HandlePacket+0x1fc>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b5d      	ldr	r3, [pc, #372]	; (8002d9c <HandlePacket+0x200>)
 8002c28:	5c9b      	ldrb	r3, [r3, r2]
 8002c2a:	2b13      	cmp	r3, #19
 8002c2c:	d866      	bhi.n	8002cfc <HandlePacket+0x160>
 8002c2e:	a201      	add	r2, pc, #4	; (adr r2, 8002c34 <HandlePacket+0x98>)
 8002c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c34:	08002c85 	.word	0x08002c85
 8002c38:	08002c8b 	.word	0x08002c8b
 8002c3c:	08002c91 	.word	0x08002c91
 8002c40:	08002c97 	.word	0x08002c97
 8002c44:	08002c9d 	.word	0x08002c9d
 8002c48:	08002ca3 	.word	0x08002ca3
 8002c4c:	08002ca9 	.word	0x08002ca9
 8002c50:	08002caf 	.word	0x08002caf
 8002c54:	08002cb5 	.word	0x08002cb5
 8002c58:	08002cbb 	.word	0x08002cbb
 8002c5c:	08002cc1 	.word	0x08002cc1
 8002c60:	08002cc7 	.word	0x08002cc7
 8002c64:	08002ccd 	.word	0x08002ccd
 8002c68:	08002cd3 	.word	0x08002cd3
 8002c6c:	08002cd9 	.word	0x08002cd9
 8002c70:	08002cdf 	.word	0x08002cdf
 8002c74:	08002ce5 	.word	0x08002ce5
 8002c78:	08002ceb 	.word	0x08002ceb
 8002c7c:	08002cf1 	.word	0x08002cf1
 8002c80:	08002cf7 	.word	0x08002cf7
		case 0x00:	screen0x00();	break;
 8002c84:	f000 f8d0 	bl	8002e28 <screen0x00>
 8002c88:	e038      	b.n	8002cfc <HandlePacket+0x160>
		case 0x01:	screen0x01();	break;
 8002c8a:	f000 f913 	bl	8002eb4 <screen0x01>
 8002c8e:	e035      	b.n	8002cfc <HandlePacket+0x160>
		case 0x02:	screen0x02();	break;
 8002c90:	f000 fac2 	bl	8003218 <screen0x02>
 8002c94:	e032      	b.n	8002cfc <HandlePacket+0x160>
		case 0x03:	screen0x03();	break;
 8002c96:	f000 fc4f 	bl	8003538 <screen0x03>
 8002c9a:	e02f      	b.n	8002cfc <HandlePacket+0x160>
		case 0x04:	screen0x04();	break;
 8002c9c:	f000 fcbe 	bl	800361c <screen0x04>
 8002ca0:	e02c      	b.n	8002cfc <HandlePacket+0x160>
		case 0x05:	screen0x05();	break;
 8002ca2:	f000 fd57 	bl	8003754 <screen0x05>
 8002ca6:	e029      	b.n	8002cfc <HandlePacket+0x160>
		case 0x06:	screen0x06();	break;
 8002ca8:	f000 fe4a 	bl	8003940 <screen0x06>
 8002cac:	e026      	b.n	8002cfc <HandlePacket+0x160>
		case 0x07:	screen0x07();	break;
 8002cae:	f000 fe59 	bl	8003964 <screen0x07>
 8002cb2:	e023      	b.n	8002cfc <HandlePacket+0x160>
		case 0x08:	screen0x08();	break;
 8002cb4:	f001 fa1a 	bl	80040ec <screen0x08>
 8002cb8:	e020      	b.n	8002cfc <HandlePacket+0x160>
		case 0x09:	screen0x09();	break;
 8002cba:	f001 faf1 	bl	80042a0 <screen0x09>
 8002cbe:	e01d      	b.n	8002cfc <HandlePacket+0x160>
		case 0x0a:	screen0x0a();	break;
 8002cc0:	f001 fce8 	bl	8004694 <screen0x0a>
 8002cc4:	e01a      	b.n	8002cfc <HandlePacket+0x160>
		case 0x0b:	screen0x0b();	break;
 8002cc6:	f001 fed9 	bl	8004a7c <screen0x0b>
 8002cca:	e017      	b.n	8002cfc <HandlePacket+0x160>
		case 0x0c:	screen0x0c();	break;
 8002ccc:	f002 f8ca 	bl	8004e64 <screen0x0c>
 8002cd0:	e014      	b.n	8002cfc <HandlePacket+0x160>
		case 0x0d:	screen0x0d();	break;
 8002cd2:	f002 fabb 	bl	800524c <screen0x0d>
 8002cd6:	e011      	b.n	8002cfc <HandlePacket+0x160>
		case 0x0e:	screen0x0e();	break;
 8002cd8:	f002 fc2e 	bl	8005538 <screen0x0e>
 8002cdc:	e00e      	b.n	8002cfc <HandlePacket+0x160>
		case 0x0f:	screen0x0f();	break;
 8002cde:	f002 fda5 	bl	800582c <screen0x0f>
 8002ce2:	e00b      	b.n	8002cfc <HandlePacket+0x160>
		case 0x10:	screen0x10();	break;
 8002ce4:	f003 f826 	bl	8005d34 <screen0x10>
 8002ce8:	e008      	b.n	8002cfc <HandlePacket+0x160>
		case 0x11:	screen0x11();	break;
 8002cea:	f003 fa8d 	bl	8006208 <screen0x11>
 8002cee:	e005      	b.n	8002cfc <HandlePacket+0x160>
		case 0x12:	screen0x12();	break;
 8002cf0:	f003 fe30 	bl	8006954 <screen0x12>
 8002cf4:	e002      	b.n	8002cfc <HandlePacket+0x160>
		case 0x13:	screen0x13();	break;
 8002cf6:	f004 f83d 	bl	8006d74 <screen0x13>
 8002cfa:	bf00      	nop
	// Reset timeStart after every packet received like this - timeStart = HAL_GetTick();
	// This means there is no data coming in on the serial line.
	// Play "NO DATA" on the screen.. The original display would slide "NO DATA"
	// off the screen to the left, or drop it in from the top.  Maybe after 10 minutes
	// we can turn into a digital photo frame and show pictures on the SD card?
	if (idleTime == TIME_LIMIT) {
 8002cfc:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <HandlePacket+0x204>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d143      	bne.n	8002d90 <HandlePacket+0x1f4>
		idleTime = TIME_LIMIT+1;
 8002d08:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <HandlePacket+0x204>)
 8002d0a:	f242 7211 	movw	r2, #10001	; 0x2711
 8002d0e:	601a      	str	r2, [r3, #0]
		//HAL_UART_AbortReceive_IT(&huart3);
		//if(HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 2) != HAL_OK)     // please see the length = 2
		//	Error_Handler();
		Foreground_color_256(color256_red);
 8002d10:	20e0      	movs	r0, #224	; 0xe0
 8002d12:	f7ff faac 	bl	800226e <Foreground_color_256>
		Line_Start_XY(0,0);
 8002d16:	2100      	movs	r1, #0
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f7fe fd5b 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(399,1279);  // 1280x400
 8002d1e:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8002d22:	f240 108f 	movw	r0, #399	; 0x18f
 8002d26:	f7fe fd85 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 8002d2a:	f7fe fe43 	bl	80019b4 <Start_Square_Fill>
		// Show NO DATA
		displayText[0] = 'N';
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HandlePacket+0x208>)
 8002d30:	224e      	movs	r2, #78	; 0x4e
 8002d32:	701a      	strb	r2, [r3, #0]
		displayText[1] = 'O';
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HandlePacket+0x208>)
 8002d36:	224f      	movs	r2, #79	; 0x4f
 8002d38:	705a      	strb	r2, [r3, #1]
		displayText[2] = ' ';
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HandlePacket+0x208>)
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	709a      	strb	r2, [r3, #2]
		displayText[3] = 'D';
 8002d40:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <HandlePacket+0x208>)
 8002d42:	2244      	movs	r2, #68	; 0x44
 8002d44:	70da      	strb	r2, [r3, #3]
		displayText[4] = 'A';
 8002d46:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <HandlePacket+0x208>)
 8002d48:	2241      	movs	r2, #65	; 0x41
 8002d4a:	711a      	strb	r2, [r3, #4]
		displayText[5] = 'T';
 8002d4c:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <HandlePacket+0x208>)
 8002d4e:	2254      	movs	r2, #84	; 0x54
 8002d50:	715a      	strb	r2, [r3, #5]
		displayText[6] = 'A';
 8002d52:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <HandlePacket+0x208>)
 8002d54:	2241      	movs	r2, #65	; 0x41
 8002d56:	719a      	strb	r2, [r3, #6]
		displayText[7] = '\0';
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HandlePacket+0x208>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	71da      	strb	r2, [r3, #7]
		Font_Width_X4();
 8002d5e:	f7ff f9d6 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8002d62:	f7ff fa3c 	bl	80021de <Font_Height_X4>
		Font_Select_16x32_32x32();
 8002d66:	f7ff f8fc 	bl	8001f62 <Font_Select_16x32_32x32>
		Foreground_color_256(color256_black);
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	f7ff fa7f 	bl	800226e <Foreground_color_256>
		Background_color_256(color256_red);
 8002d70:	20e0      	movs	r0, #224	; 0xe0
 8002d72:	f7ff fa9e 	bl	80022b2 <Background_color_256>
		Font_Background_select_Transparency();
 8002d76:	f7ff f93a 	bl	8001fee <Font_Background_select_Transparency>
		Set_GTFont_Decoder(0x21);
 8002d7a:	2021      	movs	r0, #33	; 0x21
 8002d7c:	f7ff fa67 	bl	800224e <Set_GTFont_Decoder>
		Goto_Text_XY(100,360);
 8002d80:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8002d84:	2064      	movs	r0, #100	; 0x64
 8002d86:	f7fe fcf1 	bl	800176c <Goto_Text_XY>
		Show_String((char *)displayText);
 8002d8a:	4806      	ldr	r0, [pc, #24]	; (8002da4 <HandlePacket+0x208>)
 8002d8c:	f7ff fab3 	bl	80022f6 <Show_String>
	}
}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	200007fa 	.word	0x200007fa
 8002d98:	20000800 	.word	0x20000800
 8002d9c:	20000804 	.word	0x20000804
 8002da0:	20000814 	.word	0x20000814
 8002da4:	200006a0 	.word	0x200006a0

08002da8 <crc16_ccitt_reversed_w16>:
	* @param  data : pointer of data to caculate.
  * @param  length : data's length
  * @retval the CRC checksum value
  */
uint16_t crc16_ccitt_reversed_w16(const uint16_t* data, size_t length)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0x0000; // Common initial value
 8002db2:	2300      	movs	r3, #0
 8002db4:	82fb      	strh	r3, [r7, #22]
	uint16_t poly = 0x8408; // Reversed polynomial for CRC-16-CCITT
 8002db6:	f248 4308 	movw	r3, #33800	; 0x8408
 8002dba:	81bb      	strh	r3, [r7, #12]

	for (size_t i = 0; i < length; i++) {
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	e027      	b.n	8002e12 <crc16_ccitt_reversed_w16+0x6a>
		crc ^= (data[i]&0x00FF);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b21b      	sxth	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	b21a      	sxth	r2, r3
 8002dd2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002dd6:	4053      	eors	r3, r2
 8002dd8:	b21b      	sxth	r3, r3
 8002dda:	82fb      	strh	r3, [r7, #22]
		for (uint8_t j = 0; j < 8; j++) {
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
 8002de0:	e011      	b.n	8002e06 <crc16_ccitt_reversed_w16+0x5e>
			if (crc & 0x0001) {
 8002de2:	8afb      	ldrh	r3, [r7, #22]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d006      	beq.n	8002dfa <crc16_ccitt_reversed_w16+0x52>
				crc = (crc >> 1) ^ poly;
 8002dec:	8afb      	ldrh	r3, [r7, #22]
 8002dee:	085b      	lsrs	r3, r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	89bb      	ldrh	r3, [r7, #12]
 8002df4:	4053      	eors	r3, r2
 8002df6:	82fb      	strh	r3, [r7, #22]
 8002df8:	e002      	b.n	8002e00 <crc16_ccitt_reversed_w16+0x58>
			}
			else {
				crc >>= 1;
 8002dfa:	8afb      	ldrh	r3, [r7, #22]
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	82fb      	strh	r3, [r7, #22]
		for (uint8_t j = 0; j < 8; j++) {
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	3301      	adds	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	2b07      	cmp	r3, #7
 8002e0a:	d9ea      	bls.n	8002de2 <crc16_ccitt_reversed_w16+0x3a>
	for (size_t i = 0; i < length; i++) {
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d3d3      	bcc.n	8002dc2 <crc16_ccitt_reversed_w16+0x1a>
			}
		}
	}
	return crc;
 8002e1a:	8afb      	ldrh	r3, [r7, #22]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <screen0x00>:
	Show_String((char *)txt);
}


void screen0x00(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
	// Show text from the game
	//  Set display text properties for on screen using a big font
	// show packet = rxBuff[3] = 0x01, [4] = 0x00, [5] = 0x00

    Foreground_color_256(color256_black);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7ff fa1e 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7ff fa3d 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 8002e38:	2100      	movs	r1, #0
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7fe fcca 	bl	80017d4 <Line_Start_XY>
	Line_End_XY(399,1279);  //  Y,X
 8002e40:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8002e44:	f240 108f 	movw	r0, #399	; 0x18f
 8002e48:	f7fe fcf4 	bl	8001834 <Line_End_XY>
	Start_Square_Fill();
 8002e4c:	f7fe fdb2 	bl	80019b4 <Start_Square_Fill>

	if(fullcolor)
 8002e50:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <screen0x00+0x80>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <screen0x00+0x38>
	Foreground_color_256(color256_white);
 8002e58:	20ff      	movs	r0, #255	; 0xff
 8002e5a:	f7ff fa08 	bl	800226e <Foreground_color_256>
 8002e5e:	e002      	b.n	8002e66 <screen0x00+0x3e>
	else Foreground_color_256(MONOCHROME_COLOR);
 8002e60:	201f      	movs	r0, #31
 8002e62:	f7ff fa04 	bl	800226e <Foreground_color_256>

	CGROM_Select_Genitop_FontROM();
 8002e66:	f7ff f848 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8002e6a:	f7ff f9d2 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	Font_Background_select_Color();
 8002e6e:	f7ff f8d4 	bl	800201a <Font_Background_select_Color>
	//Font_Select_12x24_24x24();
	Disable_Font_Alignment();     // 76 Chars Wide
 8002e72:	f7ff f8a6 	bl	8001fc2 <Disable_Font_Alignment>
	Font_Select_16x32_32x32();
 8002e76:	f7ff f874 	bl	8001f62 <Font_Select_16x32_32x32>
	Set_GTFont_Decoder(0x21);
 8002e7a:	2021      	movs	r0, #33	; 0x21
 8002e7c:	f7ff f9e7 	bl	800224e <Set_GTFont_Decoder>
    Font_Width_X3();
 8002e80:	f7ff f92b 	bl	80020da <Font_Width_X3>
    Font_Height_X4();
 8002e84:	f7ff f9ab 	bl	80021de <Font_Height_X4>
	Goto_Text_XY(116,225);       //  Y, X -- 4-19-2024  It was 116,95.
 8002e88:	21e1      	movs	r1, #225	; 0xe1
 8002e8a:	2074      	movs	r0, #116	; 0x74
 8002e8c:	f7fe fc6e 	bl	800176c <Goto_Text_XY>
	Show_String((char *)screen0x00Text);
 8002e90:	4806      	ldr	r0, [pc, #24]	; (8002eac <screen0x00+0x84>)
 8002e92:	f7ff fa30 	bl	80022f6 <Show_String>
	screen0x00Text[0] = '\0';
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <screen0x00+0x84>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
	currentTask = 0;
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <screen0x00+0x88>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	200007a0 	.word	0x200007a0
 8002eb0:	200007fa 	.word	0x200007fa

08002eb4 <screen0x01>:


void screen0x01(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b0ae      	sub	sp, #184	; 0xb8
 8002eb8:	af00      	add	r7, sp, #0
	unsigned char	   topText[80] = {0};
 8002eba:	2300      	movs	r3, #0
 8002ebc:	653b      	str	r3, [r7, #80]	; 0x50
 8002ebe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ec2:	224c      	movs	r2, #76	; 0x4c
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f008 fb01 	bl	800b4ce <memset>
	unsigned char   bottomText[80] = {0};
 8002ecc:	2300      	movs	r3, #0
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	224c      	movs	r2, #76	; 0x4c
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f008 faf9 	bl	800b4ce <memset>
	int                          c = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int							 d = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int 					  oldc = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	int 				      oldd = 14;
 8002eee:	230e      	movs	r3, #14
 8002ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	// Clear Screen
	Foreground_color_256(color256_black);
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7ff f9ba 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8002efa:	2000      	movs	r0, #0
 8002efc:	f7ff f9d9 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 8002f00:	2100      	movs	r1, #0
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7fe fc66 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 8002f08:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8002f0c:	f240 108f 	movw	r0, #399	; 0x18f
 8002f10:	f7fe fc90 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 8002f14:	f7fe fd4e 	bl	80019b4 <Start_Square_Fill>

	CGROM_Select_Genitop_FontROM();
 8002f18:	f7fe ffef 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8002f1c:	f7ff f979 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	//Font_Select_12x24_24x24();
	Font_Select_16x32_32x32();
 8002f20:	f7ff f81f 	bl	8001f62 <Font_Select_16x32_32x32>
	Set_GTFont_Decoder(0x21);
 8002f24:	2021      	movs	r0, #33	; 0x21
 8002f26:	f7ff f992 	bl	800224e <Set_GTFont_Decoder>
    if(fullcolor) Foreground_color_256(color256_white);
 8002f2a:	4bb7      	ldr	r3, [pc, #732]	; (8003208 <screen0x01+0x354>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <screen0x01+0x86>
 8002f32:	20ff      	movs	r0, #255	; 0xff
 8002f34:	f7ff f99b 	bl	800226e <Foreground_color_256>
 8002f38:	e002      	b.n	8002f40 <screen0x01+0x8c>
    else Foreground_color_256(MONOCHROME_COLOR);
 8002f3a:	201f      	movs	r0, #31
 8002f3c:	f7ff f997 	bl	800226e <Foreground_color_256>

   	Background_color_256(color256_black);
 8002f40:	2000      	movs	r0, #0
 8002f42:	f7ff f9b6 	bl	80022b2 <Background_color_256>

    Disable_Font_Alignment();
 8002f46:	f7ff f83c 	bl	8001fc2 <Disable_Font_Alignment>
	//Font_Background_select_Color();
	Font_Background_select_Transparency();
 8002f4a:	f7ff f850 	bl	8001fee <Font_Background_select_Transparency>
	Goto_Text_XY(116,225);       //  Y, X  4-19-2024  it was 116, 95
 8002f4e:	21e1      	movs	r1, #225	; 0xe1
 8002f50:	2074      	movs	r0, #116	; 0x74
 8002f52:	f7fe fc0b 	bl	800176c <Goto_Text_XY>
    Font_Width_X3();
 8002f56:	f7ff f8c0 	bl	80020da <Font_Width_X3>
    Font_Height_X4();
 8002f5a:	f7ff f940 	bl	80021de <Font_Height_X4>
	Show_String((char *)screen0x01Text);
 8002f5e:	48ab      	ldr	r0, [pc, #684]	; (800320c <screen0x01+0x358>)
 8002f60:	f7ff f9c9 	bl	80022f6 <Show_String>
	screen0x01Text[0] = '\0';
 8002f64:	4ba9      	ldr	r3, [pc, #676]	; (800320c <screen0x01+0x358>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]

    // Draw Top bar area
	if(fullcolor)
 8002f6a:	4ba7      	ldr	r3, [pc, #668]	; (8003208 <screen0x01+0x354>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <screen0x01+0xc6>
		Foreground_color_256(color256_green);
 8002f72:	201c      	movs	r0, #28
 8002f74:	f7ff f97b 	bl	800226e <Foreground_color_256>
 8002f78:	e002      	b.n	8002f80 <screen0x01+0xcc>
	else
		Foreground_color_256(MONOCHROME_COLOR);
 8002f7a:	201f      	movs	r0, #31
 8002f7c:	f7ff f977 	bl	800226e <Foreground_color_256>

	Background_color_256(color256_black);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7ff f996 	bl	80022b2 <Background_color_256>
	Line_Start_XY(58,90);  //       4-11-2024  it was 0, 0
 8002f86:	215a      	movs	r1, #90	; 0x5a
 8002f88:	203a      	movs	r0, #58	; 0x3a
 8002f8a:	f7fe fc23 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(92,1240);  //  Y,X  4-11-2024  it was 35, 1279   1215
 8002f8e:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8002f92:	205c      	movs	r0, #92	; 0x5c
 8002f94:	f7fe fc4e 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 8002f98:	f7fe fd0c 	bl	80019b4 <Start_Square_Fill>

    // Draw Bottom bar area
	if(fullcolor) Foreground_color_256(color256_green);
 8002f9c:	4b9a      	ldr	r3, [pc, #616]	; (8003208 <screen0x01+0x354>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <screen0x01+0xf8>
 8002fa4:	201c      	movs	r0, #28
 8002fa6:	f7ff f962 	bl	800226e <Foreground_color_256>
 8002faa:	e002      	b.n	8002fb2 <screen0x01+0xfe>
	else Foreground_color_256(MONOCHROME_COLOR);
 8002fac:	201f      	movs	r0, #31
 8002fae:	f7ff f95e 	bl	800226e <Foreground_color_256>

	Background_color_256(color256_black);
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f7ff f97d 	bl	80022b2 <Background_color_256>
	Line_Start_XY(286,90);   //       4-11-2024 it was 365, 0
 8002fb8:	215a      	movs	r1, #90	; 0x5a
 8002fba:	f44f 708f 	mov.w	r0, #286	; 0x11e
 8002fbe:	f7fe fc09 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(318,1240);  //  Y,X  4-11-2024 it was 399, 1279
 8002fc2:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8002fc6:	f44f 709f 	mov.w	r0, #318	; 0x13e
 8002fca:	f7fe fc33 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 8002fce:	f7fe fcf1 	bl	80019b4 <Start_Square_Fill>

	Enable_Font_Alignment();      // 46 Chars Wide
 8002fd2:	f7fe ffe0 	bl	8001f96 <Enable_Font_Alignment>
	//Disable_Font_Alignment();     // 76 Chars Wide
	Font_Background_select_Color();
 8002fd6:	f7ff f820 	bl	800201a <Font_Background_select_Color>
	//Font_Background_select_Transparency();
//    Foreground_color_256(color256_black);
//	Background_color_256(color256_black);
    Font_Width_X1();
 8002fda:	f7ff f84a 	bl	8002072 <Font_Width_X1>
    Font_Height_X1();
 8002fde:	f7ff f8b0 	bl	8002142 <Font_Height_X1>
    // Length of displayText is 15
    // 75 chars total on one line
	displayText[0]  = 'T';  displayText[1]  = 'O';  displayText[2]  = 'P';  displayText[3]  = ' ';
 8002fe2:	4b8b      	ldr	r3, [pc, #556]	; (8003210 <screen0x01+0x35c>)
 8002fe4:	2254      	movs	r2, #84	; 0x54
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	4b89      	ldr	r3, [pc, #548]	; (8003210 <screen0x01+0x35c>)
 8002fea:	224f      	movs	r2, #79	; 0x4f
 8002fec:	705a      	strb	r2, [r3, #1]
 8002fee:	4b88      	ldr	r3, [pc, #544]	; (8003210 <screen0x01+0x35c>)
 8002ff0:	2250      	movs	r2, #80	; 0x50
 8002ff2:	709a      	strb	r2, [r3, #2]
 8002ff4:	4b86      	ldr	r3, [pc, #536]	; (8003210 <screen0x01+0x35c>)
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	70da      	strb	r2, [r3, #3]
	displayText[4]  = 'D';  displayText[5]  = 'O';  displayText[6]  = 'L';  displayText[7]  = 'L';
 8002ffa:	4b85      	ldr	r3, [pc, #532]	; (8003210 <screen0x01+0x35c>)
 8002ffc:	2244      	movs	r2, #68	; 0x44
 8002ffe:	711a      	strb	r2, [r3, #4]
 8003000:	4b83      	ldr	r3, [pc, #524]	; (8003210 <screen0x01+0x35c>)
 8003002:	224f      	movs	r2, #79	; 0x4f
 8003004:	715a      	strb	r2, [r3, #5]
 8003006:	4b82      	ldr	r3, [pc, #520]	; (8003210 <screen0x01+0x35c>)
 8003008:	224c      	movs	r2, #76	; 0x4c
 800300a:	719a      	strb	r2, [r3, #6]
 800300c:	4b80      	ldr	r3, [pc, #512]	; (8003210 <screen0x01+0x35c>)
 800300e:	224c      	movs	r2, #76	; 0x4c
 8003010:	71da      	strb	r2, [r3, #7]
	displayText[8]  = 'A';  displayText[9]  = 'R';  displayText[10] = ' ';  displayText[11] = ' ';
 8003012:	4b7f      	ldr	r3, [pc, #508]	; (8003210 <screen0x01+0x35c>)
 8003014:	2241      	movs	r2, #65	; 0x41
 8003016:	721a      	strb	r2, [r3, #8]
 8003018:	4b7d      	ldr	r3, [pc, #500]	; (8003210 <screen0x01+0x35c>)
 800301a:	2252      	movs	r2, #82	; 0x52
 800301c:	725a      	strb	r2, [r3, #9]
 800301e:	4b7c      	ldr	r3, [pc, #496]	; (8003210 <screen0x01+0x35c>)
 8003020:	2220      	movs	r2, #32
 8003022:	729a      	strb	r2, [r3, #10]
 8003024:	4b7a      	ldr	r3, [pc, #488]	; (8003210 <screen0x01+0x35c>)
 8003026:	2220      	movs	r2, #32
 8003028:	72da      	strb	r2, [r3, #11]
	displayText[12] = ' ';  displayText[13] = ' ';  displayText[14] = ' ';  displayText[15] = '\0';
 800302a:	4b79      	ldr	r3, [pc, #484]	; (8003210 <screen0x01+0x35c>)
 800302c:	2220      	movs	r2, #32
 800302e:	731a      	strb	r2, [r3, #12]
 8003030:	4b77      	ldr	r3, [pc, #476]	; (8003210 <screen0x01+0x35c>)
 8003032:	2220      	movs	r2, #32
 8003034:	735a      	strb	r2, [r3, #13]
 8003036:	4b76      	ldr	r3, [pc, #472]	; (8003210 <screen0x01+0x35c>)
 8003038:	2220      	movs	r2, #32
 800303a:	739a      	strb	r2, [r3, #14]
 800303c:	4b74      	ldr	r3, [pc, #464]	; (8003210 <screen0x01+0x35c>)
 800303e:	2200      	movs	r2, #0
 8003040:	73da      	strb	r2, [r3, #15]
		bottomText[b] = displayText[d];
		d--;
		if (d == -1) d = 14;
	}
*/
	c = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	d = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	currentTask = 0;
 800304e:	4b71      	ldr	r3, [pc, #452]	; (8003214 <screen0x01+0x360>)
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
	while(currentTask == 0)
 8003054:	e0cd      	b.n	80031f2 <screen0x01+0x33e>
	{
		// Scroll Left
		oldc++;
 8003056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800305a:	3301      	adds	r3, #1
 800305c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		if(oldc == 15) oldc = 0;
 8003060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003064:	2b0f      	cmp	r3, #15
 8003066:	d102      	bne.n	800306e <screen0x01+0x1ba>
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		c = oldc;
 800306e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003072:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		for (int b = 0; b < 38; b++)      // 4-12-2024 it was b < 41
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800307c:	e01c      	b.n	80030b8 <screen0x01+0x204>
		{
			topText[b] = displayText[c];
 800307e:	4a64      	ldr	r2, [pc, #400]	; (8003210 <screen0x01+0x35c>)
 8003080:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003084:	4413      	add	r3, r2
 8003086:	7819      	ldrb	r1, [r3, #0]
 8003088:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800308c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003090:	4413      	add	r3, r2
 8003092:	460a      	mov	r2, r1
 8003094:	701a      	strb	r2, [r3, #0]
			c++;
 8003096:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800309a:	3301      	adds	r3, #1
 800309c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			if (c == 15) c = 0;
 80030a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030a4:	2b0f      	cmp	r3, #15
 80030a6:	d102      	bne.n	80030ae <screen0x01+0x1fa>
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		for (int b = 0; b < 38; b++)      // 4-12-2024 it was b < 41
 80030ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030b2:	3301      	adds	r3, #1
 80030b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80030b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030bc:	2b25      	cmp	r3, #37	; 0x25
 80030be:	ddde      	ble.n	800307e <screen0x01+0x1ca>
		}

		// Scroll Right
		oldd--;
 80030c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030c4:	3b01      	subs	r3, #1
 80030c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		if (oldd == -1) oldd = 14;
 80030ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d102      	bne.n	80030da <screen0x01+0x226>
 80030d4:	230e      	movs	r3, #14
 80030d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		d = oldd;
 80030da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		//for (int b = 75; b != -1; b--)
		for (int b = 38; b != -1; b--)      // 4-12-2024  it was b=41
 80030e2:	2326      	movs	r3, #38	; 0x26
 80030e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030e8:	e01c      	b.n	8003124 <screen0x01+0x270>
		{
			bottomText[b] = displayText[d];
 80030ea:	4a49      	ldr	r2, [pc, #292]	; (8003210 <screen0x01+0x35c>)
 80030ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80030f0:	4413      	add	r3, r2
 80030f2:	7819      	ldrb	r1, [r3, #0]
 80030f4:	463a      	mov	r2, r7
 80030f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030fa:	4413      	add	r3, r2
 80030fc:	460a      	mov	r2, r1
 80030fe:	701a      	strb	r2, [r3, #0]
			d--;
 8003100:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003104:	3b01      	subs	r3, #1
 8003106:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			if (d == -1) d = 14;   // 14
 800310a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003112:	d102      	bne.n	800311a <screen0x01+0x266>
 8003114:	230e      	movs	r3, #14
 8003116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (int b = 38; b != -1; b--)      // 4-12-2024  it was b=41
 800311a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800311e:	3b01      	subs	r3, #1
 8003120:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003124:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d1dd      	bne.n	80030ea <screen0x01+0x236>
		}

		// TOP DOLLAR show top
	    // Draw Top bar area
		if(fullcolor) Foreground_color_256(color256_green);
 800312e:	4b36      	ldr	r3, [pc, #216]	; (8003208 <screen0x01+0x354>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <screen0x01+0x28a>
 8003136:	201c      	movs	r0, #28
 8003138:	f7ff f899 	bl	800226e <Foreground_color_256>
 800313c:	e002      	b.n	8003144 <screen0x01+0x290>
		else Foreground_color_256(MONOCHROME_COLOR);
 800313e:	201f      	movs	r0, #31
 8003140:	f7ff f895 	bl	800226e <Foreground_color_256>

		Background_color_256(color256_black);
 8003144:	2000      	movs	r0, #0
 8003146:	f7ff f8b4 	bl	80022b2 <Background_color_256>
		Line_Start_XY(58,90);  //       4-11-2024  it was 0, 0
 800314a:	215a      	movs	r1, #90	; 0x5a
 800314c:	203a      	movs	r0, #58	; 0x3a
 800314e:	f7fe fb41 	bl	80017d4 <Line_Start_XY>
	    Line_End_XY(92,1240);  //  Y,X  4-11-2024  it was 35, 1279   1215
 8003152:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8003156:	205c      	movs	r0, #92	; 0x5c
 8003158:	f7fe fb6c 	bl	8001834 <Line_End_XY>
	    Start_Square_Fill();
 800315c:	f7fe fc2a 	bl	80019b4 <Start_Square_Fill>

	    Foreground_color_256(color256_black);   // Background
 8003160:	2000      	movs	r0, #0
 8003162:	f7ff f884 	bl	800226e <Foreground_color_256>

	    if(fullcolor) Background_color_256(color256_green);   // Text
 8003166:	4b28      	ldr	r3, [pc, #160]	; (8003208 <screen0x01+0x354>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <screen0x01+0x2c2>
 800316e:	201c      	movs	r0, #28
 8003170:	f7ff f89f 	bl	80022b2 <Background_color_256>
 8003174:	e002      	b.n	800317c <screen0x01+0x2c8>
	    else Background_color_256(MONOCHROME_COLOR);
 8003176:	201f      	movs	r0, #31
 8003178:	f7ff f89b 	bl	80022b2 <Background_color_256>

	    Goto_Text_XY(58,90);  //  Y, X  4-11-2024  it was 0, 0   48
 800317c:	215a      	movs	r1, #90	; 0x5a
 800317e:	203a      	movs	r0, #58	; 0x3a
 8003180:	f7fe faf4 	bl	800176c <Goto_Text_XY>
		Show_String((char *)topText);
 8003184:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff f8b4 	bl	80022f6 <Show_String>

	    // Draw Bottom bar area
		if(fullcolor) Foreground_color_256(color256_green);
 800318e:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <screen0x01+0x354>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <screen0x01+0x2ea>
 8003196:	201c      	movs	r0, #28
 8003198:	f7ff f869 	bl	800226e <Foreground_color_256>
 800319c:	e002      	b.n	80031a4 <screen0x01+0x2f0>
		else Foreground_color_256(MONOCHROME_COLOR);
 800319e:	201f      	movs	r0, #31
 80031a0:	f7ff f865 	bl	800226e <Foreground_color_256>

		Background_color_256(color256_black);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7ff f884 	bl	80022b2 <Background_color_256>
		Line_Start_XY(288,90);
 80031aa:	215a      	movs	r1, #90	; 0x5a
 80031ac:	f44f 7090 	mov.w	r0, #288	; 0x120
 80031b0:	f7fe fb10 	bl	80017d4 <Line_Start_XY>
	    Line_End_XY(318,1240);  //  318
 80031b4:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 80031b8:	f44f 709f 	mov.w	r0, #318	; 0x13e
 80031bc:	f7fe fb3a 	bl	8001834 <Line_End_XY>
	    Start_Square_Fill();
 80031c0:	f7fe fbf8 	bl	80019b4 <Start_Square_Fill>

	    // TOP DOLLAR show bottom text
		Goto_Text_XY(286,90);       //  282,90
 80031c4:	215a      	movs	r1, #90	; 0x5a
 80031c6:	f44f 708f 	mov.w	r0, #286	; 0x11e
 80031ca:	f7fe facf 	bl	800176c <Goto_Text_XY>
		Foreground_color_256(color256_black);
 80031ce:	2000      	movs	r0, #0
 80031d0:	f7ff f84d 	bl	800226e <Foreground_color_256>

		if(fullcolor) Background_color_256(color256_green);   // Text
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <screen0x01+0x354>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <screen0x01+0x330>
 80031dc:	201c      	movs	r0, #28
 80031de:	f7ff f868 	bl	80022b2 <Background_color_256>
 80031e2:	e002      	b.n	80031ea <screen0x01+0x336>
	    else Background_color_256(MONOCHROME_COLOR);
 80031e4:	201f      	movs	r0, #31
 80031e6:	f7ff f864 	bl	80022b2 <Background_color_256>

		Show_String((char *)bottomText);
 80031ea:	463b      	mov	r3, r7
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff f882 	bl	80022f6 <Show_String>
	while(currentTask == 0)
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <screen0x01+0x360>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f43f af2d 	beq.w	8003056 <screen0x01+0x1a2>
	}
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	37b8      	adds	r7, #184	; 0xb8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000000 	.word	0x20000000
 800320c:	200007c8 	.word	0x200007c8
 8003210:	200006a0 	.word	0x200006a0
 8003214:	200007fa 	.word	0x200007fa

08003218 <screen0x02>:



void screen0x02(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
	// GOOD LUCK
	// Move it up 17 lines and over ?

	unsigned int     frameDelay		  = 70;
 800321e:	2346      	movs	r3, #70	; 0x46
 8003220:	613b      	str	r3, [r7, #16]
	unsigned int     colorChangeDelay = 500;
 8003222:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003226:	60fb      	str	r3, [r7, #12]
	unsigned int     colorChangeLoop  = 2;
 8003228:	2302      	movs	r3, #2
 800322a:	60bb      	str	r3, [r7, #8]
	unsigned int     yOffset          = 17;
 800322c:	2311      	movs	r3, #17
 800322e:	607b      	str	r3, [r7, #4]

	displayText[0] = 'G';  displayText[1] = 'O';  displayText[2] = 'O';  displayText[3] = 'D';
 8003230:	4bba      	ldr	r3, [pc, #744]	; (800351c <screen0x02+0x304>)
 8003232:	2247      	movs	r2, #71	; 0x47
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	4bb9      	ldr	r3, [pc, #740]	; (800351c <screen0x02+0x304>)
 8003238:	224f      	movs	r2, #79	; 0x4f
 800323a:	705a      	strb	r2, [r3, #1]
 800323c:	4bb7      	ldr	r3, [pc, #732]	; (800351c <screen0x02+0x304>)
 800323e:	224f      	movs	r2, #79	; 0x4f
 8003240:	709a      	strb	r2, [r3, #2]
 8003242:	4bb6      	ldr	r3, [pc, #728]	; (800351c <screen0x02+0x304>)
 8003244:	2244      	movs	r2, #68	; 0x44
 8003246:	70da      	strb	r2, [r3, #3]
	displayText[4] = ' ';  displayText[5] = 'L';  displayText[6] = 'U';  displayText[7] = 'C';
 8003248:	4bb4      	ldr	r3, [pc, #720]	; (800351c <screen0x02+0x304>)
 800324a:	2220      	movs	r2, #32
 800324c:	711a      	strb	r2, [r3, #4]
 800324e:	4bb3      	ldr	r3, [pc, #716]	; (800351c <screen0x02+0x304>)
 8003250:	224c      	movs	r2, #76	; 0x4c
 8003252:	715a      	strb	r2, [r3, #5]
 8003254:	4bb1      	ldr	r3, [pc, #708]	; (800351c <screen0x02+0x304>)
 8003256:	2255      	movs	r2, #85	; 0x55
 8003258:	719a      	strb	r2, [r3, #6]
 800325a:	4bb0      	ldr	r3, [pc, #704]	; (800351c <screen0x02+0x304>)
 800325c:	2243      	movs	r2, #67	; 0x43
 800325e:	71da      	strb	r2, [r3, #7]
	displayText[8] = 'K';  displayText[9] = '\0';
 8003260:	4bae      	ldr	r3, [pc, #696]	; (800351c <screen0x02+0x304>)
 8003262:	224b      	movs	r2, #75	; 0x4b
 8003264:	721a      	strb	r2, [r3, #8]
 8003266:	4bad      	ldr	r3, [pc, #692]	; (800351c <screen0x02+0x304>)
 8003268:	2200      	movs	r2, #0
 800326a:	725a      	strb	r2, [r3, #9]

    // Clear
	Foreground_color_256(color256_black);
 800326c:	2000      	movs	r0, #0
 800326e:	f7fe fffe 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8003272:	2000      	movs	r0, #0
 8003274:	f7ff f81d 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 8003278:	2100      	movs	r1, #0
 800327a:	2000      	movs	r0, #0
 800327c:	f7fe faaa 	bl	80017d4 <Line_Start_XY>
	Line_End_XY(399,1279);  //  Y,X
 8003280:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8003284:	f240 108f 	movw	r0, #399	; 0x18f
 8003288:	f7fe fad4 	bl	8001834 <Line_End_XY>
	Start_Square_Fill();
 800328c:	f7fe fb92 	bl	80019b4 <Start_Square_Fill>

	CGROM_Select_Genitop_FontROM();
 8003290:	f7fe fe33 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8003294:	f7fe ffbd 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	Font_Select_16x32_32x32();
 8003298:	f7fe fe63 	bl	8001f62 <Font_Select_16x32_32x32>
	Font_Background_select_Color();
 800329c:	f7fe febd 	bl	800201a <Font_Background_select_Color>
	Disable_Font_Alignment();
 80032a0:	f7fe fe8f 	bl	8001fc2 <Disable_Font_Alignment>
	currentTask = 0;
 80032a4:	4b9e      	ldr	r3, [pc, #632]	; (8003520 <screen0x02+0x308>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
	while(currentTask == 0)
 80032aa:	e126      	b.n	80034fa <screen0x02+0x2e2>
	{
		if(fullcolor) Foreground_color_256(color256_white);
 80032ac:	4b9d      	ldr	r3, [pc, #628]	; (8003524 <screen0x02+0x30c>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <screen0x02+0xa4>
 80032b4:	20ff      	movs	r0, #255	; 0xff
 80032b6:	f7fe ffda 	bl	800226e <Foreground_color_256>
 80032ba:	e002      	b.n	80032c2 <screen0x02+0xaa>
		else Foreground_color_256(MONOCHROME_COLOR);
 80032bc:	201f      	movs	r0, #31
 80032be:	f7fe ffd6 	bl	800226e <Foreground_color_256>
		Goto_Text_XY(145-yOffset,600);       //  Y, X  4-11-2024  it was 145, 600
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f1c3 0391 	rsb	r3, r3, #145	; 0x91
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f44f 7116 	mov.w	r1, #600	; 0x258
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe fa4b 	bl	800176c <Goto_Text_XY>
		Font_Width_X1();
 80032d6:	f7fe fecc 	bl	8002072 <Font_Width_X1>
		Font_Height_X2();
 80032da:	f7fe ff4c 	bl	8002176 <Font_Height_X2>
		Show_String(".... ....");
 80032de:	4892      	ldr	r0, [pc, #584]	; (8003528 <screen0x02+0x310>)
 80032e0:	f7ff f809 	bl	80022f6 <Show_String>
		if(currentTask) break;
 80032e4:	4b8e      	ldr	r3, [pc, #568]	; (8003520 <screen0x02+0x308>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f040 810c 	bne.w	8003506 <screen0x02+0x2ee>
		HAL_Delay(frameDelay);
 80032ee:	6938      	ldr	r0, [r7, #16]
 80032f0:	f005 f860 	bl	80083b4 <HAL_Delay>

//		Foreground_color_256(color256_white);
		Set_GTFont_Decoder(0x21);
 80032f4:	2021      	movs	r0, #33	; 0x21
 80032f6:	f7fe ffaa 	bl	800224e <Set_GTFont_Decoder>
		Goto_Text_XY(181-yOffset,555);       //  Y, X  4-11-2024  it was 181, 555
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	f1c3 03b5 	rsb	r3, r3, #181	; 0xb5
 8003302:	b29b      	uxth	r3, r3
 8003304:	f240 212b 	movw	r1, #555	; 0x22b
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe fa2f 	bl	800176c <Goto_Text_XY>
		Font_Width_X1();
 800330e:	f7fe feb0 	bl	8002072 <Font_Width_X1>
		Font_Height_X1();
 8003312:	f7fe ff16 	bl	8002142 <Font_Height_X1>
		Show_String((char *)displayText);
 8003316:	4881      	ldr	r0, [pc, #516]	; (800351c <screen0x02+0x304>)
 8003318:	f7fe ffed 	bl	80022f6 <Show_String>
		if(currentTask) break;
 800331c:	4b80      	ldr	r3, [pc, #512]	; (8003520 <screen0x02+0x308>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f040 80f2 	bne.w	800350a <screen0x02+0x2f2>
		HAL_Delay(frameDelay);
 8003326:	6938      	ldr	r0, [r7, #16]
 8003328:	f005 f844 	bl	80083b4 <HAL_Delay>
//		Show_String((char *)displayText);
//		if(currentTask) break;
//		HAL_Delay(frameDelay);

		//Foreground_color_256(color256_white);
		Background_color_256(color256_black);
 800332c:	2000      	movs	r0, #0
 800332e:	f7fe ffc0 	bl	80022b2 <Background_color_256>
		Goto_Text_XY(142-yOffset,456);       //  Y, X  4-11-2024  it was 142, 456
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f1c3 038e 	rsb	r3, r3, #142	; 0x8e
 800333a:	b29b      	uxth	r3, r3
 800333c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe fa13 	bl	800176c <Goto_Text_XY>
		Font_Width_X2();
 8003346:	f7fe feae 	bl	80020a6 <Font_Width_X2>
		Font_Height_X3();
 800334a:	f7fe ff2e 	bl	80021aa <Font_Height_X3>
		Show_String((char *)displayText);
 800334e:	4873      	ldr	r0, [pc, #460]	; (800351c <screen0x02+0x304>)
 8003350:	f7fe ffd1 	bl	80022f6 <Show_String>
		if(currentTask) break;
 8003354:	4b72      	ldr	r3, [pc, #456]	; (8003520 <screen0x02+0x308>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f040 80d8 	bne.w	800350e <screen0x02+0x2f6>
		HAL_Delay(frameDelay);
 800335e:	6938      	ldr	r0, [r7, #16]
 8003360:	f005 f828 	bl	80083b4 <HAL_Delay>

		//Foreground_color_256(color256_white);
		Background_color_256(color256_black);
 8003364:	2000      	movs	r0, #0
 8003366:	f7fe ffa4 	bl	80022b2 <Background_color_256>
		Goto_Text_XY(142-yOffset,350);       //  Y, X  4-11-2024  it was 142, 350
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	b29b      	uxth	r3, r3
 800336e:	f1c3 038e 	rsb	r3, r3, #142	; 0x8e
 8003372:	b29b      	uxth	r3, r3
 8003374:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003378:	4618      	mov	r0, r3
 800337a:	f7fe f9f7 	bl	800176c <Goto_Text_XY>
		Font_Width_X3();
 800337e:	f7fe feac 	bl	80020da <Font_Width_X3>
		Font_Height_X3();
 8003382:	f7fe ff12 	bl	80021aa <Font_Height_X3>
		Show_String((char *)displayText);
 8003386:	4865      	ldr	r0, [pc, #404]	; (800351c <screen0x02+0x304>)
 8003388:	f7fe ffb5 	bl	80022f6 <Show_String>
		if(currentTask) break;
 800338c:	4b64      	ldr	r3, [pc, #400]	; (8003520 <screen0x02+0x308>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f040 80be 	bne.w	8003512 <screen0x02+0x2fa>
		HAL_Delay(frameDelay);
 8003396:	6938      	ldr	r0, [r7, #16]
 8003398:	f005 f80c 	bl	80083b4 <HAL_Delay>


		// color256_white
		//Foreground_color_256(color256_white);
		Background_color_256(color256_black);
 800339c:	2000      	movs	r0, #0
 800339e:	f7fe ff88 	bl	80022b2 <Background_color_256>
		Goto_Text_XY(126-yOffset,260);       //  Y, X  4-11-2024  it was 126, 260
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f44f 7182 	mov.w	r1, #260	; 0x104
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe f9db 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 80033b6:	f7fe feaa 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 80033ba:	f7fe ff10 	bl	80021de <Font_Height_X4>
		Show_String((char *)displayText);
 80033be:	4857      	ldr	r0, [pc, #348]	; (800351c <screen0x02+0x304>)
 80033c0:	f7fe ff99 	bl	80022f6 <Show_String>
		if(currentTask) break;
 80033c4:	4b56      	ldr	r3, [pc, #344]	; (8003520 <screen0x02+0x308>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f040 80a4 	bne.w	8003516 <screen0x02+0x2fe>
		HAL_Delay(colorChangeDelay);
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f004 fff0 	bl	80083b4 <HAL_Delay>


		for (int l = 0; l < colorChangeLoop; l++)
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e06c      	b.n	80034b4 <screen0x02+0x29c>
		{
			// color256_red
			if(currentTask) break;
 80033da:	4b51      	ldr	r3, [pc, #324]	; (8003520 <screen0x02+0x308>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d16d      	bne.n	80034be <screen0x02+0x2a6>
			Goto_Text_XY(126-yOffset,260);       //  Y, X  4-11-2026  it was 126, 260
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f44f 7182 	mov.w	r1, #260	; 0x104
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe f9bb 	bl	800176c <Goto_Text_XY>
			if(fullcolor) Foreground_color_256(color256_red);
 80033f6:	4b4b      	ldr	r3, [pc, #300]	; (8003524 <screen0x02+0x30c>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <screen0x02+0x1ee>
 80033fe:	20e0      	movs	r0, #224	; 0xe0
 8003400:	f7fe ff35 	bl	800226e <Foreground_color_256>
 8003404:	e002      	b.n	800340c <screen0x02+0x1f4>
			else Foreground_color_256(MONOCHROME_COLOR);
 8003406:	201f      	movs	r0, #31
 8003408:	f7fe ff31 	bl	800226e <Foreground_color_256>

			Background_color_256(color256_black);
 800340c:	2000      	movs	r0, #0
 800340e:	f7fe ff50 	bl	80022b2 <Background_color_256>
			Show_String((char *)displayText);
 8003412:	4842      	ldr	r0, [pc, #264]	; (800351c <screen0x02+0x304>)
 8003414:	f7fe ff6f 	bl	80022f6 <Show_String>
			HAL_Delay(colorChangeDelay);
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f004 ffcb 	bl	80083b4 <HAL_Delay>
			if(currentTask) break;
 800341e:	4b40      	ldr	r3, [pc, #256]	; (8003520 <screen0x02+0x308>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d14d      	bne.n	80034c2 <screen0x02+0x2aa>
			// color256_white
			Goto_Text_XY(126-yOffset,260);       //  Y, X  4-11-2024  it was 126, 260
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	b29b      	uxth	r3, r3
 800342a:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 800342e:	b29b      	uxth	r3, r3
 8003430:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003434:	4618      	mov	r0, r3
 8003436:	f7fe f999 	bl	800176c <Goto_Text_XY>
			if(fullcolor) Foreground_color_256(color256_white);
 800343a:	4b3a      	ldr	r3, [pc, #232]	; (8003524 <screen0x02+0x30c>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <screen0x02+0x232>
 8003442:	20ff      	movs	r0, #255	; 0xff
 8003444:	f7fe ff13 	bl	800226e <Foreground_color_256>
 8003448:	e002      	b.n	8003450 <screen0x02+0x238>
			else Foreground_color_256(MONOCHROME_COLOR);
 800344a:	201f      	movs	r0, #31
 800344c:	f7fe ff0f 	bl	800226e <Foreground_color_256>

			Background_color_256(color256_black);
 8003450:	2000      	movs	r0, #0
 8003452:	f7fe ff2e 	bl	80022b2 <Background_color_256>
			Show_String((char *)displayText);
 8003456:	4831      	ldr	r0, [pc, #196]	; (800351c <screen0x02+0x304>)
 8003458:	f7fe ff4d 	bl	80022f6 <Show_String>
			HAL_Delay(colorChangeDelay);
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f004 ffa9 	bl	80083b4 <HAL_Delay>
			if(currentTask) break;
 8003462:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <screen0x02+0x308>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d12d      	bne.n	80034c6 <screen0x02+0x2ae>

			// color256_blue
			Goto_Text_XY(126-yOffset,260);       //  Y, X  4-11-2024  it was 126, 260
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	b29b      	uxth	r3, r3
 800346e:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 8003472:	b29b      	uxth	r3, r3
 8003474:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003478:	4618      	mov	r0, r3
 800347a:	f7fe f977 	bl	800176c <Goto_Text_XY>
			if(fullcolor) Foreground_color_256(color256_blue);
 800347e:	4b29      	ldr	r3, [pc, #164]	; (8003524 <screen0x02+0x30c>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <screen0x02+0x276>
 8003486:	2003      	movs	r0, #3
 8003488:	f7fe fef1 	bl	800226e <Foreground_color_256>
 800348c:	e002      	b.n	8003494 <screen0x02+0x27c>
			else Foreground_color_256(MONOCHROME_COLOR);
 800348e:	201f      	movs	r0, #31
 8003490:	f7fe feed 	bl	800226e <Foreground_color_256>

			Background_color_256(color256_black);
 8003494:	2000      	movs	r0, #0
 8003496:	f7fe ff0c 	bl	80022b2 <Background_color_256>
			Show_String((char *)displayText);
 800349a:	4820      	ldr	r0, [pc, #128]	; (800351c <screen0x02+0x304>)
 800349c:	f7fe ff2b 	bl	80022f6 <Show_String>
			HAL_Delay(colorChangeDelay);
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f004 ff87 	bl	80083b4 <HAL_Delay>
			if(currentTask) break;
 80034a6:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <screen0x02+0x308>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10d      	bne.n	80034ca <screen0x02+0x2b2>
		for (int l = 0; l < colorChangeLoop; l++)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	3301      	adds	r3, #1
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d88e      	bhi.n	80033da <screen0x02+0x1c2>
 80034bc:	e006      	b.n	80034cc <screen0x02+0x2b4>
			if(currentTask) break;
 80034be:	bf00      	nop
 80034c0:	e004      	b.n	80034cc <screen0x02+0x2b4>
			if(currentTask) break;
 80034c2:	bf00      	nop
 80034c4:	e002      	b.n	80034cc <screen0x02+0x2b4>
			if(currentTask) break;
 80034c6:	bf00      	nop
 80034c8:	e000      	b.n	80034cc <screen0x02+0x2b4>
			if(currentTask) break;
 80034ca:	bf00      	nop

		}

		if(currentTask) break;
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <screen0x02+0x308>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d12b      	bne.n	800352c <screen0x02+0x314>
		// Clear the screen
		Goto_Text_XY(126-yOffset,260);       //  Y, X  4-11-2024  it was 126, 260
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f44f 7182 	mov.w	r1, #260	; 0x104
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe f942 	bl	800176c <Goto_Text_XY>
		Foreground_color_256(color256_black);
 80034e8:	2000      	movs	r0, #0
 80034ea:	f7fe fec0 	bl	800226e <Foreground_color_256>
		Background_color_256(color256_black);
 80034ee:	2000      	movs	r0, #0
 80034f0:	f7fe fedf 	bl	80022b2 <Background_color_256>
		Show_String((char *)displayText);
 80034f4:	4809      	ldr	r0, [pc, #36]	; (800351c <screen0x02+0x304>)
 80034f6:	f7fe fefe 	bl	80022f6 <Show_String>
	while(currentTask == 0)
 80034fa:	4b09      	ldr	r3, [pc, #36]	; (8003520 <screen0x02+0x308>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f43f aed4 	beq.w	80032ac <screen0x02+0x94>

	}
}
 8003504:	e013      	b.n	800352e <screen0x02+0x316>
		if(currentTask) break;
 8003506:	bf00      	nop
 8003508:	e011      	b.n	800352e <screen0x02+0x316>
		if(currentTask) break;
 800350a:	bf00      	nop
 800350c:	e00f      	b.n	800352e <screen0x02+0x316>
		if(currentTask) break;
 800350e:	bf00      	nop
 8003510:	e00d      	b.n	800352e <screen0x02+0x316>
		if(currentTask) break;
 8003512:	bf00      	nop
 8003514:	e00b      	b.n	800352e <screen0x02+0x316>
		if(currentTask) break;
 8003516:	bf00      	nop
 8003518:	e009      	b.n	800352e <screen0x02+0x316>
 800351a:	bf00      	nop
 800351c:	200006a0 	.word	0x200006a0
 8003520:	200007fa 	.word	0x200007fa
 8003524:	20000000 	.word	0x20000000
 8003528:	0800c260 	.word	0x0800c260
		if(currentTask) break;
 800352c:	bf00      	nop
}
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop

08003538 <screen0x03>:


// On payline with max bet
void screen0x03(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af02      	add	r7, sp, #8
	unsigned int xOffset = 18;
 800353e:	2312      	movs	r3, #18
 8003540:	607b      	str	r3, [r7, #4]

	// Clear Screen
	Foreground_color_256(color256_black);
 8003542:	2000      	movs	r0, #0
 8003544:	f7fe fe93 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8003548:	2000      	movs	r0, #0
 800354a:	f7fe feb2 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 800354e:	2100      	movs	r1, #0
 8003550:	2000      	movs	r0, #0
 8003552:	f7fe f93f 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 8003556:	f240 41ff 	movw	r1, #1279	; 0x4ff
 800355a:	f240 108f 	movw	r0, #399	; 0x18f
 800355e:	f7fe f969 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 8003562:	f7fe fa27 	bl	80019b4 <Start_Square_Fill>

    BTE_logo_disp(55,100,3,480,264);  // NEW LOGO   4-11-2024  it was 50, 40, 3   4-12-2024 30,48,3
 8003566:	f44f 7384 	mov.w	r3, #264	; 0x108
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003570:	2203      	movs	r2, #3
 8003572:	2164      	movs	r1, #100	; 0x64
 8003574:	2037      	movs	r0, #55	; 0x37
 8003576:	f003 ffbf 	bl	80074f8 <BTE_logo_disp>

	CGROM_Select_Genitop_FontROM();
 800357a:	f7fe fcbe 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 800357e:	f7fe fe48 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	Font_Select_12x24_24x24();
 8003582:	f7fe fcd4 	bl	8001f2e <Font_Select_12x24_24x24>
	Set_GTFont_Decoder(0x21);
 8003586:	2021      	movs	r0, #33	; 0x21
 8003588:	f7fe fe61 	bl	800224e <Set_GTFont_Decoder>
	Font_Width_X2();
 800358c:	f7fe fd8b 	bl	80020a6 <Font_Width_X2>
	Font_Height_X3();
 8003590:	f7fe fe0b 	bl	80021aa <Font_Height_X3>

	Goto_Text_XY(44,624-xOffset);       //  Y, X  4-11-2024  it was 40, 624
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f5c3 731c 	rsb	r3, r3, #624	; 0x270
 800359c:	b29b      	uxth	r3, r3
 800359e:	4619      	mov	r1, r3
 80035a0:	202c      	movs	r0, #44	; 0x2c
 80035a2:	f7fe f8e3 	bl	800176c <Goto_Text_XY>

	if(fullcolor) Foreground_color_256(color256_white);
 80035a6:	4b18      	ldr	r3, [pc, #96]	; (8003608 <screen0x03+0xd0>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <screen0x03+0x7e>
 80035ae:	20ff      	movs	r0, #255	; 0xff
 80035b0:	f7fe fe5d 	bl	800226e <Foreground_color_256>
 80035b4:	e002      	b.n	80035bc <screen0x03+0x84>
	else Foreground_color_256(MONOCHROME_COLOR);
 80035b6:	201f      	movs	r0, #31
 80035b8:	f7fe fe59 	bl	800226e <Foreground_color_256>

	Background_color_256(color256_black);
 80035bc:	2000      	movs	r0, #0
 80035be:	f7fe fe78 	bl	80022b2 <Background_color_256>
	Show_String("ON  PAYLINE  WITH  MAX");
 80035c2:	4812      	ldr	r0, [pc, #72]	; (800360c <screen0x03+0xd4>)
 80035c4:	f7fe fe97 	bl	80022f6 <Show_String>
	Goto_Text_XY(140,640-xOffset);      //        4-11-2024  it was 160, 640
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f5c3 7320 	rsb	r3, r3, #640	; 0x280
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	4619      	mov	r1, r3
 80035d4:	208c      	movs	r0, #140	; 0x8c
 80035d6:	f7fe f8c9 	bl	800176c <Goto_Text_XY>
	Show_String("CREDITS  BET  AWARDS");
 80035da:	480d      	ldr	r0, [pc, #52]	; (8003610 <screen0x03+0xd8>)
 80035dc:	f7fe fe8b 	bl	80022f6 <Show_String>
	Goto_Text_XY(234,670-xOffset);      //        4-11-2024  it was 280, 670
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f5c3 7327 	rsb	r3, r3, #668	; 0x29c
 80035e8:	3302      	adds	r3, #2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	4619      	mov	r1, r3
 80035ee:	20ea      	movs	r0, #234	; 0xea
 80035f0:	f7fe f8bc 	bl	800176c <Goto_Text_XY>
	Show_String("TOP  DOLLAR  BONUS");
 80035f4:	4807      	ldr	r0, [pc, #28]	; (8003614 <screen0x03+0xdc>)
 80035f6:	f7fe fe7e 	bl	80022f6 <Show_String>
	currentTask = 0;
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <screen0x03+0xe0>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000000 	.word	0x20000000
 800360c:	0800c26c 	.word	0x0800c26c
 8003610:	0800c284 	.word	0x0800c284
 8003614:	0800c29c 	.word	0x0800c29c
 8003618:	200007fa 	.word	0x200007fa

0800361c <screen0x04>:


// 3 symbols on a played line...
void screen0x04(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af02      	add	r7, sp, #8
	unsigned int xOffset = -65;
 8003622:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8003626:	607b      	str	r3, [r7, #4]
//	unsigned int yOffset = 26;

	// Clear Screen
	Foreground_color_256(color256_black);
 8003628:	2000      	movs	r0, #0
 800362a:	f7fe fe20 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 800362e:	2000      	movs	r0, #0
 8003630:	f7fe fe3f 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 8003634:	2100      	movs	r1, #0
 8003636:	2000      	movs	r0, #0
 8003638:	f7fe f8cc 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 800363c:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8003640:	f240 108f 	movw	r0, #399	; 0x18f
 8003644:	f7fe f8f6 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 8003648:	f7fe f9b4 	bl	80019b4 <Start_Square_Fill>

    BTE_logo_disp(55,180,3,480,264);  // 4-11-2024  it was 40, 142, 3.. 4-12-2024 it was 30, 232, 3
 800364c:	f44f 7384 	mov.w	r3, #264	; 0x108
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003656:	2203      	movs	r2, #3
 8003658:	21b4      	movs	r1, #180	; 0xb4
 800365a:	2037      	movs	r0, #55	; 0x37
 800365c:	f003 ff4c 	bl	80074f8 <BTE_logo_disp>
	Select_Main_Window_8bpp();
 8003660:	f7fd fc74 	bl	8000f4c <Select_Main_Window_8bpp>
	Main_Image_Start_Address(layer_start_addr(10));
 8003664:	4834      	ldr	r0, [pc, #208]	; (8003738 <screen0x04+0x11c>)
 8003666:	f7fd feb3 	bl	80013d0 <Main_Image_Start_Address>
	Main_Image_Width(400);
 800366a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800366e:	f7fd fed2 	bl	8001416 <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 8003672:	2100      	movs	r1, #0
 8003674:	2000      	movs	r0, #0
 8003676:	f7fd fee5 	bl	8001444 <Main_Window_Start_XY>

	Canvas_Image_Start_address(layer_start_addr(10));
 800367a:	482f      	ldr	r0, [pc, #188]	; (8003738 <screen0x04+0x11c>)
 800367c:	f7fd ffbc 	bl	80015f8 <Canvas_Image_Start_address>
	Canvas_image_width(400);
 8003680:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003684:	f7fd ffdb 	bl	800163e <Canvas_image_width>
	Active_Window_XY(0,0);
 8003688:	2100      	movs	r1, #0
 800368a:	2000      	movs	r0, #0
 800368c:	f7fd ffee 	bl	800166c <Active_Window_XY>
	Active_Window_WH(400,1280);
 8003690:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8003694:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003698:	f7fe f810 	bl	80016bc <Active_Window_WH>
	if(fullcolor) Foreground_color_256(color256_white);
 800369c:	4b27      	ldr	r3, [pc, #156]	; (800373c <screen0x04+0x120>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <screen0x04+0x90>
 80036a4:	20ff      	movs	r0, #255	; 0xff
 80036a6:	f7fe fde2 	bl	800226e <Foreground_color_256>
 80036aa:	e002      	b.n	80036b2 <screen0x04+0x96>
	else Foreground_color_256(MONOCHROME_COLOR);
 80036ac:	201f      	movs	r0, #31
 80036ae:	f7fe fdde 	bl	800226e <Foreground_color_256>

	Background_color_256(color256_black);
 80036b2:	2000      	movs	r0, #0
 80036b4:	f7fe fdfd 	bl	80022b2 <Background_color_256>
	//Font_Select_16x32_32x32();
	Font_Select_12x24_24x24();
 80036b8:	f7fe fc39 	bl	8001f2e <Font_Select_12x24_24x24>
	Set_GTFont_Decoder(0x21);
 80036bc:	2021      	movs	r0, #33	; 0x21
 80036be:	f7fe fdc6 	bl	800224e <Set_GTFont_Decoder>
	Font_Width_X2();
 80036c2:	f7fe fcf0 	bl	80020a6 <Font_Width_X2>
	Font_Height_X4();
 80036c6:	f7fe fd8a 	bl	80021de <Font_Height_X4>
	Goto_Text_XY(38,678);       //  Y, X  4-11-2024  it was 20, 750
 80036ca:	f240 21a6 	movw	r1, #678	; 0x2a6
 80036ce:	2026      	movs	r0, #38	; 0x26
 80036d0:	f7fe f84c 	bl	800176c <Goto_Text_XY>
	Show_String("ON  A  PLAYED  LINE");
 80036d4:	481a      	ldr	r0, [pc, #104]	; (8003740 <screen0x04+0x124>)
 80036d6:	f7fe fe0e 	bl	80022f6 <Show_String>
	Goto_Text_XY(130,820);      //        4-11-2024  it was 142, 870
 80036da:	f44f 714d 	mov.w	r1, #820	; 0x334
 80036de:	2082      	movs	r0, #130	; 0x82
 80036e0:	f7fe f844 	bl	800176c <Goto_Text_XY>
	Show_String("AWARDS");
 80036e4:	4817      	ldr	r0, [pc, #92]	; (8003744 <screen0x04+0x128>)
 80036e6:	f7fe fe06 	bl	80022f6 <Show_String>
	Goto_Text_XY(220,730+xOffset);      //        4-11-2024  it was 260, 730
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	f203 23da 	addw	r3, r3, #730	; 0x2da
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	4619      	mov	r1, r3
 80036f6:	20dc      	movs	r0, #220	; 0xdc
 80036f8:	f7fe f838 	bl	800176c <Goto_Text_XY>
	Show_String("TOP  DOLLAR  BONUS");
 80036fc:	4812      	ldr	r0, [pc, #72]	; (8003748 <screen0x04+0x12c>)
 80036fe:	f7fe fdfa 	bl	80022f6 <Show_String>
	CGROM_Select_Genitop_FontROM();
 8003702:	f7fe fbfa 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8003706:	f7fe fd84 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	//Font_Select_12x24_24x24();
	Font_Select_16x32_32x32();
 800370a:	f7fe fc2a 	bl	8001f62 <Font_Select_16x32_32x32>
	Set_GTFont_Decoder(0x21);
 800370e:	2021      	movs	r0, #33	; 0x21
 8003710:	f7fe fd9d 	bl	800224e <Set_GTFont_Decoder>
	Font_Width_X4();
 8003714:	f7fe fcfb 	bl	800210e <Font_Width_X4>
	Font_Height_X4();
 8003718:	f7fe fd61 	bl	80021de <Font_Height_X4>
	Goto_Text_XY(113,108);       //        4-11-2024  it was 130, 60
 800371c:	216c      	movs	r1, #108	; 0x6c
 800371e:	2071      	movs	r0, #113	; 0x71
 8003720:	f7fe f824 	bl	800176c <Goto_Text_XY>
	Show_String("3");
 8003724:	4809      	ldr	r0, [pc, #36]	; (800374c <screen0x04+0x130>)
 8003726:	f7fe fde6 	bl	80022f6 <Show_String>
	currentTask = 0;
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <screen0x04+0x134>)
 800372c:	2200      	movs	r2, #0
 800372e:	701a      	strb	r2, [r3, #0]
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	004e2000 	.word	0x004e2000
 800373c:	20000000 	.word	0x20000000
 8003740:	0800c2b0 	.word	0x0800c2b0
 8003744:	0800c2c4 	.word	0x0800c2c4
 8003748:	0800c29c 	.word	0x0800c29c
 800374c:	0800c2cc 	.word	0x0800c2cc
 8003750:	200007fa 	.word	0x200007fa

08003754 <screen0x05>:


// TOP DOLLAR BONUS
void screen0x05(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
	int		x           = 90;
 800375a:	235a      	movs	r3, #90	; 0x5a
 800375c:	61fb      	str	r3, [r7, #28]
	int 	y           = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	61bb      	str	r3, [r7, #24]
	int     minx        = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
	int     miny        = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
	int     maxx        = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
	int     maxy        = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]
	int     scrollDelay = 2;
 8003772:	2302      	movs	r3, #2
 8003774:	603b      	str	r3, [r7, #0]
	uint8_t dx          = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	71fb      	strb	r3, [r7, #7]
	uint8_t dy          = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	71bb      	strb	r3, [r7, #6]

	// Clear Screen
	Foreground_color_256(color256_black);
 800377e:	2000      	movs	r0, #0
 8003780:	f7fe fd75 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8003784:	2000      	movs	r0, #0
 8003786:	f7fe fd94 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 800378a:	2100      	movs	r1, #0
 800378c:	2000      	movs	r0, #0
 800378e:	f7fe f821 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 8003792:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8003796:	f240 108f 	movw	r0, #399	; 0x18f
 800379a:	f7fe f84b 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 800379e:	f7fe f909 	bl	80019b4 <Start_Square_Fill>

	currentTask = 0;
 80037a2:	4b64      	ldr	r3, [pc, #400]	; (8003934 <screen0x05+0x1e0>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]

	Select_Main_Window_8bpp();
 80037a8:	f7fd fbd0 	bl	8000f4c <Select_Main_Window_8bpp>
	Foreground_color_256(color256_black);
 80037ac:	2000      	movs	r0, #0
 80037ae:	f7fe fd5e 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 80037b2:	2000      	movs	r0, #0
 80037b4:	f7fe fd7d 	bl	80022b2 <Background_color_256>

	Main_Image_Start_Address(layer_start_addr(0));
 80037b8:	2000      	movs	r0, #0
 80037ba:	f7fd fe09 	bl	80013d0 <Main_Image_Start_Address>

	VSCAN_T_to_B();
 80037be:	f7fd fc67 	bl	8001090 <VSCAN_T_to_B>
	Select_PIP1_Parameter();
 80037c2:	f7fd fbad 	bl	8000f20 <Select_PIP1_Parameter>
	Select_PIP1_Window_8bpp();//
 80037c6:	f7fd fbdb 	bl	8000f80 <Select_PIP1_Window_8bpp>
	PIP_Display_Start_XY(0,0);
 80037ca:	2100      	movs	r1, #0
 80037cc:	2000      	movs	r0, #0
 80037ce:	f7fd fe61 	bl	8001494 <PIP_Display_Start_XY>
	PIP_Image_Start_Address(layer_start_addr(1));
 80037d2:	f44f 20fa 	mov.w	r0, #512000	; 0x7d000
 80037d6:	f7fd fe85 	bl	80014e4 <PIP_Image_Start_Address>
	PIP_Image_Width(400);
 80037da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80037de:	f7fd fea4 	bl	800152a <PIP_Image_Width>
	PIP_Window_Image_Start_XY(0,0);
 80037e2:	2100      	movs	r1, #0
 80037e4:	2000      	movs	r0, #0
 80037e6:	f7fd feb7 	bl	8001558 <PIP_Window_Image_Start_XY>

	if(fullcolor)
 80037ea:	4b53      	ldr	r3, [pc, #332]	; (8003938 <screen0x05+0x1e4>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00e      	beq.n	8003810 <screen0x05+0xbc>
		{
		PIP_Window_Width_Height(198,360);
 80037f2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80037f6:	20c6      	movs	r0, #198	; 0xc6
 80037f8:	f7fd fed6 	bl	80015a8 <PIP_Window_Width_Height>
		minx = 30;
 80037fc:	231e      	movs	r3, #30
 80037fe:	617b      	str	r3, [r7, #20]
		maxx = 180;
 8003800:	23b4      	movs	r3, #180	; 0xb4
 8003802:	60fb      	str	r3, [r7, #12]
		miny = 30;
 8003804:	231e      	movs	r3, #30
 8003806:	613b      	str	r3, [r7, #16]
		maxy = 890;
 8003808:	f240 337a 	movw	r3, #890	; 0x37a
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	e00d      	b.n	800382c <screen0x05+0xd8>
		}
	else
		{
		PIP_Window_Width_Height(160,560);
 8003810:	f44f 710c 	mov.w	r1, #560	; 0x230
 8003814:	20a0      	movs	r0, #160	; 0xa0
 8003816:	f7fd fec7 	bl	80015a8 <PIP_Window_Width_Height>
		minx = 46;
 800381a:	232e      	movs	r3, #46	; 0x2e
 800381c:	617b      	str	r3, [r7, #20]
		maxx = 170;
 800381e:	23aa      	movs	r3, #170	; 0xaa
 8003820:	60fb      	str	r3, [r7, #12]
		miny = 90;
 8003822:	235a      	movs	r3, #90	; 0x5a
 8003824:	613b      	str	r3, [r7, #16]
		maxy = 600;
 8003826:	f44f 7316 	mov.w	r3, #600	; 0x258
 800382a:	60bb      	str	r3, [r7, #8]
		}

	if(currentTask == 0) Enable_PIP1();
 800382c:	4b41      	ldr	r3, [pc, #260]	; (8003934 <screen0x05+0x1e0>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <screen0x05+0xe4>
 8003834:	f7fd fb5e 	bl	8000ef4 <Enable_PIP1>
	if(currentTask == 0) HAL_Delay(50);
 8003838:	4b3e      	ldr	r3, [pc, #248]	; (8003934 <screen0x05+0x1e0>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d15d      	bne.n	80038fc <screen0x05+0x1a8>
 8003840:	2032      	movs	r0, #50	; 0x32
 8003842:	f004 fdb7 	bl	80083b4 <HAL_Delay>

	while(currentTask == 0)
 8003846:	e059      	b.n	80038fc <screen0x05+0x1a8>
	{
		if(currentTask) break;
 8003848:	4b3a      	ldr	r3, [pc, #232]	; (8003934 <screen0x05+0x1e0>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d15a      	bne.n	8003906 <screen0x05+0x1b2>
		PIP_Display_Start_XY(x,y);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	b29b      	uxth	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	b292      	uxth	r2, r2
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f7fd fe1a 	bl	8001494 <PIP_Display_Start_XY>
		if(currentTask) break;
 8003860:	4b34      	ldr	r3, [pc, #208]	; (8003934 <screen0x05+0x1e0>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d150      	bne.n	800390a <screen0x05+0x1b6>

		if(dx == 0) x++;
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <screen0x05+0x122>
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3301      	adds	r3, #1
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	e002      	b.n	800387c <screen0x05+0x128>
		else x--;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3b01      	subs	r3, #1
 800387a:	61fb      	str	r3, [r7, #28]

		if(currentTask) break;
 800387c:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <screen0x05+0x1e0>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d144      	bne.n	800390e <screen0x05+0x1ba>

		if(x > maxx) dx = 1;     // 4-16-2024  it was 170
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	429a      	cmp	r2, r3
 800388a:	dd02      	ble.n	8003892 <screen0x05+0x13e>
 800388c:	2301      	movs	r3, #1
 800388e:	71fb      	strb	r3, [r7, #7]
 8003890:	e005      	b.n	800389e <screen0x05+0x14a>
		else if(x < minx) dx = 0; // 4-16-2024  it was 46
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	429a      	cmp	r2, r3
 8003898:	da01      	bge.n	800389e <screen0x05+0x14a>
 800389a:	2300      	movs	r3, #0
 800389c:	71fb      	strb	r3, [r7, #7]

		if(currentTask) break;
 800389e:	4b25      	ldr	r3, [pc, #148]	; (8003934 <screen0x05+0x1e0>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d135      	bne.n	8003912 <screen0x05+0x1be>

		if(dy == 0) y++;
 80038a6:	79bb      	ldrb	r3, [r7, #6]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <screen0x05+0x160>
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	3301      	adds	r3, #1
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	e002      	b.n	80038ba <screen0x05+0x166>
		else y--;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	61bb      	str	r3, [r7, #24]

		if(currentTask) break;
 80038ba:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <screen0x05+0x1e0>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d129      	bne.n	8003916 <screen0x05+0x1c2>

		if(y > maxy) dy = 1;     // 4-16-2024  it was 600
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	dd02      	ble.n	80038d0 <screen0x05+0x17c>
 80038ca:	2301      	movs	r3, #1
 80038cc:	71bb      	strb	r3, [r7, #6]
 80038ce:	e005      	b.n	80038dc <screen0x05+0x188>
		else if(y < miny) dy = 0; // 4-16-2025  it was 90
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	da01      	bge.n	80038dc <screen0x05+0x188>
 80038d8:	2300      	movs	r3, #0
 80038da:	71bb      	strb	r3, [r7, #6]

		if(currentTask) break;
 80038dc:	4b15      	ldr	r3, [pc, #84]	; (8003934 <screen0x05+0x1e0>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d11a      	bne.n	800391a <screen0x05+0x1c6>

		if(currentTask == 0) HAL_Delay(scrollDelay);
 80038e4:	4b13      	ldr	r3, [pc, #76]	; (8003934 <screen0x05+0x1e0>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d103      	bne.n	80038f4 <screen0x05+0x1a0>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f004 fd60 	bl	80083b4 <HAL_Delay>

		if(currentTask) break;
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <screen0x05+0x1e0>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d110      	bne.n	800391e <screen0x05+0x1ca>
	while(currentTask == 0)
 80038fc:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <screen0x05+0x1e0>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0a1      	beq.n	8003848 <screen0x05+0xf4>
 8003904:	e00c      	b.n	8003920 <screen0x05+0x1cc>
		if(currentTask) break;
 8003906:	bf00      	nop
 8003908:	e00a      	b.n	8003920 <screen0x05+0x1cc>
		if(currentTask) break;
 800390a:	bf00      	nop
 800390c:	e008      	b.n	8003920 <screen0x05+0x1cc>
		if(currentTask) break;
 800390e:	bf00      	nop
 8003910:	e006      	b.n	8003920 <screen0x05+0x1cc>
		if(currentTask) break;
 8003912:	bf00      	nop
 8003914:	e004      	b.n	8003920 <screen0x05+0x1cc>
		if(currentTask) break;
 8003916:	bf00      	nop
 8003918:	e002      	b.n	8003920 <screen0x05+0x1cc>
		if(currentTask) break;
 800391a:	bf00      	nop
 800391c:	e000      	b.n	8003920 <screen0x05+0x1cc>
		if(currentTask) break;
 800391e:	bf00      	nop
	}

	VSCAN_B_to_T();
 8003920:	f7fd fbcc 	bl	80010bc <VSCAN_B_to_T>
	Main_Image_Start_Address(layer_start_addr(10));
 8003924:	4805      	ldr	r0, [pc, #20]	; (800393c <screen0x05+0x1e8>)
 8003926:	f7fd fd53 	bl	80013d0 <Main_Image_Start_Address>
}
 800392a:	bf00      	nop
 800392c:	3720      	adds	r7, #32
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	200007fa 	.word	0x200007fa
 8003938:	20000000 	.word	0x20000000
 800393c:	004e2000 	.word	0x004e2000

08003940 <screen0x06>:


// TEST SCREEN
void screen0x06(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
	// Just need to send this....  Clear screen is sent next.. and Cycles
	currentTask = 0;
 8003944:	4b06      	ldr	r3, [pc, #24]	; (8003960 <screen0x06+0x20>)
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]
	while(currentTask == 0)
 800394a:	e001      	b.n	8003950 <screen0x06+0x10>
		Color_Bar_ON();
 800394c:	f7fd fb5e 	bl	800100c <Color_Bar_ON>
	while(currentTask == 0)
 8003950:	4b03      	ldr	r3, [pc, #12]	; (8003960 <screen0x06+0x20>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f9      	beq.n	800394c <screen0x06+0xc>

}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200007fa 	.word	0x200007fa

08003964 <screen0x07>:


// PLAY TOP DOLLAR
void screen0x07(void)
{
 8003964:	b5b0      	push	{r4, r5, r7, lr}
 8003966:	b0ae      	sub	sp, #184	; 0xb8
 8003968:	af00      	add	r7, sp, #0
	int xOffset              = -20;
 800396a:	f06f 0313 	mvn.w	r3, #19
 800396e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	int yOffset				 = -20;
 8003972:	f06f 0313 	mvn.w	r3, #19
 8003976:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	int  i                   = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int  j                   = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int  playFrameDelay      = 10;
 8003986:	230a      	movs	r3, #10
 8003988:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int  topdollarFrameDelay = 20;
 800398c:	2314      	movs	r3, #20
 800398e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int  dx[numDollarSigns]  = {100,279,444,895,1040,1140,400,984,1090,150,1155,220};
 8003992:	4bc5      	ldr	r3, [pc, #788]	; (8003ca8 <screen0x07+0x344>)
 8003994:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8003998:	461d      	mov	r5, r3
 800399a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800399c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800399e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80039a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int  dy[numDollarSigns]  = {60,41,57,20,35,60,153,151,250,200,200,130};
 80039aa:	4bc0      	ldr	r3, [pc, #768]	; (8003cac <screen0x07+0x348>)
 80039ac:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80039b0:	461d      	mov	r5, r3
 80039b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80039be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int  dc[numDollarSigns]  = {0};
 80039c2:	f107 0310 	add.w	r3, r7, #16
 80039c6:	2230      	movs	r2, #48	; 0x30
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f007 fd7f 	bl	800b4ce <memset>
	char ds[numDollarSigns]  = {0x33,0x33,0x22,0x33,0x33,0x22,0x00,0x00,0x00,0x22,0x22,0x00};
 80039d0:	4ab7      	ldr	r2, [pc, #732]	; (8003cb0 <screen0x07+0x34c>)
 80039d2:	1d3b      	adds	r3, r7, #4
 80039d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80039d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	// This is for font size.  I predict you suggest the font  size ahahahaha
	// 0xAB		A is width and B is Height. 0 is minimum and 3 is maximum.

	CGROM_Select_Genitop_FontROM();
 80039da:	f7fe fa8e 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 80039de:	f7fe fc18 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	Font_Select_16x32_32x32();
 80039e2:	f7fe fabe 	bl	8001f62 <Font_Select_16x32_32x32>
	Set_GTFont_Decoder(0x21);
 80039e6:	2021      	movs	r0, #33	; 0x21
 80039e8:	f7fe fc31 	bl	800224e <Set_GTFont_Decoder>
	//Font_Background_select_Transparency();
	currentTask = 0;
 80039ec:	4bb1      	ldr	r3, [pc, #708]	; (8003cb4 <screen0x07+0x350>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
	while(currentTask == 0) {
 80039f2:	e369      	b.n	80040c8 <screen0x07+0x764>

	// Clear Screen
	Foreground_color_256(color256_black);
 80039f4:	2000      	movs	r0, #0
 80039f6:	f7fe fc3a 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 80039fa:	2000      	movs	r0, #0
 80039fc:	f7fe fc59 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 8003a00:	2100      	movs	r1, #0
 8003a02:	2000      	movs	r0, #0
 8003a04:	f7fd fee6 	bl	80017d4 <Line_Start_XY>
	Line_End_XY(399,1279);  //  Y,X
 8003a08:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8003a0c:	f240 108f 	movw	r0, #399	; 0x18f
 8003a10:	f7fd ff10 	bl	8001834 <Line_End_XY>
	Start_Square_Fill();
 8003a14:	f7fd ffce 	bl	80019b4 <Start_Square_Fill>

	// Draw $'s
	for(i = 0;i<numDollarSigns;i++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a1e:	e08f      	b.n	8003b40 <screen0x07+0x1dc>
	{
		//if(currentTask) break;
		dc[i] = rand()%0xff;
 8003a20:	f007 fc12 	bl	800b248 <rand>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4ba4      	ldr	r3, [pc, #656]	; (8003cb8 <screen0x07+0x354>)
 8003a28:	fb83 1302 	smull	r1, r3, r3, r2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	11d9      	asrs	r1, r3, #7
 8003a30:	17d3      	asrs	r3, r2, #31
 8003a32:	1ac9      	subs	r1, r1, r3
 8003a34:	460b      	mov	r3, r1
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	1a5b      	subs	r3, r3, r1
 8003a3a:	1ad1      	subs	r1, r2, r3
 8003a3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	33b8      	adds	r3, #184	; 0xb8
 8003a44:	443b      	add	r3, r7
 8003a46:	f843 1ca8 	str.w	r1, [r3, #-168]
		Goto_Text_XY(dy[i],dx[i]);
 8003a4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	33b8      	adds	r3, #184	; 0xb8
 8003a52:	443b      	add	r3, r7
 8003a54:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	33b8      	adds	r3, #184	; 0xb8
 8003a62:	443b      	add	r3, r7
 8003a64:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	f7fd fe7d 	bl	800176c <Goto_Text_XY>
		if(fullcolor) Foreground_color_256(dc[i]);
 8003a72:	4b92      	ldr	r3, [pc, #584]	; (8003cbc <screen0x07+0x358>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <screen0x07+0x12e>
 8003a7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	33b8      	adds	r3, #184	; 0xb8
 8003a82:	443b      	add	r3, r7
 8003a84:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fbef 	bl	800226e <Foreground_color_256>
 8003a90:	e00e      	b.n	8003ab0 <screen0x07+0x14c>
		else Foreground_color_256(dc[i] > 0x0f ? MONOCHROME_COLOR:color256_black);
 8003a92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	33b8      	adds	r3, #184	; 0xb8
 8003a9a:	443b      	add	r3, r7
 8003a9c:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003aa0:	2b0f      	cmp	r3, #15
 8003aa2:	dd01      	ble.n	8003aa8 <screen0x07+0x144>
 8003aa4:	231f      	movs	r3, #31
 8003aa6:	e000      	b.n	8003aaa <screen0x07+0x146>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe fbdf 	bl	800226e <Foreground_color_256>
		switch(ds[i]>>4)
 8003ab0:	1d3a      	adds	r2, r7, #4
 8003ab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ab6:	4413      	add	r3, r2
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d816      	bhi.n	8003af0 <screen0x07+0x18c>
 8003ac2:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <screen0x07+0x164>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003ad9 	.word	0x08003ad9
 8003acc:	08003adf 	.word	0x08003adf
 8003ad0:	08003ae5 	.word	0x08003ae5
 8003ad4:	08003aeb 	.word	0x08003aeb
		{
		case 0:		Font_Width_X1();			break;
 8003ad8:	f7fe facb 	bl	8002072 <Font_Width_X1>
 8003adc:	e008      	b.n	8003af0 <screen0x07+0x18c>
		case 1:		Font_Width_X2();			break;
 8003ade:	f7fe fae2 	bl	80020a6 <Font_Width_X2>
 8003ae2:	e005      	b.n	8003af0 <screen0x07+0x18c>
		case 2:		Font_Width_X3();			break;
 8003ae4:	f7fe faf9 	bl	80020da <Font_Width_X3>
 8003ae8:	e002      	b.n	8003af0 <screen0x07+0x18c>
		case 3:		Font_Width_X4();			break;
 8003aea:	f7fe fb10 	bl	800210e <Font_Width_X4>
 8003aee:	bf00      	nop
		}
		switch(ds[i]&0x0f)
 8003af0:	1d3a      	adds	r2, r7, #4
 8003af2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003af6:	4413      	add	r3, r2
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d816      	bhi.n	8003b30 <screen0x07+0x1cc>
 8003b02:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <screen0x07+0x1a4>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b1f 	.word	0x08003b1f
 8003b10:	08003b25 	.word	0x08003b25
 8003b14:	08003b2b 	.word	0x08003b2b
		{
		case 0:		Font_Height_X1();			break;
 8003b18:	f7fe fb13 	bl	8002142 <Font_Height_X1>
 8003b1c:	e008      	b.n	8003b30 <screen0x07+0x1cc>
		case 1:		Font_Height_X2();			break;
 8003b1e:	f7fe fb2a 	bl	8002176 <Font_Height_X2>
 8003b22:	e005      	b.n	8003b30 <screen0x07+0x1cc>
		case 2:		Font_Height_X3();			break;
 8003b24:	f7fe fb41 	bl	80021aa <Font_Height_X3>
 8003b28:	e002      	b.n	8003b30 <screen0x07+0x1cc>
		case 3:		Font_Height_X4();			break;
 8003b2a:	f7fe fb58 	bl	80021de <Font_Height_X4>
 8003b2e:	bf00      	nop
		}
		Show_String("$");
 8003b30:	4863      	ldr	r0, [pc, #396]	; (8003cc0 <screen0x07+0x35c>)
 8003b32:	f7fe fbe0 	bl	80022f6 <Show_String>
	for(i = 0;i<numDollarSigns;i++)
 8003b36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b44:	2b0b      	cmp	r3, #11
 8003b46:	f77f af6b 	ble.w	8003a20 <screen0x07+0xbc>
	}

		Font_Width_X4();
 8003b4a:	f7fe fae0 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8003b4e:	f7fe fb46 	bl	80021de <Font_Height_X4>
		for(j = 0;j<60;j+=2)
 8003b52:	2300      	movs	r3, #0
 8003b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b58:	e0f6      	b.n	8003d48 <screen0x07+0x3e4>
		{
			// Clear Region PLAY
			//if(currentTask) break;
			Foreground_color_256(color256_black);
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	f7fe fb87 	bl	800226e <Foreground_color_256>
			Background_color_256(color256_black);
 8003b60:	2000      	movs	r0, #0
 8003b62:	f7fe fba6 	bl	80022b2 <Background_color_256>
			Line_Start_XY(0,540+xOffset);
 8003b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	4619      	mov	r1, r3
 8003b74:	2000      	movs	r0, #0
 8003b76:	f7fd fe2d 	bl	80017d4 <Line_Start_XY>
			Line_End_XY(180, 870+xOffset);  //  Y,X
 8003b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	f203 3366 	addw	r3, r3, #870	; 0x366
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	4619      	mov	r1, r3
 8003b88:	20b4      	movs	r0, #180	; 0xb4
 8003b8a:	f7fd fe53 	bl	8001834 <Line_End_XY>
			Start_Square_Fill();
 8003b8e:	f7fd ff11 	bl	80019b4 <Start_Square_Fill>


			for(i = 0;i<numDollarSigns;i++)
 8003b92:	2300      	movs	r3, #0
 8003b94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b98:	e09f      	b.n	8003cda <screen0x07+0x376>
			{
				//if(currentTask) break;
				dc[i] = rand()%0xff;
 8003b9a:	f007 fb55 	bl	800b248 <rand>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	4b45      	ldr	r3, [pc, #276]	; (8003cb8 <screen0x07+0x354>)
 8003ba2:	fb83 1302 	smull	r1, r3, r3, r2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	11d9      	asrs	r1, r3, #7
 8003baa:	17d3      	asrs	r3, r2, #31
 8003bac:	1ac9      	subs	r1, r1, r3
 8003bae:	460b      	mov	r3, r1
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	1a5b      	subs	r3, r3, r1
 8003bb4:	1ad1      	subs	r1, r2, r3
 8003bb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	33b8      	adds	r3, #184	; 0xb8
 8003bbe:	443b      	add	r3, r7
 8003bc0:	f843 1ca8 	str.w	r1, [r3, #-168]
				Goto_Text_XY(dy[i],dx[i]);
 8003bc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	33b8      	adds	r3, #184	; 0xb8
 8003bcc:	443b      	add	r3, r7
 8003bce:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	33b8      	adds	r3, #184	; 0xb8
 8003bdc:	443b      	add	r3, r7
 8003bde:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	4619      	mov	r1, r3
 8003be6:	4610      	mov	r0, r2
 8003be8:	f7fd fdc0 	bl	800176c <Goto_Text_XY>
				if(fullcolor) Foreground_color_256(dc[i]);
 8003bec:	4b33      	ldr	r3, [pc, #204]	; (8003cbc <screen0x07+0x358>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00b      	beq.n	8003c0c <screen0x07+0x2a8>
 8003bf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	33b8      	adds	r3, #184	; 0xb8
 8003bfc:	443b      	add	r3, r7
 8003bfe:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fe fb32 	bl	800226e <Foreground_color_256>
 8003c0a:	e00e      	b.n	8003c2a <screen0x07+0x2c6>
				else Foreground_color_256(dc[i] > 0x0f ? MONOCHROME_COLOR:color256_black);
 8003c0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	33b8      	adds	r3, #184	; 0xb8
 8003c14:	443b      	add	r3, r7
 8003c16:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003c1a:	2b0f      	cmp	r3, #15
 8003c1c:	dd01      	ble.n	8003c22 <screen0x07+0x2be>
 8003c1e:	231f      	movs	r3, #31
 8003c20:	e000      	b.n	8003c24 <screen0x07+0x2c0>
 8003c22:	2300      	movs	r3, #0
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fe fb22 	bl	800226e <Foreground_color_256>
				switch(ds[i]>>4)
 8003c2a:	1d3a      	adds	r2, r7, #4
 8003c2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c30:	4413      	add	r3, r2
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d817      	bhi.n	8003c6c <screen0x07+0x308>
 8003c3c:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <screen0x07+0x2e0>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08003c55 	.word	0x08003c55
 8003c48:	08003c5b 	.word	0x08003c5b
 8003c4c:	08003c61 	.word	0x08003c61
 8003c50:	08003c67 	.word	0x08003c67
				{
				case 0:		Font_Width_X1();			break;
 8003c54:	f7fe fa0d 	bl	8002072 <Font_Width_X1>
 8003c58:	e008      	b.n	8003c6c <screen0x07+0x308>
				case 1:		Font_Width_X2();			break;
 8003c5a:	f7fe fa24 	bl	80020a6 <Font_Width_X2>
 8003c5e:	e005      	b.n	8003c6c <screen0x07+0x308>
				case 2:		Font_Width_X3();			break;
 8003c60:	f7fe fa3b 	bl	80020da <Font_Width_X3>
 8003c64:	e002      	b.n	8003c6c <screen0x07+0x308>
				case 3:		Font_Width_X4();			break;
 8003c66:	f7fe fa52 	bl	800210e <Font_Width_X4>
 8003c6a:	bf00      	nop
				}
				switch(ds[i]&0x0f)
 8003c6c:	1d3a      	adds	r2, r7, #4
 8003c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c72:	4413      	add	r3, r2
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d825      	bhi.n	8003cca <screen0x07+0x366>
 8003c7e:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <screen0x07+0x320>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003c95 	.word	0x08003c95
 8003c88:	08003c9b 	.word	0x08003c9b
 8003c8c:	08003ca1 	.word	0x08003ca1
 8003c90:	08003cc5 	.word	0x08003cc5
				{
				case 0:		Font_Height_X1();			break;
 8003c94:	f7fe fa55 	bl	8002142 <Font_Height_X1>
 8003c98:	e017      	b.n	8003cca <screen0x07+0x366>
				case 1:		Font_Height_X2();			break;
 8003c9a:	f7fe fa6c 	bl	8002176 <Font_Height_X2>
 8003c9e:	e014      	b.n	8003cca <screen0x07+0x366>
				case 2:		Font_Height_X3();			break;
 8003ca0:	f7fe fa83 	bl	80021aa <Font_Height_X3>
 8003ca4:	e011      	b.n	8003cca <screen0x07+0x366>
 8003ca6:	bf00      	nop
 8003ca8:	0800c2e8 	.word	0x0800c2e8
 8003cac:	0800c318 	.word	0x0800c318
 8003cb0:	0800c348 	.word	0x0800c348
 8003cb4:	200007fa 	.word	0x200007fa
 8003cb8:	80808081 	.word	0x80808081
 8003cbc:	20000000 	.word	0x20000000
 8003cc0:	0800c2d0 	.word	0x0800c2d0
				case 3:		Font_Height_X4();			break;
 8003cc4:	f7fe fa8b 	bl	80021de <Font_Height_X4>
 8003cc8:	bf00      	nop
				}
				Show_String("$");
 8003cca:	48ca      	ldr	r0, [pc, #808]	; (8003ff4 <screen0x07+0x690>)
 8003ccc:	f7fe fb13 	bl	80022f6 <Show_String>
			for(i = 0;i<numDollarSigns;i++)
 8003cd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003cde:	2b0b      	cmp	r3, #11
 8003ce0:	f77f af5b 	ble.w	8003b9a <screen0x07+0x236>
			}

			Font_Width_X4();
 8003ce4:	f7fe fa13 	bl	800210e <Font_Width_X4>
			Font_Height_X4();
 8003ce8:	f7fe fa79 	bl	80021de <Font_Height_X4>
			if(fullcolor) Foreground_color_256(color256_white);
 8003cec:	4bc2      	ldr	r3, [pc, #776]	; (8003ff8 <screen0x07+0x694>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <screen0x07+0x398>
 8003cf4:	20ff      	movs	r0, #255	; 0xff
 8003cf6:	f7fe faba 	bl	800226e <Foreground_color_256>
 8003cfa:	e002      	b.n	8003d02 <screen0x07+0x39e>
			else Foreground_color_256(MONOCHROME_COLOR);
 8003cfc:	201f      	movs	r0, #31
 8003cfe:	f7fe fab6 	bl	800226e <Foreground_color_256>

			Goto_Text_XY(j+yOffset,535+xOffset);
 8003d02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	4413      	add	r3, r2
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	f203 2317 	addw	r3, r3, #535	; 0x217
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4610      	mov	r0, r2
 8003d22:	f7fd fd23 	bl	800176c <Goto_Text_XY>
			Show_String("PLAY");
 8003d26:	48b5      	ldr	r0, [pc, #724]	; (8003ffc <screen0x07+0x698>)
 8003d28:	f7fe fae5 	bl	80022f6 <Show_String>
			if(currentTask != 0) break;
 8003d2c:	4bb4      	ldr	r3, [pc, #720]	; (8004000 <screen0x07+0x69c>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10f      	bne.n	8003d54 <screen0x07+0x3f0>
			HAL_Delay(playFrameDelay);
 8003d34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f004 fb3b 	bl	80083b4 <HAL_Delay>
		for(j = 0;j<60;j+=2)
 8003d3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d42:	3302      	adds	r3, #2
 8003d44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d4c:	2b3b      	cmp	r3, #59	; 0x3b
 8003d4e:	f77f af04 	ble.w	8003b5a <screen0x07+0x1f6>
 8003d52:	e000      	b.n	8003d56 <screen0x07+0x3f2>
			if(currentTask != 0) break;
 8003d54:	bf00      	nop
		}
		if(currentTask != 0) break;
 8003d56:	4baa      	ldr	r3, [pc, #680]	; (8004000 <screen0x07+0x69c>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f040 81ba 	bne.w	80040d4 <screen0x07+0x770>
		//if(currentTask) break;
		for(j = 0; j < 200; j+=10)       //  Change J from 200 to 220??
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d66:	e0e8      	b.n	8003f3a <screen0x07+0x5d6>
		{
			//if(currentTask) break;
			// Clear Region TOP DOLLAR
			Foreground_color_256(color256_black);
 8003d68:	2000      	movs	r0, #0
 8003d6a:	f7fe fa80 	bl	800226e <Foreground_color_256>
			Background_color_256(color256_black);
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f7fe fa9f 	bl	80022b2 <Background_color_256>
			Line_Start_XY(200,240+xOffset);
 8003d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	33f0      	adds	r3, #240	; 0xf0
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	4619      	mov	r1, r3
 8003d80:	20c8      	movs	r0, #200	; 0xc8
 8003d82:	f7fd fd27 	bl	80017d4 <Line_Start_XY>
			Line_End_XY(400, 1080+xOffset);  //  Y,X
 8003d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	4619      	mov	r1, r3
 8003d94:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003d98:	f7fd fd4c 	bl	8001834 <Line_End_XY>
			Start_Square_Fill();
 8003d9c:	f7fd fe0a 	bl	80019b4 <Start_Square_Fill>

			for(i = 0; i < numDollarSigns; i++)
 8003da0:	2300      	movs	r3, #0
 8003da2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003da6:	e08f      	b.n	8003ec8 <screen0x07+0x564>
			{
				//if(currentTask) break;
				dc[i] = rand()%0xff;
 8003da8:	f007 fa4e 	bl	800b248 <rand>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b95      	ldr	r3, [pc, #596]	; (8004004 <screen0x07+0x6a0>)
 8003db0:	fb83 1302 	smull	r1, r3, r3, r2
 8003db4:	4413      	add	r3, r2
 8003db6:	11d9      	asrs	r1, r3, #7
 8003db8:	17d3      	asrs	r3, r2, #31
 8003dba:	1ac9      	subs	r1, r1, r3
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	1a5b      	subs	r3, r3, r1
 8003dc2:	1ad1      	subs	r1, r2, r3
 8003dc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	33b8      	adds	r3, #184	; 0xb8
 8003dcc:	443b      	add	r3, r7
 8003dce:	f843 1ca8 	str.w	r1, [r3, #-168]
				Goto_Text_XY(dy[i],dx[i]);
 8003dd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	33b8      	adds	r3, #184	; 0xb8
 8003dda:	443b      	add	r3, r7
 8003ddc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	33b8      	adds	r3, #184	; 0xb8
 8003dea:	443b      	add	r3, r7
 8003dec:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f7fd fcb9 	bl	800176c <Goto_Text_XY>
				if(fullcolor) Foreground_color_256(dc[i]);
 8003dfa:	4b7f      	ldr	r3, [pc, #508]	; (8003ff8 <screen0x07+0x694>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <screen0x07+0x4b6>
 8003e02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	33b8      	adds	r3, #184	; 0xb8
 8003e0a:	443b      	add	r3, r7
 8003e0c:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fa2b 	bl	800226e <Foreground_color_256>
 8003e18:	e00e      	b.n	8003e38 <screen0x07+0x4d4>
				else Foreground_color_256(dc[i] > 0x0f ? MONOCHROME_COLOR:color256_black);
 8003e1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	33b8      	adds	r3, #184	; 0xb8
 8003e22:	443b      	add	r3, r7
 8003e24:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003e28:	2b0f      	cmp	r3, #15
 8003e2a:	dd01      	ble.n	8003e30 <screen0x07+0x4cc>
 8003e2c:	231f      	movs	r3, #31
 8003e2e:	e000      	b.n	8003e32 <screen0x07+0x4ce>
 8003e30:	2300      	movs	r3, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe fa1b 	bl	800226e <Foreground_color_256>

				switch(ds[i]>>4)
 8003e38:	1d3a      	adds	r2, r7, #4
 8003e3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e3e:	4413      	add	r3, r2
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d816      	bhi.n	8003e78 <screen0x07+0x514>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <screen0x07+0x4ec>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e61 	.word	0x08003e61
 8003e54:	08003e67 	.word	0x08003e67
 8003e58:	08003e6d 	.word	0x08003e6d
 8003e5c:	08003e73 	.word	0x08003e73
				{
				case 0:		Font_Width_X1();			break;
 8003e60:	f7fe f907 	bl	8002072 <Font_Width_X1>
 8003e64:	e008      	b.n	8003e78 <screen0x07+0x514>
				case 1:		Font_Width_X2();			break;
 8003e66:	f7fe f91e 	bl	80020a6 <Font_Width_X2>
 8003e6a:	e005      	b.n	8003e78 <screen0x07+0x514>
				case 2:		Font_Width_X3();			break;
 8003e6c:	f7fe f935 	bl	80020da <Font_Width_X3>
 8003e70:	e002      	b.n	8003e78 <screen0x07+0x514>
				case 3:		Font_Width_X4();			break;
 8003e72:	f7fe f94c 	bl	800210e <Font_Width_X4>
 8003e76:	bf00      	nop
				}
				switch(ds[i]&0x0f)
 8003e78:	1d3a      	adds	r2, r7, #4
 8003e7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e7e:	4413      	add	r3, r2
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d816      	bhi.n	8003eb8 <screen0x07+0x554>
 8003e8a:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <screen0x07+0x52c>)
 8003e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e90:	08003ea1 	.word	0x08003ea1
 8003e94:	08003ea7 	.word	0x08003ea7
 8003e98:	08003ead 	.word	0x08003ead
 8003e9c:	08003eb3 	.word	0x08003eb3
				{
				case 0:		Font_Height_X1();			break;
 8003ea0:	f7fe f94f 	bl	8002142 <Font_Height_X1>
 8003ea4:	e008      	b.n	8003eb8 <screen0x07+0x554>
				case 1:		Font_Height_X2();			break;
 8003ea6:	f7fe f966 	bl	8002176 <Font_Height_X2>
 8003eaa:	e005      	b.n	8003eb8 <screen0x07+0x554>
				case 2:		Font_Height_X3();			break;
 8003eac:	f7fe f97d 	bl	80021aa <Font_Height_X3>
 8003eb0:	e002      	b.n	8003eb8 <screen0x07+0x554>
				case 3:		Font_Height_X4();			break;
 8003eb2:	f7fe f994 	bl	80021de <Font_Height_X4>
 8003eb6:	bf00      	nop
				}
				Show_String("$");
 8003eb8:	484e      	ldr	r0, [pc, #312]	; (8003ff4 <screen0x07+0x690>)
 8003eba:	f7fe fa1c 	bl	80022f6 <Show_String>
			for(i = 0; i < numDollarSigns; i++)
 8003ebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ec8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ecc:	2b0b      	cmp	r3, #11
 8003ece:	f77f af6b 	ble.w	8003da8 <screen0x07+0x444>
			}

			if(fullcolor) Foreground_color_256(color256_white);
 8003ed2:	4b49      	ldr	r3, [pc, #292]	; (8003ff8 <screen0x07+0x694>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <screen0x07+0x57e>
 8003eda:	20ff      	movs	r0, #255	; 0xff
 8003edc:	f7fe f9c7 	bl	800226e <Foreground_color_256>
 8003ee0:	e002      	b.n	8003ee8 <screen0x07+0x584>
			else Foreground_color_256(MONOCHROME_COLOR);
 8003ee2:	201f      	movs	r0, #31
 8003ee4:	f7fe f9c3 	bl	800226e <Foreground_color_256>

			Font_Width_X4();
 8003ee8:	f7fe f911 	bl	800210e <Font_Width_X4>
			Font_Height_X4();
 8003eec:	f7fe f977 	bl	80021de <Font_Height_X4>

			Goto_Text_XY(((390-j)+yOffset),250+xOffset);
 8003ef0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	33fa      	adds	r3, #250	; 0xfa
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	4619      	mov	r1, r3
 8003f12:	4610      	mov	r0, r2
 8003f14:	f7fd fc2a 	bl	800176c <Goto_Text_XY>
			Show_String("TOP DOLLAR");
 8003f18:	483b      	ldr	r0, [pc, #236]	; (8004008 <screen0x07+0x6a4>)
 8003f1a:	f7fe f9ec 	bl	80022f6 <Show_String>
			if(currentTask != 0) break;
 8003f1e:	4b38      	ldr	r3, [pc, #224]	; (8004000 <screen0x07+0x69c>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10f      	bne.n	8003f46 <screen0x07+0x5e2>
			HAL_Delay(topdollarFrameDelay);
 8003f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f004 fa42 	bl	80083b4 <HAL_Delay>
		for(j = 0; j < 200; j+=10)       //  Change J from 200 to 220??
 8003f30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f34:	330a      	adds	r3, #10
 8003f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f3e:	2bc7      	cmp	r3, #199	; 0xc7
 8003f40:	f77f af12 	ble.w	8003d68 <screen0x07+0x404>
 8003f44:	e000      	b.n	8003f48 <screen0x07+0x5e4>
			if(currentTask != 0) break;
 8003f46:	bf00      	nop
		}
		if(currentTask != 0) break;
 8003f48:	4b2d      	ldr	r3, [pc, #180]	; (8004000 <screen0x07+0x69c>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f040 80c3 	bne.w	80040d8 <screen0x07+0x774>
		for(j = 0;j<110;j++)
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f58:	e0b1      	b.n	80040be <screen0x07+0x75a>
		{
			if(currentTask != 0) break;
 8003f5a:	4b29      	ldr	r3, [pc, #164]	; (8004000 <screen0x07+0x69c>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d000      	beq.n	8003f64 <screen0x07+0x600>
 8003f62:	e0b1      	b.n	80040c8 <screen0x07+0x764>
			//if(currentTask) break;
			for(i = 0;i<numDollarSigns;i++)
 8003f64:	2300      	movs	r3, #0
 8003f66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f6a:	e09b      	b.n	80040a4 <screen0x07+0x740>
			{
				dc[i] = rand()%0xff;
 8003f6c:	f007 f96c 	bl	800b248 <rand>
 8003f70:	4602      	mov	r2, r0
 8003f72:	4b24      	ldr	r3, [pc, #144]	; (8004004 <screen0x07+0x6a0>)
 8003f74:	fb83 1302 	smull	r1, r3, r3, r2
 8003f78:	4413      	add	r3, r2
 8003f7a:	11d9      	asrs	r1, r3, #7
 8003f7c:	17d3      	asrs	r3, r2, #31
 8003f7e:	1ac9      	subs	r1, r1, r3
 8003f80:	460b      	mov	r3, r1
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	1a5b      	subs	r3, r3, r1
 8003f86:	1ad1      	subs	r1, r2, r3
 8003f88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	33b8      	adds	r3, #184	; 0xb8
 8003f90:	443b      	add	r3, r7
 8003f92:	f843 1ca8 	str.w	r1, [r3, #-168]
				Goto_Text_XY(dy[i],dx[i]);
 8003f96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	33b8      	adds	r3, #184	; 0xb8
 8003f9e:	443b      	add	r3, r7
 8003fa0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	33b8      	adds	r3, #184	; 0xb8
 8003fae:	443b      	add	r3, r7
 8003fb0:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f7fd fbd7 	bl	800176c <Goto_Text_XY>
				if(fullcolor) Foreground_color_256(dc[i]);
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <screen0x07+0x694>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <screen0x07+0x67a>
 8003fc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	33b8      	adds	r3, #184	; 0xb8
 8003fce:	443b      	add	r3, r7
 8003fd0:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe f949 	bl	800226e <Foreground_color_256>
 8003fdc:	e01a      	b.n	8004014 <screen0x07+0x6b0>
				else Foreground_color_256(dc[i] > 0x0f ? MONOCHROME_COLOR:color256_black);
 8003fde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	33b8      	adds	r3, #184	; 0xb8
 8003fe6:	443b      	add	r3, r7
 8003fe8:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003fec:	2b0f      	cmp	r3, #15
 8003fee:	dd0d      	ble.n	800400c <screen0x07+0x6a8>
 8003ff0:	231f      	movs	r3, #31
 8003ff2:	e00c      	b.n	800400e <screen0x07+0x6aa>
 8003ff4:	0800c2d0 	.word	0x0800c2d0
 8003ff8:	20000000 	.word	0x20000000
 8003ffc:	0800c2d4 	.word	0x0800c2d4
 8004000:	200007fa 	.word	0x200007fa
 8004004:	80808081 	.word	0x80808081
 8004008:	0800c2dc 	.word	0x0800c2dc
 800400c:	2300      	movs	r3, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe f92d 	bl	800226e <Foreground_color_256>

				switch(ds[i]>>4)
 8004014:	1d3a      	adds	r2, r7, #4
 8004016:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800401a:	4413      	add	r3, r2
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	091b      	lsrs	r3, r3, #4
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b03      	cmp	r3, #3
 8004024:	d816      	bhi.n	8004054 <screen0x07+0x6f0>
 8004026:	a201      	add	r2, pc, #4	; (adr r2, 800402c <screen0x07+0x6c8>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	0800403d 	.word	0x0800403d
 8004030:	08004043 	.word	0x08004043
 8004034:	08004049 	.word	0x08004049
 8004038:	0800404f 	.word	0x0800404f
				{
				case 0:		Font_Width_X1();			break;
 800403c:	f7fe f819 	bl	8002072 <Font_Width_X1>
 8004040:	e008      	b.n	8004054 <screen0x07+0x6f0>
				case 1:		Font_Width_X2();			break;
 8004042:	f7fe f830 	bl	80020a6 <Font_Width_X2>
 8004046:	e005      	b.n	8004054 <screen0x07+0x6f0>
				case 2:		Font_Width_X3();			break;
 8004048:	f7fe f847 	bl	80020da <Font_Width_X3>
 800404c:	e002      	b.n	8004054 <screen0x07+0x6f0>
				case 3:		Font_Width_X4();			break;
 800404e:	f7fe f85e 	bl	800210e <Font_Width_X4>
 8004052:	bf00      	nop
				}
				switch(ds[i]&0x0f)
 8004054:	1d3a      	adds	r2, r7, #4
 8004056:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800405a:	4413      	add	r3, r2
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	2b03      	cmp	r3, #3
 8004064:	d816      	bhi.n	8004094 <screen0x07+0x730>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <screen0x07+0x708>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	0800407d 	.word	0x0800407d
 8004070:	08004083 	.word	0x08004083
 8004074:	08004089 	.word	0x08004089
 8004078:	0800408f 	.word	0x0800408f
				{
				case 0:		Font_Height_X1();			break;
 800407c:	f7fe f861 	bl	8002142 <Font_Height_X1>
 8004080:	e008      	b.n	8004094 <screen0x07+0x730>
				case 1:		Font_Height_X2();			break;
 8004082:	f7fe f878 	bl	8002176 <Font_Height_X2>
 8004086:	e005      	b.n	8004094 <screen0x07+0x730>
				case 2:		Font_Height_X3();			break;
 8004088:	f7fe f88f 	bl	80021aa <Font_Height_X3>
 800408c:	e002      	b.n	8004094 <screen0x07+0x730>
				case 3:		Font_Height_X4();			break;
 800408e:	f7fe f8a6 	bl	80021de <Font_Height_X4>
 8004092:	bf00      	nop
				}
				Show_String("$");
 8004094:	4813      	ldr	r0, [pc, #76]	; (80040e4 <screen0x07+0x780>)
 8004096:	f7fe f92e 	bl	80022f6 <Show_String>
			for(i = 0;i<numDollarSigns;i++)
 800409a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800409e:	3301      	adds	r3, #1
 80040a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80040a8:	2b0b      	cmp	r3, #11
 80040aa:	f77f af5f 	ble.w	8003f6c <screen0x07+0x608>
			}
			HAL_Delay(20);
 80040ae:	2014      	movs	r0, #20
 80040b0:	f004 f980 	bl	80083b4 <HAL_Delay>
		for(j = 0;j<110;j++)
 80040b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040b8:	3301      	adds	r3, #1
 80040ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040c2:	2b6d      	cmp	r3, #109	; 0x6d
 80040c4:	f77f af49 	ble.w	8003f5a <screen0x07+0x5f6>
	while(currentTask == 0) {
 80040c8:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <screen0x07+0x784>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f43f ac91 	beq.w	80039f4 <screen0x07+0x90>
		}
	}
}
 80040d2:	e002      	b.n	80040da <screen0x07+0x776>
		if(currentTask != 0) break;
 80040d4:	bf00      	nop
 80040d6:	e000      	b.n	80040da <screen0x07+0x776>
		if(currentTask != 0) break;
 80040d8:	bf00      	nop
}
 80040da:	bf00      	nop
 80040dc:	37b8      	adds	r7, #184	; 0xb8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bdb0      	pop	{r4, r5, r7, pc}
 80040e2:	bf00      	nop
 80040e4:	0800c2d0 	.word	0x0800c2d0
 80040e8:	200007fa 	.word	0x200007fa

080040ec <screen0x08>:


// YOU ARE AWARDED 4 OFFERS!
void screen0x08(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
	int wordDelay   =  100;
 80040f2:	2364      	movs	r3, #100	; 0x64
 80040f4:	607b      	str	r3, [r7, #4]
//	int holdTime    =  250;
//	int numLoop     =  3;

	CGROM_Select_Genitop_FontROM();
 80040f6:	f7fd ff00 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 80040fa:	f7fe f88a 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	//Font_Select_12x24_24x24();
	Font_Select_16x32_32x32();
 80040fe:	f7fd ff30 	bl	8001f62 <Font_Select_16x32_32x32>
	Set_GTFont_Decoder(0x21);
 8004102:	2021      	movs	r0, #33	; 0x21
 8004104:	f7fe f8a3 	bl	800224e <Set_GTFont_Decoder>

	// Clear Screen
	Foreground_color_256(color256_black);
 8004108:	2000      	movs	r0, #0
 800410a:	f7fe f8b0 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 800410e:	2000      	movs	r0, #0
 8004110:	f7fe f8cf 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 8004114:	2100      	movs	r1, #0
 8004116:	2000      	movs	r0, #0
 8004118:	f7fd fb5c 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 800411c:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8004120:	f240 108f 	movw	r0, #399	; 0x18f
 8004124:	f7fd fb86 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 8004128:	f7fd fc44 	bl	80019b4 <Start_Square_Fill>

    if(fullcolor) Foreground_color_256(color256_white);
 800412c:	4b55      	ldr	r3, [pc, #340]	; (8004284 <screen0x08+0x198>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <screen0x08+0x50>
 8004134:	20ff      	movs	r0, #255	; 0xff
 8004136:	f7fe f89a 	bl	800226e <Foreground_color_256>
 800413a:	e002      	b.n	8004142 <screen0x08+0x56>
    else Foreground_color_256(MONOCHROME_COLOR);
 800413c:	201f      	movs	r0, #31
 800413e:	f7fe f896 	bl	800226e <Foreground_color_256>

    Background_color_256(color256_black);
 8004142:	2000      	movs	r0, #0
 8004144:	f7fe f8b5 	bl	80022b2 <Background_color_256>
	Goto_Text_XY(70,166);       //  Y, X  4-11-2024  it was 60, 150
 8004148:	21a6      	movs	r1, #166	; 0xa6
 800414a:	2046      	movs	r0, #70	; 0x46
 800414c:	f7fd fb0e 	bl	800176c <Goto_Text_XY>
	Font_Width_X3();
 8004150:	f7fd ffc3 	bl	80020da <Font_Width_X3>
	Font_Height_X3();
 8004154:	f7fe f829 	bl	80021aa <Font_Height_X3>
	Show_String("YOU");
 8004158:	484b      	ldr	r0, [pc, #300]	; (8004288 <screen0x08+0x19c>)
 800415a:	f7fe f8cc 	bl	80022f6 <Show_String>

	Goto_Text_XY(70,406);       //  Y, X  4-11-2024  it was 60, 390
 800415e:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004162:	2046      	movs	r0, #70	; 0x46
 8004164:	f7fd fb02 	bl	800176c <Goto_Text_XY>
	Font_Width_X3();
 8004168:	f7fd ffb7 	bl	80020da <Font_Width_X3>
	Font_Height_X3();
 800416c:	f7fe f81d 	bl	80021aa <Font_Height_X3>
	Show_String("ARE");
 8004170:	4846      	ldr	r0, [pc, #280]	; (800428c <screen0x08+0x1a0>)
 8004172:	f7fe f8c0 	bl	80022f6 <Show_String>

	Goto_Text_XY(70,646);       //  Y, X  4-11-2024  it was 60, 630
 8004176:	f240 2186 	movw	r1, #646	; 0x286
 800417a:	2046      	movs	r0, #70	; 0x46
 800417c:	f7fd faf6 	bl	800176c <Goto_Text_XY>
	Font_Width_X3();
 8004180:	f7fd ffab 	bl	80020da <Font_Width_X3>
	Font_Height_X3();
 8004184:	f7fe f811 	bl	80021aa <Font_Height_X3>
	Show_String("AWARDED");
 8004188:	4841      	ldr	r0, [pc, #260]	; (8004290 <screen0x08+0x1a4>)
 800418a:	f7fe f8b4 	bl	80022f6 <Show_String>

	Goto_Text_XY(170,400);       //  Y, X  4-11-2024  it was 200, 384
 800418e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004192:	20aa      	movs	r0, #170	; 0xaa
 8004194:	f7fd faea 	bl	800176c <Goto_Text_XY>
    if(fullcolor) Foreground_color_256(color256_green);
 8004198:	4b3a      	ldr	r3, [pc, #232]	; (8004284 <screen0x08+0x198>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <screen0x08+0xbc>
 80041a0:	201c      	movs	r0, #28
 80041a2:	f7fe f864 	bl	800226e <Foreground_color_256>
 80041a6:	e002      	b.n	80041ae <screen0x08+0xc2>
    else Foreground_color_256(MONOCHROME_COLOR);
 80041a8:	201f      	movs	r0, #31
 80041aa:	f7fe f860 	bl	800226e <Foreground_color_256>
	Font_Width_X4();
 80041ae:	f7fd ffae 	bl	800210e <Font_Width_X4>
	Font_Height_X4();
 80041b2:	f7fe f814 	bl	80021de <Font_Height_X4>
	Show_String("4");
 80041b6:	4837      	ldr	r0, [pc, #220]	; (8004294 <screen0x08+0x1a8>)
 80041b8:	f7fe f89d 	bl	80022f6 <Show_String>

	Goto_Text_XY(200,524);       //  Y, X  4-11-2024  it was 230, 508
 80041bc:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80041c0:	20c8      	movs	r0, #200	; 0xc8
 80041c2:	f7fd fad3 	bl	800176c <Goto_Text_XY>
    if(fullcolor) Foreground_color_256(color256_white);
 80041c6:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <screen0x08+0x198>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <screen0x08+0xea>
 80041ce:	20ff      	movs	r0, #255	; 0xff
 80041d0:	f7fe f84d 	bl	800226e <Foreground_color_256>
 80041d4:	e002      	b.n	80041dc <screen0x08+0xf0>
    else Foreground_color_256(MONOCHROME_COLOR);
 80041d6:	201f      	movs	r0, #31
 80041d8:	f7fe f849 	bl	800226e <Foreground_color_256>
	Font_Width_X3();
 80041dc:	f7fd ff7d 	bl	80020da <Font_Width_X3>
	Font_Height_X3();
 80041e0:	f7fd ffe3 	bl	80021aa <Font_Height_X3>
	Show_String("OFFERS!");
 80041e4:	482c      	ldr	r0, [pc, #176]	; (8004298 <screen0x08+0x1ac>)
 80041e6:	f7fe f886 	bl	80022f6 <Show_String>

	//for(int b = 0; b < numLoop; b++)
	currentTask = 0;
 80041ea:	4b2c      	ldr	r3, [pc, #176]	; (800429c <screen0x08+0x1b0>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	701a      	strb	r2, [r3, #0]

	while(currentTask == 0)
 80041f0:	e03b      	b.n	800426a <screen0x08+0x17e>
	{
		Foreground_color_256(color256_black);
 80041f2:	2000      	movs	r0, #0
 80041f4:	f7fe f83b 	bl	800226e <Foreground_color_256>
		Background_color_256(color256_black);
 80041f8:	2000      	movs	r0, #0
 80041fa:	f7fe f85a 	bl	80022b2 <Background_color_256>
		Goto_Text_XY(170,400);       //  Y, X  4-11-2024  it was 200, 384
 80041fe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004202:	20aa      	movs	r0, #170	; 0xaa
 8004204:	f7fd fab2 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004208:	f7fd ff81 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 800420c:	f7fd ffe7 	bl	80021de <Font_Height_X4>
		Show_String("4");
 8004210:	4820      	ldr	r0, [pc, #128]	; (8004294 <screen0x08+0x1a8>)
 8004212:	f7fe f870 	bl	80022f6 <Show_String>
		if(currentTask) break;
 8004216:	4b21      	ldr	r3, [pc, #132]	; (800429c <screen0x08+0x1b0>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d12a      	bne.n	8004274 <screen0x08+0x188>
		HAL_Delay(wordDelay);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4618      	mov	r0, r3
 8004222:	f004 f8c7 	bl	80083b4 <HAL_Delay>

	    if(fullcolor) Foreground_color_256(color256_green);
 8004226:	4b17      	ldr	r3, [pc, #92]	; (8004284 <screen0x08+0x198>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <screen0x08+0x14a>
 800422e:	201c      	movs	r0, #28
 8004230:	f7fe f81d 	bl	800226e <Foreground_color_256>
 8004234:	e002      	b.n	800423c <screen0x08+0x150>
	    else Foreground_color_256(MONOCHROME_COLOR);
 8004236:	201f      	movs	r0, #31
 8004238:	f7fe f819 	bl	800226e <Foreground_color_256>
		Background_color_256(color256_black);
 800423c:	2000      	movs	r0, #0
 800423e:	f7fe f838 	bl	80022b2 <Background_color_256>
		Goto_Text_XY(170,400);       //  Y, X  4-11-2024  it was 200, 384
 8004242:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004246:	20aa      	movs	r0, #170	; 0xaa
 8004248:	f7fd fa90 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 800424c:	f7fd ff5f 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8004250:	f7fd ffc5 	bl	80021de <Font_Height_X4>
		Show_String("4");
 8004254:	480f      	ldr	r0, [pc, #60]	; (8004294 <screen0x08+0x1a8>)
 8004256:	f7fe f84e 	bl	80022f6 <Show_String>
		if(currentTask) break;
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <screen0x08+0x1b0>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <screen0x08+0x18c>
		HAL_Delay(wordDelay);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4618      	mov	r0, r3
 8004266:	f004 f8a5 	bl	80083b4 <HAL_Delay>
	while(currentTask == 0)
 800426a:	4b0c      	ldr	r3, [pc, #48]	; (800429c <screen0x08+0x1b0>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0bf      	beq.n	80041f2 <screen0x08+0x106>
    Start_Square_Fill();

	if(currentTask == 0)
	HAL_Delay(wordDelay);
	*/
}
 8004272:	e002      	b.n	800427a <screen0x08+0x18e>
		if(currentTask) break;
 8004274:	bf00      	nop
 8004276:	e000      	b.n	800427a <screen0x08+0x18e>
		if(currentTask) break;
 8004278:	bf00      	nop
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000000 	.word	0x20000000
 8004288:	0800c354 	.word	0x0800c354
 800428c:	0800c358 	.word	0x0800c358
 8004290:	0800c35c 	.word	0x0800c35c
 8004294:	0800c364 	.word	0x0800c364
 8004298:	0800c368 	.word	0x0800c368
 800429c:	200007fa 	.word	0x200007fa

080042a0 <screen0x09>:


//  FIRST OFFER
void screen0x09(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
	int  holdTime   		  = 125;
 80042a6:	237d      	movs	r3, #125	; 0x7d
 80042a8:	61fb      	str	r3, [r7, #28]
	int  wordFlap   		  = 25;
 80042aa:	2319      	movs	r3, #25
 80042ac:	61bb      	str	r3, [r7, #24]
	int  littley			  = 140;   // 4-11-2024  it was 168
 80042ae:	238c      	movs	r3, #140	; 0x8c
 80042b0:	617b      	str	r3, [r7, #20]
	int  littlex			  = 235;   // 4-11-2024  it was 265
 80042b2:	23eb      	movs	r3, #235	; 0xeb
 80042b4:	613b      	str	r3, [r7, #16]
	int  bigy                 = 112;   // 4-11-2024  it was 140
 80042b6:	2370      	movs	r3, #112	; 0x70
 80042b8:	60fb      	str	r3, [r7, #12]
	int  bigx1                = 237;   // 4-11-2024  it was 265
 80042ba:	23ed      	movs	r3, #237	; 0xed
 80042bc:	60bb      	str	r3, [r7, #8]
	int  bigx2                = 648;   // 4-11-2024  it was 676
 80042be:	f44f 7322 	mov.w	r3, #648	; 0x288
 80042c2:	607b      	str	r3, [r7, #4]
	unsigned int randColor    = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	603b      	str	r3, [r7, #0]
	srand(HAL_GetTick());
 80042c8:	f004 f868 	bl	800839c <HAL_GetTick>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f006 ff8c 	bl	800b1ec <srand>


	// Clear Screen
	Foreground_color_256(color256_black);
 80042d4:	2000      	movs	r0, #0
 80042d6:	f7fd ffca 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 80042da:	2000      	movs	r0, #0
 80042dc:	f7fd ffe9 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 80042e0:	2100      	movs	r1, #0
 80042e2:	2000      	movs	r0, #0
 80042e4:	f7fd fa76 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 80042e8:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80042ec:	f240 108f 	movw	r0, #399	; 0x18f
 80042f0:	f7fd faa0 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 80042f4:	f7fd fb5e 	bl	80019b4 <Start_Square_Fill>

    if(fullcolor) Foreground_color_256(color256_red);
 80042f8:	4b97      	ldr	r3, [pc, #604]	; (8004558 <screen0x09+0x2b8>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <screen0x09+0x68>
 8004300:	20e0      	movs	r0, #224	; 0xe0
 8004302:	f7fd ffb4 	bl	800226e <Foreground_color_256>
 8004306:	e002      	b.n	800430e <screen0x09+0x6e>
    else Foreground_color_256(MONOCHROME_COLOR);
 8004308:	201f      	movs	r0, #31
 800430a:	f7fd ffb0 	bl	800226e <Foreground_color_256>

    Background_color_256(color256_black);
 800430e:	2000      	movs	r0, #0
 8004310:	f7fd ffcf 	bl	80022b2 <Background_color_256>
	CGROM_Select_Genitop_FontROM();
 8004314:	f7fd fdf1 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8004318:	f7fd ff7b 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	//Font_Select_12x24_24x24();
	Font_Select_16x32_32x32();
 800431c:	f7fd fe21 	bl	8001f62 <Font_Select_16x32_32x32>
	Set_GTFont_Decoder(0x21);
 8004320:	2021      	movs	r0, #33	; 0x21
 8004322:	f7fd ff94 	bl	800224e <Set_GTFont_Decoder>

	Font_Background_select_Color();
 8004326:	f7fd fe78 	bl	800201a <Font_Background_select_Color>
	//Font_Background_select_Transparency();

	currentTask = 0;
 800432a:	4b8c      	ldr	r3, [pc, #560]	; (800455c <screen0x09+0x2bc>)
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
	while(currentTask == 0)
 8004330:	e17b      	b.n	800462a <screen0x09+0x38a>
	{
	    randColor = RandomColor_256();
 8004332:	f003 f935 	bl	80075a0 <RandomColor_256>
 8004336:	4603      	mov	r3, r0
 8004338:	603b      	str	r3, [r7, #0]
		if(fullcolor) Foreground_color_256(randColor);
 800433a:	4b87      	ldr	r3, [pc, #540]	; (8004558 <screen0x09+0x2b8>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <screen0x09+0xae>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	4618      	mov	r0, r3
 8004348:	f7fd ff91 	bl	800226e <Foreground_color_256>
 800434c:	e002      	b.n	8004354 <screen0x09+0xb4>
	    else Foreground_color_256(MONOCHROME_COLOR);
 800434e:	201f      	movs	r0, #31
 8004350:	f7fd ff8d 	bl	800226e <Foreground_color_256>

	    Goto_Text_XY(bigy,bigx1);       //  Y, X
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	b29b      	uxth	r3, r3
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	b292      	uxth	r2, r2
 800435c:	4611      	mov	r1, r2
 800435e:	4618      	mov	r0, r3
 8004360:	f7fd fa04 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004364:	f7fd fed3 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8004368:	f7fd ff39 	bl	80021de <Font_Height_X4>
		Show_String("FIRST");
 800436c:	487c      	ldr	r0, [pc, #496]	; (8004560 <screen0x09+0x2c0>)
 800436e:	f7fd ffc2 	bl	80022f6 <Show_String>

		Goto_Text_XY(bigy,bigx2);       //  Y, X
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	b29b      	uxth	r3, r3
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	b292      	uxth	r2, r2
 800437a:	4611      	mov	r1, r2
 800437c:	4618      	mov	r0, r3
 800437e:	f7fd f9f5 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004382:	f7fd fec4 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8004386:	f7fd ff2a 	bl	80021de <Font_Height_X4>
		Show_String("OFFER");
 800438a:	4876      	ldr	r0, [pc, #472]	; (8004564 <screen0x09+0x2c4>)
 800438c:	f7fd ffb3 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(holdTime);
 8004390:	4b72      	ldr	r3, [pc, #456]	; (800455c <screen0x09+0x2bc>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	f040 814e 	bne.w	8004636 <screen0x09+0x396>
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4618      	mov	r0, r3
 800439e:	f004 f809 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 80043a2:	4b6e      	ldr	r3, [pc, #440]	; (800455c <screen0x09+0x2bc>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f040 8147 	bne.w	800463a <screen0x09+0x39a>
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f004 f800 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 80043b4:	4b69      	ldr	r3, [pc, #420]	; (800455c <screen0x09+0x2bc>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f040 8140 	bne.w	800463e <screen0x09+0x39e>
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f003 fff7 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 80043c6:	4b65      	ldr	r3, [pc, #404]	; (800455c <screen0x09+0x2bc>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f040 8139 	bne.w	8004642 <screen0x09+0x3a2>
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f003 ffee 	bl	80083b4 <HAL_Delay>
		else break;

		Foreground_color_256(color256_black);
 80043d8:	2000      	movs	r0, #0
 80043da:	f7fd ff48 	bl	800226e <Foreground_color_256>
		Goto_Text_XY(bigy,bigx1);       //  Y, X
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	b292      	uxth	r2, r2
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fd f9bf 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 80043ee:	f7fd fe8e 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 80043f2:	f7fd fef4 	bl	80021de <Font_Height_X4>
		Show_String("FIRST");
 80043f6:	485a      	ldr	r0, [pc, #360]	; (8004560 <screen0x09+0x2c0>)
 80043f8:	f7fd ff7d 	bl	80022f6 <Show_String>


		if(fullcolor) Foreground_color_256(randColor);
 80043fc:	4b56      	ldr	r3, [pc, #344]	; (8004558 <screen0x09+0x2b8>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <screen0x09+0x170>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	4618      	mov	r0, r3
 800440a:	f7fd ff30 	bl	800226e <Foreground_color_256>
 800440e:	e002      	b.n	8004416 <screen0x09+0x176>
	    else Foreground_color_256(MONOCHROME_COLOR);
 8004410:	201f      	movs	r0, #31
 8004412:	f7fd ff2c 	bl	800226e <Foreground_color_256>

		Goto_Text_XY(littley,bigx1);       //  Y, X
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	b29b      	uxth	r3, r3
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	b292      	uxth	r2, r2
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f7fd f9a3 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004426:	f7fd fe72 	bl	800210e <Font_Width_X4>
		Font_Height_X3();
 800442a:	f7fd febe 	bl	80021aa <Font_Height_X3>
		Show_String("FIRST");
 800442e:	484c      	ldr	r0, [pc, #304]	; (8004560 <screen0x09+0x2c0>)
 8004430:	f7fd ff61 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(wordFlap);
 8004434:	4b49      	ldr	r3, [pc, #292]	; (800455c <screen0x09+0x2bc>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f040 8104 	bne.w	8004646 <screen0x09+0x3a6>
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	4618      	mov	r0, r3
 8004442:	f003 ffb7 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004446:	4b45      	ldr	r3, [pc, #276]	; (800455c <screen0x09+0x2bc>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f040 80fd 	bne.w	800464a <screen0x09+0x3aa>
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	4618      	mov	r0, r3
 8004454:	f003 ffae 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004458:	4b40      	ldr	r3, [pc, #256]	; (800455c <screen0x09+0x2bc>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	f040 80f6 	bne.w	800464e <screen0x09+0x3ae>
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	4618      	mov	r0, r3
 8004466:	f003 ffa5 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 800446a:	4b3c      	ldr	r3, [pc, #240]	; (800455c <screen0x09+0x2bc>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 80ef 	bne.w	8004652 <screen0x09+0x3b2>
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	4618      	mov	r0, r3
 8004478:	f003 ff9c 	bl	80083b4 <HAL_Delay>
		else break;

		Foreground_color_256(color256_black);
 800447c:	2000      	movs	r0, #0
 800447e:	f7fd fef6 	bl	800226e <Foreground_color_256>
		Goto_Text_XY(littley,littlex);       //  Y, X
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	b29b      	uxth	r3, r3
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	b292      	uxth	r2, r2
 800448a:	4611      	mov	r1, r2
 800448c:	4618      	mov	r0, r3
 800448e:	f7fd f96d 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004492:	f7fd fe3c 	bl	800210e <Font_Width_X4>
		Font_Height_X3();
 8004496:	f7fd fe88 	bl	80021aa <Font_Height_X3>
		Show_String("FIRST");
 800449a:	4831      	ldr	r0, [pc, #196]	; (8004560 <screen0x09+0x2c0>)
 800449c:	f7fd ff2b 	bl	80022f6 <Show_String>

		if(fullcolor) Foreground_color_256(randColor);
 80044a0:	4b2d      	ldr	r3, [pc, #180]	; (8004558 <screen0x09+0x2b8>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <screen0x09+0x214>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fd fede 	bl	800226e <Foreground_color_256>
 80044b2:	e002      	b.n	80044ba <screen0x09+0x21a>
	    else Foreground_color_256(MONOCHROME_COLOR);
 80044b4:	201f      	movs	r0, #31
 80044b6:	f7fd feda 	bl	800226e <Foreground_color_256>

		Goto_Text_XY(bigy,bigx1);       //  Y, X
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	b292      	uxth	r2, r2
 80044c2:	4611      	mov	r1, r2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fd f951 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 80044ca:	f7fd fe20 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 80044ce:	f7fd fe86 	bl	80021de <Font_Height_X4>
		Show_String("FIRST");
 80044d2:	4823      	ldr	r0, [pc, #140]	; (8004560 <screen0x09+0x2c0>)
 80044d4:	f7fd ff0f 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(wordFlap);
 80044d8:	4b20      	ldr	r3, [pc, #128]	; (800455c <screen0x09+0x2bc>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f040 80ba 	bne.w	8004656 <screen0x09+0x3b6>
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f003 ff65 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 80044ea:	4b1c      	ldr	r3, [pc, #112]	; (800455c <screen0x09+0x2bc>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f040 80b3 	bne.w	800465a <screen0x09+0x3ba>
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f003 ff5c 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 80044fc:	4b17      	ldr	r3, [pc, #92]	; (800455c <screen0x09+0x2bc>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f040 80ac 	bne.w	800465e <screen0x09+0x3be>
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	4618      	mov	r0, r3
 800450a:	f003 ff53 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <screen0x09+0x2bc>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f040 80a5 	bne.w	8004662 <screen0x09+0x3c2>
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	4618      	mov	r0, r3
 800451c:	f003 ff4a 	bl	80083b4 <HAL_Delay>
		else break;

		Goto_Text_XY(bigy,bigx2);       //  Y, X
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	b29b      	uxth	r3, r3
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	b292      	uxth	r2, r2
 8004528:	4611      	mov	r1, r2
 800452a:	4618      	mov	r0, r3
 800452c:	f7fd f91e 	bl	800176c <Goto_Text_XY>
		Foreground_color_256(color256_black);
 8004530:	2000      	movs	r0, #0
 8004532:	f7fd fe9c 	bl	800226e <Foreground_color_256>
		Font_Width_X4();
 8004536:	f7fd fdea 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 800453a:	f7fd fe50 	bl	80021de <Font_Height_X4>
		Show_String("OFFER");
 800453e:	4809      	ldr	r0, [pc, #36]	; (8004564 <screen0x09+0x2c4>)
 8004540:	f7fd fed9 	bl	80022f6 <Show_String>

		if(fullcolor) Foreground_color_256(randColor);
 8004544:	4b04      	ldr	r3, [pc, #16]	; (8004558 <screen0x09+0x2b8>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00d      	beq.n	8004568 <screen0x09+0x2c8>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	4618      	mov	r0, r3
 8004552:	f7fd fe8c 	bl	800226e <Foreground_color_256>
 8004556:	e00a      	b.n	800456e <screen0x09+0x2ce>
 8004558:	20000000 	.word	0x20000000
 800455c:	200007fa 	.word	0x200007fa
 8004560:	0800c370 	.word	0x0800c370
 8004564:	0800c378 	.word	0x0800c378
	    else Foreground_color_256(MONOCHROME_COLOR);
 8004568:	201f      	movs	r0, #31
 800456a:	f7fd fe80 	bl	800226e <Foreground_color_256>

		Goto_Text_XY(littley,bigx2);       //  Y, X
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	b29b      	uxth	r3, r3
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	b292      	uxth	r2, r2
 8004576:	4611      	mov	r1, r2
 8004578:	4618      	mov	r0, r3
 800457a:	f7fd f8f7 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 800457e:	f7fd fdc6 	bl	800210e <Font_Width_X4>
		Font_Height_X3();
 8004582:	f7fd fe12 	bl	80021aa <Font_Height_X3>
		Show_String("OFFER");
 8004586:	4841      	ldr	r0, [pc, #260]	; (800468c <screen0x09+0x3ec>)
 8004588:	f7fd feb5 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(wordFlap);
 800458c:	4b40      	ldr	r3, [pc, #256]	; (8004690 <screen0x09+0x3f0>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d168      	bne.n	8004666 <screen0x09+0x3c6>
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	4618      	mov	r0, r3
 8004598:	f003 ff0c 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 800459c:	4b3c      	ldr	r3, [pc, #240]	; (8004690 <screen0x09+0x3f0>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d162      	bne.n	800466a <screen0x09+0x3ca>
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f003 ff04 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 80045ac:	4b38      	ldr	r3, [pc, #224]	; (8004690 <screen0x09+0x3f0>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d15c      	bne.n	800466e <screen0x09+0x3ce>
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f003 fefc 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 80045bc:	4b34      	ldr	r3, [pc, #208]	; (8004690 <screen0x09+0x3f0>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d156      	bne.n	8004672 <screen0x09+0x3d2>
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f003 fef4 	bl	80083b4 <HAL_Delay>
		else break;

		Goto_Text_XY(bigy,bigx2);       //  Y, X
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	b292      	uxth	r2, r2
 80045d4:	4611      	mov	r1, r2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fd f8c8 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 80045dc:	f7fd fd97 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 80045e0:	f7fd fdfd 	bl	80021de <Font_Height_X4>
		Show_String("OFFER");
 80045e4:	4829      	ldr	r0, [pc, #164]	; (800468c <screen0x09+0x3ec>)
 80045e6:	f7fd fe86 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(holdTime);
 80045ea:	4b29      	ldr	r3, [pc, #164]	; (8004690 <screen0x09+0x3f0>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d141      	bne.n	8004676 <screen0x09+0x3d6>
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f003 fedd 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 80045fa:	4b25      	ldr	r3, [pc, #148]	; (8004690 <screen0x09+0x3f0>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d13b      	bne.n	800467a <screen0x09+0x3da>
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	4618      	mov	r0, r3
 8004606:	f003 fed5 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 800460a:	4b21      	ldr	r3, [pc, #132]	; (8004690 <screen0x09+0x3f0>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d135      	bne.n	800467e <screen0x09+0x3de>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4618      	mov	r0, r3
 8004616:	f003 fecd 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 800461a:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <screen0x09+0x3f0>)
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d12f      	bne.n	8004682 <screen0x09+0x3e2>
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	4618      	mov	r0, r3
 8004626:	f003 fec5 	bl	80083b4 <HAL_Delay>
	while(currentTask == 0)
 800462a:	4b19      	ldr	r3, [pc, #100]	; (8004690 <screen0x09+0x3f0>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f43f ae7f 	beq.w	8004332 <screen0x09+0x92>
		else break;
	}
}
 8004634:	e026      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 8004636:	bf00      	nop
 8004638:	e024      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 800463a:	bf00      	nop
 800463c:	e022      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 800463e:	bf00      	nop
 8004640:	e020      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 8004642:	bf00      	nop
 8004644:	e01e      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 8004646:	bf00      	nop
 8004648:	e01c      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 800464a:	bf00      	nop
 800464c:	e01a      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 800464e:	bf00      	nop
 8004650:	e018      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 8004652:	bf00      	nop
 8004654:	e016      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 8004656:	bf00      	nop
 8004658:	e014      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 800465a:	bf00      	nop
 800465c:	e012      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 800465e:	bf00      	nop
 8004660:	e010      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 8004662:	bf00      	nop
 8004664:	e00e      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 8004666:	bf00      	nop
 8004668:	e00c      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 800466a:	bf00      	nop
 800466c:	e00a      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 800466e:	bf00      	nop
 8004670:	e008      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 8004672:	bf00      	nop
 8004674:	e006      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 8004676:	bf00      	nop
 8004678:	e004      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 800467a:	bf00      	nop
 800467c:	e002      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 800467e:	bf00      	nop
 8004680:	e000      	b.n	8004684 <screen0x09+0x3e4>
		else break;
 8004682:	bf00      	nop
}
 8004684:	bf00      	nop
 8004686:	3720      	adds	r7, #32
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	0800c378 	.word	0x0800c378
 8004690:	200007fa 	.word	0x200007fa

08004694 <screen0x0a>:



// SECOND OFFER
void screen0x0a(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af00      	add	r7, sp, #0
	int  holdTime   		  = 125;
 800469a:	237d      	movs	r3, #125	; 0x7d
 800469c:	61fb      	str	r3, [r7, #28]
	int  wordFlap   		  = 25;
 800469e:	2319      	movs	r3, #25
 80046a0:	61bb      	str	r3, [r7, #24]
	int  littlex			  = 172;    // 4-11-2024  it was 154
 80046a2:	23ac      	movs	r3, #172	; 0xac
 80046a4:	617b      	str	r3, [r7, #20]
	int  littley			  = 140;    // 4-11-2024  it was 168
 80046a6:	238c      	movs	r3, #140	; 0x8c
 80046a8:	613b      	str	r3, [r7, #16]
	int  bigx1                = 148;    // 4-11-2024  it was 130
 80046aa:	2394      	movs	r3, #148	; 0x94
 80046ac:	60fb      	str	r3, [r7, #12]
	int  bigx2                = 728;    // 4-11-2024  it was 710
 80046ae:	f44f 7336 	mov.w	r3, #728	; 0x2d8
 80046b2:	60bb      	str	r3, [r7, #8]
	int  bigy                 = 112;    // 4-11-2024  it was 140
 80046b4:	2370      	movs	r3, #112	; 0x70
 80046b6:	607b      	str	r3, [r7, #4]
	unsigned short  TextColor = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	807b      	strh	r3, [r7, #2]

	// Clear Screen
	Foreground_color_256(color256_black);
 80046bc:	2000      	movs	r0, #0
 80046be:	f7fd fdd6 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 80046c2:	2000      	movs	r0, #0
 80046c4:	f7fd fdf5 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 80046c8:	2100      	movs	r1, #0
 80046ca:	2000      	movs	r0, #0
 80046cc:	f7fd f882 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 80046d0:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80046d4:	f240 108f 	movw	r0, #399	; 0x18f
 80046d8:	f7fd f8ac 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 80046dc:	f7fd f96a 	bl	80019b4 <Start_Square_Fill>

    if(fullcolor) Foreground_color_256(color256_white);
 80046e0:	4b97      	ldr	r3, [pc, #604]	; (8004940 <screen0x0a+0x2ac>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <screen0x0a+0x5c>
 80046e8:	20ff      	movs	r0, #255	; 0xff
 80046ea:	f7fd fdc0 	bl	800226e <Foreground_color_256>
 80046ee:	e002      	b.n	80046f6 <screen0x0a+0x62>
    else Foreground_color_256(MONOCHROME_COLOR);
 80046f0:	201f      	movs	r0, #31
 80046f2:	f7fd fdbc 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 80046f6:	2000      	movs	r0, #0
 80046f8:	f7fd fddb 	bl	80022b2 <Background_color_256>
	CGROM_Select_Genitop_FontROM();
 80046fc:	f7fd fbfd 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8004700:	f7fd fd87 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	//Font_Select_12x24_24x24();
	Font_Select_16x32_32x32();
 8004704:	f7fd fc2d 	bl	8001f62 <Font_Select_16x32_32x32>
	Set_GTFont_Decoder(0x21);
 8004708:	2021      	movs	r0, #33	; 0x21
 800470a:	f7fd fda0 	bl	800224e <Set_GTFont_Decoder>

	Font_Background_select_Color();
 800470e:	f7fd fc84 	bl	800201a <Font_Background_select_Color>
	//Font_Background_select_Transparency();

	currentTask = 0;
 8004712:	4b8c      	ldr	r3, [pc, #560]	; (8004944 <screen0x0a+0x2b0>)
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]
	while(currentTask == 0)
 8004718:	e17b      	b.n	8004a12 <screen0x0a+0x37e>
	{
		TextColor = RandomColor_256();
 800471a:	f002 ff41 	bl	80075a0 <RandomColor_256>
 800471e:	4603      	mov	r3, r0
 8004720:	807b      	strh	r3, [r7, #2]

		if(fullcolor) Foreground_color_256(TextColor);
 8004722:	4b87      	ldr	r3, [pc, #540]	; (8004940 <screen0x0a+0x2ac>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <screen0x0a+0xa2>
 800472a:	887b      	ldrh	r3, [r7, #2]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	4618      	mov	r0, r3
 8004730:	f7fd fd9d 	bl	800226e <Foreground_color_256>
 8004734:	e002      	b.n	800473c <screen0x0a+0xa8>
	    else Foreground_color_256(MONOCHROME_COLOR);
 8004736:	201f      	movs	r0, #31
 8004738:	f7fd fd99 	bl	800226e <Foreground_color_256>

		Goto_Text_XY(bigy,bigx1);       //  Y, X
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	b29b      	uxth	r3, r3
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	b292      	uxth	r2, r2
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f7fd f810 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 800474c:	f7fd fcdf 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8004750:	f7fd fd45 	bl	80021de <Font_Height_X4>
		Show_String("SECOND");
 8004754:	487c      	ldr	r0, [pc, #496]	; (8004948 <screen0x0a+0x2b4>)
 8004756:	f7fd fdce 	bl	80022f6 <Show_String>

		Goto_Text_XY(bigy,bigx2);       //  Y, X
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	b29b      	uxth	r3, r3
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	b292      	uxth	r2, r2
 8004762:	4611      	mov	r1, r2
 8004764:	4618      	mov	r0, r3
 8004766:	f7fd f801 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 800476a:	f7fd fcd0 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 800476e:	f7fd fd36 	bl	80021de <Font_Height_X4>
		Show_String("OFFER");
 8004772:	4876      	ldr	r0, [pc, #472]	; (800494c <screen0x0a+0x2b8>)
 8004774:	f7fd fdbf 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(holdTime);
 8004778:	4b72      	ldr	r3, [pc, #456]	; (8004944 <screen0x0a+0x2b0>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f040 814e 	bne.w	8004a1e <screen0x0a+0x38a>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4618      	mov	r0, r3
 8004786:	f003 fe15 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 800478a:	4b6e      	ldr	r3, [pc, #440]	; (8004944 <screen0x0a+0x2b0>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f040 8147 	bne.w	8004a22 <screen0x0a+0x38e>
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	4618      	mov	r0, r3
 8004798:	f003 fe0c 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 800479c:	4b69      	ldr	r3, [pc, #420]	; (8004944 <screen0x0a+0x2b0>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f040 8140 	bne.w	8004a26 <screen0x0a+0x392>
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f003 fe03 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 80047ae:	4b65      	ldr	r3, [pc, #404]	; (8004944 <screen0x0a+0x2b0>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f040 8139 	bne.w	8004a2a <screen0x0a+0x396>
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f003 fdfa 	bl	80083b4 <HAL_Delay>
		else break;

		Foreground_color_256(color256_black);
 80047c0:	2000      	movs	r0, #0
 80047c2:	f7fd fd54 	bl	800226e <Foreground_color_256>
		Goto_Text_XY(bigy,bigx1);       //  Y, X
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	b292      	uxth	r2, r2
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fc ffcb 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 80047d6:	f7fd fc9a 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 80047da:	f7fd fd00 	bl	80021de <Font_Height_X4>
		Show_String("SECOND");
 80047de:	485a      	ldr	r0, [pc, #360]	; (8004948 <screen0x0a+0x2b4>)
 80047e0:	f7fd fd89 	bl	80022f6 <Show_String>

	    if(fullcolor) Foreground_color_256(TextColor);
 80047e4:	4b56      	ldr	r3, [pc, #344]	; (8004940 <screen0x0a+0x2ac>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <screen0x0a+0x164>
 80047ec:	887b      	ldrh	r3, [r7, #2]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fd fd3c 	bl	800226e <Foreground_color_256>
 80047f6:	e002      	b.n	80047fe <screen0x0a+0x16a>
	    else Foreground_color_256(MONOCHROME_COLOR);
 80047f8:	201f      	movs	r0, #31
 80047fa:	f7fd fd38 	bl	800226e <Foreground_color_256>

	    Goto_Text_XY(littley,bigx1);       //  Y, X
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	b29b      	uxth	r3, r3
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	b292      	uxth	r2, r2
 8004806:	4611      	mov	r1, r2
 8004808:	4618      	mov	r0, r3
 800480a:	f7fc ffaf 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 800480e:	f7fd fc7e 	bl	800210e <Font_Width_X4>
		Font_Height_X3();
 8004812:	f7fd fcca 	bl	80021aa <Font_Height_X3>
		Show_String("SECOND");
 8004816:	484c      	ldr	r0, [pc, #304]	; (8004948 <screen0x0a+0x2b4>)
 8004818:	f7fd fd6d 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(wordFlap);
 800481c:	4b49      	ldr	r3, [pc, #292]	; (8004944 <screen0x0a+0x2b0>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f040 8104 	bne.w	8004a2e <screen0x0a+0x39a>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	4618      	mov	r0, r3
 800482a:	f003 fdc3 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 800482e:	4b45      	ldr	r3, [pc, #276]	; (8004944 <screen0x0a+0x2b0>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f040 80fd 	bne.w	8004a32 <screen0x0a+0x39e>
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	4618      	mov	r0, r3
 800483c:	f003 fdba 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004840:	4b40      	ldr	r3, [pc, #256]	; (8004944 <screen0x0a+0x2b0>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f040 80f6 	bne.w	8004a36 <screen0x0a+0x3a2>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	4618      	mov	r0, r3
 800484e:	f003 fdb1 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004852:	4b3c      	ldr	r3, [pc, #240]	; (8004944 <screen0x0a+0x2b0>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f040 80ef 	bne.w	8004a3a <screen0x0a+0x3a6>
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	4618      	mov	r0, r3
 8004860:	f003 fda8 	bl	80083b4 <HAL_Delay>
		else break;

		Foreground_color_256(color256_black);
 8004864:	2000      	movs	r0, #0
 8004866:	f7fd fd02 	bl	800226e <Foreground_color_256>
		Goto_Text_XY(littley,littlex);       //  Y, X
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	b29b      	uxth	r3, r3
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	b292      	uxth	r2, r2
 8004872:	4611      	mov	r1, r2
 8004874:	4618      	mov	r0, r3
 8004876:	f7fc ff79 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 800487a:	f7fd fc48 	bl	800210e <Font_Width_X4>
		Font_Height_X3();
 800487e:	f7fd fc94 	bl	80021aa <Font_Height_X3>
		Show_String("SECOND");
 8004882:	4831      	ldr	r0, [pc, #196]	; (8004948 <screen0x0a+0x2b4>)
 8004884:	f7fd fd37 	bl	80022f6 <Show_String>

	    if(fullcolor) Foreground_color_256(TextColor);
 8004888:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <screen0x0a+0x2ac>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <screen0x0a+0x208>
 8004890:	887b      	ldrh	r3, [r7, #2]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	4618      	mov	r0, r3
 8004896:	f7fd fcea 	bl	800226e <Foreground_color_256>
 800489a:	e002      	b.n	80048a2 <screen0x0a+0x20e>
	    else Foreground_color_256(MONOCHROME_COLOR);
 800489c:	201f      	movs	r0, #31
 800489e:	f7fd fce6 	bl	800226e <Foreground_color_256>

	    Goto_Text_XY(bigy,bigx1);       //  Y, X
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	b292      	uxth	r2, r2
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fc ff5d 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 80048b2:	f7fd fc2c 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 80048b6:	f7fd fc92 	bl	80021de <Font_Height_X4>
		Show_String("SECOND");
 80048ba:	4823      	ldr	r0, [pc, #140]	; (8004948 <screen0x0a+0x2b4>)
 80048bc:	f7fd fd1b 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(wordFlap);
 80048c0:	4b20      	ldr	r3, [pc, #128]	; (8004944 <screen0x0a+0x2b0>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f040 80ba 	bne.w	8004a3e <screen0x0a+0x3aa>
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f003 fd71 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 80048d2:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <screen0x0a+0x2b0>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f040 80b3 	bne.w	8004a42 <screen0x0a+0x3ae>
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	4618      	mov	r0, r3
 80048e0:	f003 fd68 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 80048e4:	4b17      	ldr	r3, [pc, #92]	; (8004944 <screen0x0a+0x2b0>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f040 80ac 	bne.w	8004a46 <screen0x0a+0x3b2>
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f003 fd5f 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 80048f6:	4b13      	ldr	r3, [pc, #76]	; (8004944 <screen0x0a+0x2b0>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f040 80a5 	bne.w	8004a4a <screen0x0a+0x3b6>
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	4618      	mov	r0, r3
 8004904:	f003 fd56 	bl	80083b4 <HAL_Delay>
		else break;

		Goto_Text_XY(bigy,bigx2);       //  Y, X
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	b29b      	uxth	r3, r3
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	b292      	uxth	r2, r2
 8004910:	4611      	mov	r1, r2
 8004912:	4618      	mov	r0, r3
 8004914:	f7fc ff2a 	bl	800176c <Goto_Text_XY>
		Foreground_color_256(color256_black);
 8004918:	2000      	movs	r0, #0
 800491a:	f7fd fca8 	bl	800226e <Foreground_color_256>
		Font_Width_X4();
 800491e:	f7fd fbf6 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8004922:	f7fd fc5c 	bl	80021de <Font_Height_X4>
		Show_String("OFFER");
 8004926:	4809      	ldr	r0, [pc, #36]	; (800494c <screen0x0a+0x2b8>)
 8004928:	f7fd fce5 	bl	80022f6 <Show_String>

	    if(fullcolor) Foreground_color_256(TextColor);
 800492c:	4b04      	ldr	r3, [pc, #16]	; (8004940 <screen0x0a+0x2ac>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00d      	beq.n	8004950 <screen0x0a+0x2bc>
 8004934:	887b      	ldrh	r3, [r7, #2]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	4618      	mov	r0, r3
 800493a:	f7fd fc98 	bl	800226e <Foreground_color_256>
 800493e:	e00a      	b.n	8004956 <screen0x0a+0x2c2>
 8004940:	20000000 	.word	0x20000000
 8004944:	200007fa 	.word	0x200007fa
 8004948:	0800c380 	.word	0x0800c380
 800494c:	0800c378 	.word	0x0800c378
	    else Foreground_color_256(MONOCHROME_COLOR);
 8004950:	201f      	movs	r0, #31
 8004952:	f7fd fc8c 	bl	800226e <Foreground_color_256>

	    Goto_Text_XY(littley,bigx2);       //  Y, X
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	b29b      	uxth	r3, r3
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	b292      	uxth	r2, r2
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f7fc ff03 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004966:	f7fd fbd2 	bl	800210e <Font_Width_X4>
		Font_Height_X3();
 800496a:	f7fd fc1e 	bl	80021aa <Font_Height_X3>
		Show_String("OFFER");
 800496e:	4841      	ldr	r0, [pc, #260]	; (8004a74 <screen0x0a+0x3e0>)
 8004970:	f7fd fcc1 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(wordFlap);
 8004974:	4b40      	ldr	r3, [pc, #256]	; (8004a78 <screen0x0a+0x3e4>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d168      	bne.n	8004a4e <screen0x0a+0x3ba>
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	4618      	mov	r0, r3
 8004980:	f003 fd18 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004984:	4b3c      	ldr	r3, [pc, #240]	; (8004a78 <screen0x0a+0x3e4>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d162      	bne.n	8004a52 <screen0x0a+0x3be>
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	4618      	mov	r0, r3
 8004990:	f003 fd10 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004994:	4b38      	ldr	r3, [pc, #224]	; (8004a78 <screen0x0a+0x3e4>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d15c      	bne.n	8004a56 <screen0x0a+0x3c2>
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	4618      	mov	r0, r3
 80049a0:	f003 fd08 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 80049a4:	4b34      	ldr	r3, [pc, #208]	; (8004a78 <screen0x0a+0x3e4>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d156      	bne.n	8004a5a <screen0x0a+0x3c6>
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f003 fd00 	bl	80083b4 <HAL_Delay>
		else break;

		Goto_Text_XY(bigy,bigx2);       //  Y, X
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	b292      	uxth	r2, r2
 80049bc:	4611      	mov	r1, r2
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fc fed4 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 80049c4:	f7fd fba3 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 80049c8:	f7fd fc09 	bl	80021de <Font_Height_X4>
		Show_String("OFFER");
 80049cc:	4829      	ldr	r0, [pc, #164]	; (8004a74 <screen0x0a+0x3e0>)
 80049ce:	f7fd fc92 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(holdTime);
 80049d2:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <screen0x0a+0x3e4>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d141      	bne.n	8004a5e <screen0x0a+0x3ca>
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	4618      	mov	r0, r3
 80049de:	f003 fce9 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 80049e2:	4b25      	ldr	r3, [pc, #148]	; (8004a78 <screen0x0a+0x3e4>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d13b      	bne.n	8004a62 <screen0x0a+0x3ce>
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f003 fce1 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 80049f2:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <screen0x0a+0x3e4>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d135      	bne.n	8004a66 <screen0x0a+0x3d2>
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f003 fcd9 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 8004a02:	4b1d      	ldr	r3, [pc, #116]	; (8004a78 <screen0x0a+0x3e4>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d12f      	bne.n	8004a6a <screen0x0a+0x3d6>
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f003 fcd1 	bl	80083b4 <HAL_Delay>
	while(currentTask == 0)
 8004a12:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <screen0x0a+0x3e4>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f43f ae7f 	beq.w	800471a <screen0x0a+0x86>
		else break;
	}
}
 8004a1c:	e026      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a1e:	bf00      	nop
 8004a20:	e024      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a22:	bf00      	nop
 8004a24:	e022      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a26:	bf00      	nop
 8004a28:	e020      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a2a:	bf00      	nop
 8004a2c:	e01e      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a2e:	bf00      	nop
 8004a30:	e01c      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a32:	bf00      	nop
 8004a34:	e01a      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a36:	bf00      	nop
 8004a38:	e018      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a3a:	bf00      	nop
 8004a3c:	e016      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a3e:	bf00      	nop
 8004a40:	e014      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a42:	bf00      	nop
 8004a44:	e012      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a46:	bf00      	nop
 8004a48:	e010      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a4a:	bf00      	nop
 8004a4c:	e00e      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a4e:	bf00      	nop
 8004a50:	e00c      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a52:	bf00      	nop
 8004a54:	e00a      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a56:	bf00      	nop
 8004a58:	e008      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a5a:	bf00      	nop
 8004a5c:	e006      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a5e:	bf00      	nop
 8004a60:	e004      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a62:	bf00      	nop
 8004a64:	e002      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a66:	bf00      	nop
 8004a68:	e000      	b.n	8004a6c <screen0x0a+0x3d8>
		else break;
 8004a6a:	bf00      	nop
}
 8004a6c:	bf00      	nop
 8004a6e:	3720      	adds	r7, #32
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	0800c378 	.word	0x0800c378
 8004a78:	200007fa 	.word	0x200007fa

08004a7c <screen0x0b>:


// THIRD OFFER
void screen0x0b(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
	int  holdTime   		  = 125;
 8004a82:	237d      	movs	r3, #125	; 0x7d
 8004a84:	61fb      	str	r3, [r7, #28]
	int  wordFlap   		  = 25;
 8004a86:	2319      	movs	r3, #25
 8004a88:	61bb      	str	r3, [r7, #24]
	int  littley			  = 140;
 8004a8a:	238c      	movs	r3, #140	; 0x8c
 8004a8c:	617b      	str	r3, [r7, #20]
	int  littlex			  = 225;
 8004a8e:	23e1      	movs	r3, #225	; 0xe1
 8004a90:	613b      	str	r3, [r7, #16]
	int  bigy                 = 112;
 8004a92:	2370      	movs	r3, #112	; 0x70
 8004a94:	60fb      	str	r3, [r7, #12]
	int  bigx1                = 225;
 8004a96:	23e1      	movs	r3, #225	; 0xe1
 8004a98:	60bb      	str	r3, [r7, #8]
	int  bigx2                = 656;
 8004a9a:	f44f 7324 	mov.w	r3, #656	; 0x290
 8004a9e:	607b      	str	r3, [r7, #4]
	unsigned short  TextColor = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	807b      	strh	r3, [r7, #2]

	// Clear Screen
	Foreground_color_256(color256_black);
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f7fd fbe2 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8004aaa:	2000      	movs	r0, #0
 8004aac:	f7fd fc01 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f7fc fe8e 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 8004ab8:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8004abc:	f240 108f 	movw	r0, #399	; 0x18f
 8004ac0:	f7fc feb8 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 8004ac4:	f7fc ff76 	bl	80019b4 <Start_Square_Fill>

    if(fullcolor) Foreground_color_256(color256_white);
 8004ac8:	4b97      	ldr	r3, [pc, #604]	; (8004d28 <screen0x0b+0x2ac>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <screen0x0b+0x5c>
 8004ad0:	20ff      	movs	r0, #255	; 0xff
 8004ad2:	f7fd fbcc 	bl	800226e <Foreground_color_256>
 8004ad6:	e002      	b.n	8004ade <screen0x0b+0x62>
    else Foreground_color_256(MONOCHROME_COLOR);
 8004ad8:	201f      	movs	r0, #31
 8004ada:	f7fd fbc8 	bl	800226e <Foreground_color_256>

	Background_color_256(color256_black);
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f7fd fbe7 	bl	80022b2 <Background_color_256>
	CGROM_Select_Genitop_FontROM();
 8004ae4:	f7fd fa09 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8004ae8:	f7fd fb93 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	//Font_Select_12x24_24x24();
	Font_Select_16x32_32x32();
 8004aec:	f7fd fa39 	bl	8001f62 <Font_Select_16x32_32x32>
	Set_GTFont_Decoder(0x21);
 8004af0:	2021      	movs	r0, #33	; 0x21
 8004af2:	f7fd fbac 	bl	800224e <Set_GTFont_Decoder>

	Font_Background_select_Color();
 8004af6:	f7fd fa90 	bl	800201a <Font_Background_select_Color>
	//Font_Background_select_Transparency();

	currentTask = 0;
 8004afa:	4b8c      	ldr	r3, [pc, #560]	; (8004d2c <screen0x0b+0x2b0>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]
	while(currentTask == 0)
 8004b00:	e17b      	b.n	8004dfa <screen0x0b+0x37e>
	{
		TextColor = RandomColor_256();
 8004b02:	f002 fd4d 	bl	80075a0 <RandomColor_256>
 8004b06:	4603      	mov	r3, r0
 8004b08:	807b      	strh	r3, [r7, #2]

	    if(fullcolor) Foreground_color_256(TextColor);
 8004b0a:	4b87      	ldr	r3, [pc, #540]	; (8004d28 <screen0x0b+0x2ac>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <screen0x0b+0xa2>
 8004b12:	887b      	ldrh	r3, [r7, #2]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fd fba9 	bl	800226e <Foreground_color_256>
 8004b1c:	e002      	b.n	8004b24 <screen0x0b+0xa8>
	    else Foreground_color_256(MONOCHROME_COLOR);
 8004b1e:	201f      	movs	r0, #31
 8004b20:	f7fd fba5 	bl	800226e <Foreground_color_256>

		Goto_Text_XY(bigy,bigx1);       //  Y, X
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	b292      	uxth	r2, r2
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fc fe1c 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004b34:	f7fd faeb 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8004b38:	f7fd fb51 	bl	80021de <Font_Height_X4>
		Show_String("THIRD");
 8004b3c:	487c      	ldr	r0, [pc, #496]	; (8004d30 <screen0x0b+0x2b4>)
 8004b3e:	f7fd fbda 	bl	80022f6 <Show_String>

		Goto_Text_XY(bigy,bigx2);       //  Y, X
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	b292      	uxth	r2, r2
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fc fe0d 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004b52:	f7fd fadc 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8004b56:	f7fd fb42 	bl	80021de <Font_Height_X4>
		Show_String("OFFER");
 8004b5a:	4876      	ldr	r0, [pc, #472]	; (8004d34 <screen0x0b+0x2b8>)
 8004b5c:	f7fd fbcb 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(holdTime);
 8004b60:	4b72      	ldr	r3, [pc, #456]	; (8004d2c <screen0x0b+0x2b0>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f040 814e 	bne.w	8004e06 <screen0x0b+0x38a>
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f003 fc21 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 8004b72:	4b6e      	ldr	r3, [pc, #440]	; (8004d2c <screen0x0b+0x2b0>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f040 8147 	bne.w	8004e0a <screen0x0b+0x38e>
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f003 fc18 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 8004b84:	4b69      	ldr	r3, [pc, #420]	; (8004d2c <screen0x0b+0x2b0>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f040 8140 	bne.w	8004e0e <screen0x0b+0x392>
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f003 fc0f 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 8004b96:	4b65      	ldr	r3, [pc, #404]	; (8004d2c <screen0x0b+0x2b0>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f040 8139 	bne.w	8004e12 <screen0x0b+0x396>
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f003 fc06 	bl	80083b4 <HAL_Delay>
		else break;

		Foreground_color_256(color256_black);
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f7fd fb60 	bl	800226e <Foreground_color_256>
		Goto_Text_XY(bigy,bigx1);       //  Y, X
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	b292      	uxth	r2, r2
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fc fdd7 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004bbe:	f7fd faa6 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8004bc2:	f7fd fb0c 	bl	80021de <Font_Height_X4>
		Show_String("THIRD");
 8004bc6:	485a      	ldr	r0, [pc, #360]	; (8004d30 <screen0x0b+0x2b4>)
 8004bc8:	f7fd fb95 	bl	80022f6 <Show_String>


	    if(fullcolor) Foreground_color_256(TextColor);
 8004bcc:	4b56      	ldr	r3, [pc, #344]	; (8004d28 <screen0x0b+0x2ac>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <screen0x0b+0x164>
 8004bd4:	887b      	ldrh	r3, [r7, #2]
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fd fb48 	bl	800226e <Foreground_color_256>
 8004bde:	e002      	b.n	8004be6 <screen0x0b+0x16a>
	    else Foreground_color_256(MONOCHROME_COLOR);
 8004be0:	201f      	movs	r0, #31
 8004be2:	f7fd fb44 	bl	800226e <Foreground_color_256>

		Goto_Text_XY(littley,bigx1);       //  Y, X
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	b292      	uxth	r2, r2
 8004bee:	4611      	mov	r1, r2
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fc fdbb 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004bf6:	f7fd fa8a 	bl	800210e <Font_Width_X4>
		Font_Height_X3();
 8004bfa:	f7fd fad6 	bl	80021aa <Font_Height_X3>
		Show_String("THIRD");
 8004bfe:	484c      	ldr	r0, [pc, #304]	; (8004d30 <screen0x0b+0x2b4>)
 8004c00:	f7fd fb79 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(wordFlap);
 8004c04:	4b49      	ldr	r3, [pc, #292]	; (8004d2c <screen0x0b+0x2b0>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f040 8104 	bne.w	8004e16 <screen0x0b+0x39a>
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f003 fbcf 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004c16:	4b45      	ldr	r3, [pc, #276]	; (8004d2c <screen0x0b+0x2b0>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f040 80fd 	bne.w	8004e1a <screen0x0b+0x39e>
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f003 fbc6 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004c28:	4b40      	ldr	r3, [pc, #256]	; (8004d2c <screen0x0b+0x2b0>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f040 80f6 	bne.w	8004e1e <screen0x0b+0x3a2>
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f003 fbbd 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004c3a:	4b3c      	ldr	r3, [pc, #240]	; (8004d2c <screen0x0b+0x2b0>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f040 80ef 	bne.w	8004e22 <screen0x0b+0x3a6>
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f003 fbb4 	bl	80083b4 <HAL_Delay>
		else break;

		Foreground_color_256(color256_black);
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f7fd fb0e 	bl	800226e <Foreground_color_256>
		Goto_Text_XY(littley,littlex);       //  Y, X
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fc fd85 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004c62:	f7fd fa54 	bl	800210e <Font_Width_X4>
		Font_Height_X3();
 8004c66:	f7fd faa0 	bl	80021aa <Font_Height_X3>
		Show_String("THIRD");
 8004c6a:	4831      	ldr	r0, [pc, #196]	; (8004d30 <screen0x0b+0x2b4>)
 8004c6c:	f7fd fb43 	bl	80022f6 <Show_String>

	    if(fullcolor) Foreground_color_256(TextColor);
 8004c70:	4b2d      	ldr	r3, [pc, #180]	; (8004d28 <screen0x0b+0x2ac>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <screen0x0b+0x208>
 8004c78:	887b      	ldrh	r3, [r7, #2]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fd faf6 	bl	800226e <Foreground_color_256>
 8004c82:	e002      	b.n	8004c8a <screen0x0b+0x20e>
	    else Foreground_color_256(MONOCHROME_COLOR);
 8004c84:	201f      	movs	r0, #31
 8004c86:	f7fd faf2 	bl	800226e <Foreground_color_256>

		Goto_Text_XY(bigy,bigx1);       //  Y, X
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	b292      	uxth	r2, r2
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fc fd69 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004c9a:	f7fd fa38 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8004c9e:	f7fd fa9e 	bl	80021de <Font_Height_X4>
		Show_String("THIRD");
 8004ca2:	4823      	ldr	r0, [pc, #140]	; (8004d30 <screen0x0b+0x2b4>)
 8004ca4:	f7fd fb27 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(wordFlap);
 8004ca8:	4b20      	ldr	r3, [pc, #128]	; (8004d2c <screen0x0b+0x2b0>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f040 80ba 	bne.w	8004e26 <screen0x0b+0x3aa>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f003 fb7d 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004cba:	4b1c      	ldr	r3, [pc, #112]	; (8004d2c <screen0x0b+0x2b0>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f040 80b3 	bne.w	8004e2a <screen0x0b+0x3ae>
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f003 fb74 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004ccc:	4b17      	ldr	r3, [pc, #92]	; (8004d2c <screen0x0b+0x2b0>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f040 80ac 	bne.w	8004e2e <screen0x0b+0x3b2>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f003 fb6b 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004cde:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <screen0x0b+0x2b0>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f040 80a5 	bne.w	8004e32 <screen0x0b+0x3b6>
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f003 fb62 	bl	80083b4 <HAL_Delay>
		else break;

		Goto_Text_XY(bigy,bigx2);       //  Y, X
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	b292      	uxth	r2, r2
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fc fd36 	bl	800176c <Goto_Text_XY>
		Foreground_color_256(color256_black);
 8004d00:	2000      	movs	r0, #0
 8004d02:	f7fd fab4 	bl	800226e <Foreground_color_256>
		Font_Width_X4();
 8004d06:	f7fd fa02 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8004d0a:	f7fd fa68 	bl	80021de <Font_Height_X4>
		Show_String("OFFER");
 8004d0e:	4809      	ldr	r0, [pc, #36]	; (8004d34 <screen0x0b+0x2b8>)
 8004d10:	f7fd faf1 	bl	80022f6 <Show_String>

	    if(fullcolor) Foreground_color_256(TextColor);
 8004d14:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <screen0x0b+0x2ac>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00d      	beq.n	8004d38 <screen0x0b+0x2bc>
 8004d1c:	887b      	ldrh	r3, [r7, #2]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fd faa4 	bl	800226e <Foreground_color_256>
 8004d26:	e00a      	b.n	8004d3e <screen0x0b+0x2c2>
 8004d28:	20000000 	.word	0x20000000
 8004d2c:	200007fa 	.word	0x200007fa
 8004d30:	0800c388 	.word	0x0800c388
 8004d34:	0800c378 	.word	0x0800c378
	    else Foreground_color_256(MONOCHROME_COLOR);
 8004d38:	201f      	movs	r0, #31
 8004d3a:	f7fd fa98 	bl	800226e <Foreground_color_256>

		Goto_Text_XY(littley,bigx2);       //  Y, X
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	b292      	uxth	r2, r2
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fc fd0f 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004d4e:	f7fd f9de 	bl	800210e <Font_Width_X4>
		Font_Height_X3();
 8004d52:	f7fd fa2a 	bl	80021aa <Font_Height_X3>
		Show_String("OFFER");
 8004d56:	4841      	ldr	r0, [pc, #260]	; (8004e5c <screen0x0b+0x3e0>)
 8004d58:	f7fd facd 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(wordFlap);
 8004d5c:	4b40      	ldr	r3, [pc, #256]	; (8004e60 <screen0x0b+0x3e4>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d168      	bne.n	8004e36 <screen0x0b+0x3ba>
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f003 fb24 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004d6c:	4b3c      	ldr	r3, [pc, #240]	; (8004e60 <screen0x0b+0x3e4>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d162      	bne.n	8004e3a <screen0x0b+0x3be>
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f003 fb1c 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004d7c:	4b38      	ldr	r3, [pc, #224]	; (8004e60 <screen0x0b+0x3e4>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d15c      	bne.n	8004e3e <screen0x0b+0x3c2>
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f003 fb14 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004d8c:	4b34      	ldr	r3, [pc, #208]	; (8004e60 <screen0x0b+0x3e4>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d156      	bne.n	8004e42 <screen0x0b+0x3c6>
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f003 fb0c 	bl	80083b4 <HAL_Delay>
//		Goto_Text_XY(164,640);       //  Y, X
//		Font_Width_X4();
//		Font_Height_X3();
//		Show_String("OFFER");

		Goto_Text_XY(bigy,bigx2);       //  Y, X
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	b292      	uxth	r2, r2
 8004da4:	4611      	mov	r1, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fc fce0 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004dac:	f7fd f9af 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8004db0:	f7fd fa15 	bl	80021de <Font_Height_X4>
		Show_String("OFFER");
 8004db4:	4829      	ldr	r0, [pc, #164]	; (8004e5c <screen0x0b+0x3e0>)
 8004db6:	f7fd fa9e 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(holdTime);
 8004dba:	4b29      	ldr	r3, [pc, #164]	; (8004e60 <screen0x0b+0x3e4>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d141      	bne.n	8004e46 <screen0x0b+0x3ca>
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f003 faf5 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 8004dca:	4b25      	ldr	r3, [pc, #148]	; (8004e60 <screen0x0b+0x3e4>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d13b      	bne.n	8004e4a <screen0x0b+0x3ce>
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f003 faed 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 8004dda:	4b21      	ldr	r3, [pc, #132]	; (8004e60 <screen0x0b+0x3e4>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d135      	bne.n	8004e4e <screen0x0b+0x3d2>
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f003 fae5 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 8004dea:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <screen0x0b+0x3e4>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d12f      	bne.n	8004e52 <screen0x0b+0x3d6>
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f003 fadd 	bl	80083b4 <HAL_Delay>
	while(currentTask == 0)
 8004dfa:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <screen0x0b+0x3e4>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f43f ae7f 	beq.w	8004b02 <screen0x0b+0x86>
		else break;
	}
}
 8004e04:	e026      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e06:	bf00      	nop
 8004e08:	e024      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e0a:	bf00      	nop
 8004e0c:	e022      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e0e:	bf00      	nop
 8004e10:	e020      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e12:	bf00      	nop
 8004e14:	e01e      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e16:	bf00      	nop
 8004e18:	e01c      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e1a:	bf00      	nop
 8004e1c:	e01a      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e1e:	bf00      	nop
 8004e20:	e018      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e22:	bf00      	nop
 8004e24:	e016      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e26:	bf00      	nop
 8004e28:	e014      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e2a:	bf00      	nop
 8004e2c:	e012      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e2e:	bf00      	nop
 8004e30:	e010      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e32:	bf00      	nop
 8004e34:	e00e      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e36:	bf00      	nop
 8004e38:	e00c      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e3a:	bf00      	nop
 8004e3c:	e00a      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e3e:	bf00      	nop
 8004e40:	e008      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e42:	bf00      	nop
 8004e44:	e006      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e46:	bf00      	nop
 8004e48:	e004      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e4a:	bf00      	nop
 8004e4c:	e002      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <screen0x0b+0x3d8>
		else break;
 8004e52:	bf00      	nop
}
 8004e54:	bf00      	nop
 8004e56:	3720      	adds	r7, #32
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	0800c378 	.word	0x0800c378
 8004e60:	200007fa 	.word	0x200007fa

08004e64 <screen0x0c>:


// FINAL OFFER
void screen0x0c(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
	int  holdTime   		  = 125;
 8004e6a:	237d      	movs	r3, #125	; 0x7d
 8004e6c:	61fb      	str	r3, [r7, #28]
	int  wordFlap   		  = 25;
 8004e6e:	2319      	movs	r3, #25
 8004e70:	61bb      	str	r3, [r7, #24]
	int  littley			  = 140;
 8004e72:	238c      	movs	r3, #140	; 0x8c
 8004e74:	617b      	str	r3, [r7, #20]
	int  littlex			  = 225;
 8004e76:	23e1      	movs	r3, #225	; 0xe1
 8004e78:	613b      	str	r3, [r7, #16]
	int  bigy                 = 112;
 8004e7a:	2370      	movs	r3, #112	; 0x70
 8004e7c:	60fb      	str	r3, [r7, #12]
	int  bigx1                = 225;
 8004e7e:	23e1      	movs	r3, #225	; 0xe1
 8004e80:	60bb      	str	r3, [r7, #8]
	int  bigx2                = 656;
 8004e82:	f44f 7324 	mov.w	r3, #656	; 0x290
 8004e86:	607b      	str	r3, [r7, #4]
	unsigned short  TextColor = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	807b      	strh	r3, [r7, #2]

	// Clear Screen
	Foreground_color_256(color256_black);
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	f7fd f9ee 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8004e92:	2000      	movs	r0, #0
 8004e94:	f7fd fa0d 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 8004e98:	2100      	movs	r1, #0
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f7fc fc9a 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 8004ea0:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8004ea4:	f240 108f 	movw	r0, #399	; 0x18f
 8004ea8:	f7fc fcc4 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 8004eac:	f7fc fd82 	bl	80019b4 <Start_Square_Fill>

    if(fullcolor) Foreground_color_256(color256_white);
 8004eb0:	4b97      	ldr	r3, [pc, #604]	; (8005110 <screen0x0c+0x2ac>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <screen0x0c+0x5c>
 8004eb8:	20ff      	movs	r0, #255	; 0xff
 8004eba:	f7fd f9d8 	bl	800226e <Foreground_color_256>
 8004ebe:	e002      	b.n	8004ec6 <screen0x0c+0x62>
    else Foreground_color_256(MONOCHROME_COLOR);
 8004ec0:	201f      	movs	r0, #31
 8004ec2:	f7fd f9d4 	bl	800226e <Foreground_color_256>
    Background_color_256(color256_black);
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	f7fd f9f3 	bl	80022b2 <Background_color_256>
	CGROM_Select_Genitop_FontROM();
 8004ecc:	f7fd f815 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8004ed0:	f7fd f99f 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	//Font_Select_12x24_24x24();
	Font_Select_16x32_32x32();
 8004ed4:	f7fd f845 	bl	8001f62 <Font_Select_16x32_32x32>
	Set_GTFont_Decoder(0x21);
 8004ed8:	2021      	movs	r0, #33	; 0x21
 8004eda:	f7fd f9b8 	bl	800224e <Set_GTFont_Decoder>
	Font_Background_select_Color();
 8004ede:	f7fd f89c 	bl	800201a <Font_Background_select_Color>
	//Font_Background_select_Transparency();

	currentTask = 0;
 8004ee2:	4b8c      	ldr	r3, [pc, #560]	; (8005114 <screen0x0c+0x2b0>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	701a      	strb	r2, [r3, #0]
	while(currentTask == 0)
 8004ee8:	e17b      	b.n	80051e2 <screen0x0c+0x37e>
	{
		TextColor = RandomColor_256();
 8004eea:	f002 fb59 	bl	80075a0 <RandomColor_256>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	807b      	strh	r3, [r7, #2]

	    if(fullcolor) Foreground_color_256(TextColor);
 8004ef2:	4b87      	ldr	r3, [pc, #540]	; (8005110 <screen0x0c+0x2ac>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <screen0x0c+0xa2>
 8004efa:	887b      	ldrh	r3, [r7, #2]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fd f9b5 	bl	800226e <Foreground_color_256>
 8004f04:	e002      	b.n	8004f0c <screen0x0c+0xa8>
	    else Foreground_color_256(MONOCHROME_COLOR);
 8004f06:	201f      	movs	r0, #31
 8004f08:	f7fd f9b1 	bl	800226e <Foreground_color_256>

	    Goto_Text_XY(bigy,bigx1);       //  Y, X
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	b292      	uxth	r2, r2
 8004f14:	4611      	mov	r1, r2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fc fc28 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004f1c:	f7fd f8f7 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8004f20:	f7fd f95d 	bl	80021de <Font_Height_X4>
		Show_String("FINAL");
 8004f24:	487c      	ldr	r0, [pc, #496]	; (8005118 <screen0x0c+0x2b4>)
 8004f26:	f7fd f9e6 	bl	80022f6 <Show_String>

		Goto_Text_XY(bigy,bigx2);       //  Y, X
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	b292      	uxth	r2, r2
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fc fc19 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004f3a:	f7fd f8e8 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8004f3e:	f7fd f94e 	bl	80021de <Font_Height_X4>
		Show_String("OFFER");
 8004f42:	4876      	ldr	r0, [pc, #472]	; (800511c <screen0x0c+0x2b8>)
 8004f44:	f7fd f9d7 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(holdTime);
 8004f48:	4b72      	ldr	r3, [pc, #456]	; (8005114 <screen0x0c+0x2b0>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f040 814e 	bne.w	80051ee <screen0x0c+0x38a>
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f003 fa2d 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 8004f5a:	4b6e      	ldr	r3, [pc, #440]	; (8005114 <screen0x0c+0x2b0>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f040 8147 	bne.w	80051f2 <screen0x0c+0x38e>
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f003 fa24 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 8004f6c:	4b69      	ldr	r3, [pc, #420]	; (8005114 <screen0x0c+0x2b0>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f040 8140 	bne.w	80051f6 <screen0x0c+0x392>
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f003 fa1b 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 8004f7e:	4b65      	ldr	r3, [pc, #404]	; (8005114 <screen0x0c+0x2b0>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f040 8139 	bne.w	80051fa <screen0x0c+0x396>
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f003 fa12 	bl	80083b4 <HAL_Delay>
		else break;

		Foreground_color_256(color256_black);
 8004f90:	2000      	movs	r0, #0
 8004f92:	f7fd f96c 	bl	800226e <Foreground_color_256>
		Goto_Text_XY(bigy,bigx1);       //  Y, X
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	b292      	uxth	r2, r2
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fc fbe3 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004fa6:	f7fd f8b2 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8004faa:	f7fd f918 	bl	80021de <Font_Height_X4>
		Show_String("FINAL");
 8004fae:	485a      	ldr	r0, [pc, #360]	; (8005118 <screen0x0c+0x2b4>)
 8004fb0:	f7fd f9a1 	bl	80022f6 <Show_String>


	    if(fullcolor) Foreground_color_256(TextColor);
 8004fb4:	4b56      	ldr	r3, [pc, #344]	; (8005110 <screen0x0c+0x2ac>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <screen0x0c+0x164>
 8004fbc:	887b      	ldrh	r3, [r7, #2]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fd f954 	bl	800226e <Foreground_color_256>
 8004fc6:	e002      	b.n	8004fce <screen0x0c+0x16a>
	    else Foreground_color_256(MONOCHROME_COLOR);
 8004fc8:	201f      	movs	r0, #31
 8004fca:	f7fd f950 	bl	800226e <Foreground_color_256>

	    Goto_Text_XY(littley,bigx1);       //  Y, X
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	b292      	uxth	r2, r2
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fc fbc7 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8004fde:	f7fd f896 	bl	800210e <Font_Width_X4>
		Font_Height_X3();
 8004fe2:	f7fd f8e2 	bl	80021aa <Font_Height_X3>
		Show_String("FINAL");
 8004fe6:	484c      	ldr	r0, [pc, #304]	; (8005118 <screen0x0c+0x2b4>)
 8004fe8:	f7fd f985 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(wordFlap);
 8004fec:	4b49      	ldr	r3, [pc, #292]	; (8005114 <screen0x0c+0x2b0>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f040 8104 	bne.w	80051fe <screen0x0c+0x39a>
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f003 f9db 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8004ffe:	4b45      	ldr	r3, [pc, #276]	; (8005114 <screen0x0c+0x2b0>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	f040 80fd 	bne.w	8005202 <screen0x0c+0x39e>
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	4618      	mov	r0, r3
 800500c:	f003 f9d2 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8005010:	4b40      	ldr	r3, [pc, #256]	; (8005114 <screen0x0c+0x2b0>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f040 80f6 	bne.w	8005206 <screen0x0c+0x3a2>
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	4618      	mov	r0, r3
 800501e:	f003 f9c9 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8005022:	4b3c      	ldr	r3, [pc, #240]	; (8005114 <screen0x0c+0x2b0>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f040 80ef 	bne.w	800520a <screen0x0c+0x3a6>
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	4618      	mov	r0, r3
 8005030:	f003 f9c0 	bl	80083b4 <HAL_Delay>
		else break;

		Foreground_color_256(color256_black);
 8005034:	2000      	movs	r0, #0
 8005036:	f7fd f91a 	bl	800226e <Foreground_color_256>
		Goto_Text_XY(littley,littlex);       //  Y, X
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	b29b      	uxth	r3, r3
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	b292      	uxth	r2, r2
 8005042:	4611      	mov	r1, r2
 8005044:	4618      	mov	r0, r3
 8005046:	f7fc fb91 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 800504a:	f7fd f860 	bl	800210e <Font_Width_X4>
		Font_Height_X3();
 800504e:	f7fd f8ac 	bl	80021aa <Font_Height_X3>
		Show_String("FINAL");
 8005052:	4831      	ldr	r0, [pc, #196]	; (8005118 <screen0x0c+0x2b4>)
 8005054:	f7fd f94f 	bl	80022f6 <Show_String>

	    if(fullcolor) Foreground_color_256(TextColor);
 8005058:	4b2d      	ldr	r3, [pc, #180]	; (8005110 <screen0x0c+0x2ac>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <screen0x0c+0x208>
 8005060:	887b      	ldrh	r3, [r7, #2]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	4618      	mov	r0, r3
 8005066:	f7fd f902 	bl	800226e <Foreground_color_256>
 800506a:	e002      	b.n	8005072 <screen0x0c+0x20e>
	    else Foreground_color_256(MONOCHROME_COLOR);
 800506c:	201f      	movs	r0, #31
 800506e:	f7fd f8fe 	bl	800226e <Foreground_color_256>

	    Goto_Text_XY(bigy,bigx1);       //  Y, X
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	b29b      	uxth	r3, r3
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	b292      	uxth	r2, r2
 800507a:	4611      	mov	r1, r2
 800507c:	4618      	mov	r0, r3
 800507e:	f7fc fb75 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8005082:	f7fd f844 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8005086:	f7fd f8aa 	bl	80021de <Font_Height_X4>
		Show_String("FINAL");
 800508a:	4823      	ldr	r0, [pc, #140]	; (8005118 <screen0x0c+0x2b4>)
 800508c:	f7fd f933 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(wordFlap);
 8005090:	4b20      	ldr	r3, [pc, #128]	; (8005114 <screen0x0c+0x2b0>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f040 80ba 	bne.w	800520e <screen0x0c+0x3aa>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	4618      	mov	r0, r3
 800509e:	f003 f989 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 80050a2:	4b1c      	ldr	r3, [pc, #112]	; (8005114 <screen0x0c+0x2b0>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f040 80b3 	bne.w	8005212 <screen0x0c+0x3ae>
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f003 f980 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 80050b4:	4b17      	ldr	r3, [pc, #92]	; (8005114 <screen0x0c+0x2b0>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f040 80ac 	bne.w	8005216 <screen0x0c+0x3b2>
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f003 f977 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 80050c6:	4b13      	ldr	r3, [pc, #76]	; (8005114 <screen0x0c+0x2b0>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 80a5 	bne.w	800521a <screen0x0c+0x3b6>
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f003 f96e 	bl	80083b4 <HAL_Delay>
		else break;

		Goto_Text_XY(bigy,bigx2);       //  Y, X
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	b292      	uxth	r2, r2
 80050e0:	4611      	mov	r1, r2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fc fb42 	bl	800176c <Goto_Text_XY>
		Foreground_color_256(color256_black);
 80050e8:	2000      	movs	r0, #0
 80050ea:	f7fd f8c0 	bl	800226e <Foreground_color_256>
		Font_Width_X4();
 80050ee:	f7fd f80e 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 80050f2:	f7fd f874 	bl	80021de <Font_Height_X4>
		Show_String("OFFER");
 80050f6:	4809      	ldr	r0, [pc, #36]	; (800511c <screen0x0c+0x2b8>)
 80050f8:	f7fd f8fd 	bl	80022f6 <Show_String>

	    if(fullcolor) Foreground_color_256(TextColor);
 80050fc:	4b04      	ldr	r3, [pc, #16]	; (8005110 <screen0x0c+0x2ac>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00d      	beq.n	8005120 <screen0x0c+0x2bc>
 8005104:	887b      	ldrh	r3, [r7, #2]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	4618      	mov	r0, r3
 800510a:	f7fd f8b0 	bl	800226e <Foreground_color_256>
 800510e:	e00a      	b.n	8005126 <screen0x0c+0x2c2>
 8005110:	20000000 	.word	0x20000000
 8005114:	200007fa 	.word	0x200007fa
 8005118:	0800c390 	.word	0x0800c390
 800511c:	0800c378 	.word	0x0800c378
	    else Foreground_color_256(MONOCHROME_COLOR);
 8005120:	201f      	movs	r0, #31
 8005122:	f7fd f8a4 	bl	800226e <Foreground_color_256>

	    Goto_Text_XY(littley,bigx2);       //  Y, X
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	b29b      	uxth	r3, r3
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	b292      	uxth	r2, r2
 800512e:	4611      	mov	r1, r2
 8005130:	4618      	mov	r0, r3
 8005132:	f7fc fb1b 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8005136:	f7fc ffea 	bl	800210e <Font_Width_X4>
		Font_Height_X3();
 800513a:	f7fd f836 	bl	80021aa <Font_Height_X3>
		Show_String("OFFER");
 800513e:	4841      	ldr	r0, [pc, #260]	; (8005244 <screen0x0c+0x3e0>)
 8005140:	f7fd f8d9 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(wordFlap);
 8005144:	4b40      	ldr	r3, [pc, #256]	; (8005248 <screen0x0c+0x3e4>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d168      	bne.n	800521e <screen0x0c+0x3ba>
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	4618      	mov	r0, r3
 8005150:	f003 f930 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8005154:	4b3c      	ldr	r3, [pc, #240]	; (8005248 <screen0x0c+0x3e4>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d162      	bne.n	8005222 <screen0x0c+0x3be>
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	4618      	mov	r0, r3
 8005160:	f003 f928 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8005164:	4b38      	ldr	r3, [pc, #224]	; (8005248 <screen0x0c+0x3e4>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d15c      	bne.n	8005226 <screen0x0c+0x3c2>
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	4618      	mov	r0, r3
 8005170:	f003 f920 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(wordFlap);
 8005174:	4b34      	ldr	r3, [pc, #208]	; (8005248 <screen0x0c+0x3e4>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d156      	bne.n	800522a <screen0x0c+0x3c6>
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	4618      	mov	r0, r3
 8005180:	f003 f918 	bl	80083b4 <HAL_Delay>
		else break;

		Goto_Text_XY(bigy,bigx2);       //  Y, X
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	b29b      	uxth	r3, r3
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	b292      	uxth	r2, r2
 800518c:	4611      	mov	r1, r2
 800518e:	4618      	mov	r0, r3
 8005190:	f7fc faec 	bl	800176c <Goto_Text_XY>
		Font_Width_X4();
 8005194:	f7fc ffbb 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8005198:	f7fd f821 	bl	80021de <Font_Height_X4>
		Show_String("OFFER");
 800519c:	4829      	ldr	r0, [pc, #164]	; (8005244 <screen0x0c+0x3e0>)
 800519e:	f7fd f8aa 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(holdTime);
 80051a2:	4b29      	ldr	r3, [pc, #164]	; (8005248 <screen0x0c+0x3e4>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d141      	bne.n	800522e <screen0x0c+0x3ca>
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f003 f901 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 80051b2:	4b25      	ldr	r3, [pc, #148]	; (8005248 <screen0x0c+0x3e4>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d13b      	bne.n	8005232 <screen0x0c+0x3ce>
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4618      	mov	r0, r3
 80051be:	f003 f8f9 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 80051c2:	4b21      	ldr	r3, [pc, #132]	; (8005248 <screen0x0c+0x3e4>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d135      	bne.n	8005236 <screen0x0c+0x3d2>
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f003 f8f1 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(holdTime);
 80051d2:	4b1d      	ldr	r3, [pc, #116]	; (8005248 <screen0x0c+0x3e4>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d12f      	bne.n	800523a <screen0x0c+0x3d6>
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4618      	mov	r0, r3
 80051de:	f003 f8e9 	bl	80083b4 <HAL_Delay>
	while(currentTask == 0)
 80051e2:	4b19      	ldr	r3, [pc, #100]	; (8005248 <screen0x0c+0x3e4>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f43f ae7f 	beq.w	8004eea <screen0x0c+0x86>
		else break;
	}
}
 80051ec:	e026      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 80051ee:	bf00      	nop
 80051f0:	e024      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 80051f2:	bf00      	nop
 80051f4:	e022      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 80051f6:	bf00      	nop
 80051f8:	e020      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 80051fa:	bf00      	nop
 80051fc:	e01e      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 80051fe:	bf00      	nop
 8005200:	e01c      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 8005202:	bf00      	nop
 8005204:	e01a      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 8005206:	bf00      	nop
 8005208:	e018      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 800520a:	bf00      	nop
 800520c:	e016      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 800520e:	bf00      	nop
 8005210:	e014      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 8005212:	bf00      	nop
 8005214:	e012      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 8005216:	bf00      	nop
 8005218:	e010      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 800521a:	bf00      	nop
 800521c:	e00e      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 800521e:	bf00      	nop
 8005220:	e00c      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 8005222:	bf00      	nop
 8005224:	e00a      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 8005226:	bf00      	nop
 8005228:	e008      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 800522a:	bf00      	nop
 800522c:	e006      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 800522e:	bf00      	nop
 8005230:	e004      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 8005232:	bf00      	nop
 8005234:	e002      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 8005236:	bf00      	nop
 8005238:	e000      	b.n	800523c <screen0x0c+0x3d8>
		else break;
 800523a:	bf00      	nop
}
 800523c:	bf00      	nop
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	0800c378 	.word	0x0800c378
 8005248:	200007fa 	.word	0x200007fa

0800524c <screen0x0d>:


// BEST PLAY SAYS  |  "TAKE OFFER"
void screen0x0d(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
	int          holdDelay =  125;
 8005252:	237d      	movs	r3, #125	; 0x7d
 8005254:	603b      	str	r3, [r7, #0]
	unsigned int randColor = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	607b      	str	r3, [r7, #4]
	srand(HAL_GetTick());
 800525a:	f003 f89f 	bl	800839c <HAL_GetTick>
 800525e:	4603      	mov	r3, r0
 8005260:	4618      	mov	r0, r3
 8005262:	f005 ffc3 	bl	800b1ec <srand>

	// Clear Screen
	Foreground_color_256(color256_black);
 8005266:	2000      	movs	r0, #0
 8005268:	f7fd f801 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 800526c:	2000      	movs	r0, #0
 800526e:	f7fd f820 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 8005272:	2100      	movs	r1, #0
 8005274:	2000      	movs	r0, #0
 8005276:	f7fc faad 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 800527a:	f240 41ff 	movw	r1, #1279	; 0x4ff
 800527e:	f240 108f 	movw	r0, #399	; 0x18f
 8005282:	f7fc fad7 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 8005286:	f7fc fb95 	bl	80019b4 <Start_Square_Fill>

	CGROM_Select_Genitop_FontROM();
 800528a:	f7fc fe36 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 800528e:	f7fc ffc0 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	//Font_Select_12x24_24x24();
	Font_Select_16x32_32x32();
 8005292:	f7fc fe66 	bl	8001f62 <Font_Select_16x32_32x32>
	Set_GTFont_Decoder(0x21);
 8005296:	2021      	movs	r0, #33	; 0x21
 8005298:	f7fc ffd9 	bl	800224e <Set_GTFont_Decoder>
	Foreground_color_256(color256_white);
 800529c:	20ff      	movs	r0, #255	; 0xff
 800529e:	f7fc ffe6 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 80052a2:	2000      	movs	r0, #0
 80052a4:	f7fd f805 	bl	80022b2 <Background_color_256>
	//Disable_Font_Alignment();
	//Font_Background_select_Color();
	Font_Background_select_Transparency();
 80052a8:	f7fc fea1 	bl	8001fee <Font_Background_select_Transparency>
	Font_Width_X3();
 80052ac:	f7fc ff15 	bl	80020da <Font_Width_X3>
	Font_Height_X4();
 80052b0:	f7fc ff95 	bl	80021de <Font_Height_X4>

	currentTask = 0;
 80052b4:	4b9a      	ldr	r3, [pc, #616]	; (8005520 <screen0x0d+0x2d4>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	701a      	strb	r2, [r3, #0]

	while(currentTask == 0)
 80052ba:	e117      	b.n	80054ec <screen0x0d+0x2a0>
    {
	    if(fullcolor) randColor = RandomColor_256();
 80052bc:	4b99      	ldr	r3, [pc, #612]	; (8005524 <screen0x0d+0x2d8>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d004      	beq.n	80052ce <screen0x0d+0x82>
 80052c4:	f002 f96c 	bl	80075a0 <RandomColor_256>
 80052c8:	4603      	mov	r3, r0
 80052ca:	607b      	str	r3, [r7, #4]
 80052cc:	e001      	b.n	80052d2 <screen0x0d+0x86>
	    else randColor = MONOCHROME_COLOR;
 80052ce:	231f      	movs	r3, #31
 80052d0:	607b      	str	r3, [r7, #4]

    	// Left Box Highlighted - random color
    	Background_color_256(randColor);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fc ffeb 	bl	80022b2 <Background_color_256>
		Foreground_color_256(randColor);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fc ffc4 	bl	800226e <Foreground_color_256>
		Line_Start_XY(0,0);
 80052e6:	2100      	movs	r1, #0
 80052e8:	2000      	movs	r0, #0
 80052ea:	f7fc fa73 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(400,640);  //  Y,X
 80052ee:	f44f 7120 	mov.w	r1, #640	; 0x280
 80052f2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80052f6:	f7fc fa9d 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 80052fa:	f7fc fb5b 	bl	80019b4 <Start_Square_Fill>

		//right box - black
		Background_color_256(color256_black);
 80052fe:	2000      	movs	r0, #0
 8005300:	f7fc ffd7 	bl	80022b2 <Background_color_256>
		Foreground_color_256(color256_black);
 8005304:	2000      	movs	r0, #0
 8005306:	f7fc ffb2 	bl	800226e <Foreground_color_256>
		Line_Start_XY(0,641);
 800530a:	f240 2181 	movw	r1, #641	; 0x281
 800530e:	2000      	movs	r0, #0
 8005310:	f7fc fa60 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(399,1279);  //  Y,X
 8005314:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8005318:	f240 108f 	movw	r0, #399	; 0x18f
 800531c:	f7fc fa8a 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 8005320:	f7fc fb48 	bl	80019b4 <Start_Square_Fill>

		// Left Text - Black
		Foreground_color_256(color256_black);
 8005324:	2000      	movs	r0, #0
 8005326:	f7fc ffa2 	bl	800226e <Foreground_color_256>
		Goto_Text_XY(50,96);       //  Y, X    4-13-2024  it was 50,56
 800532a:	2160      	movs	r1, #96	; 0x60
 800532c:	2032      	movs	r0, #50	; 0x32
 800532e:	f7fc fa1d 	bl	800176c <Goto_Text_XY>
		Show_String("BEST PLAY");
 8005332:	487d      	ldr	r0, [pc, #500]	; (8005528 <screen0x0d+0x2dc>)
 8005334:	f7fc ffdf 	bl	80022f6 <Show_String>
		Goto_Text_XY(180,236);       //  Y, X  4-13-2024  it was 210,188
 8005338:	21ec      	movs	r1, #236	; 0xec
 800533a:	20b4      	movs	r0, #180	; 0xb4
 800533c:	f7fc fa16 	bl	800176c <Goto_Text_XY>
		Show_String("SAYS");
 8005340:	487a      	ldr	r0, [pc, #488]	; (800552c <screen0x0d+0x2e0>)
 8005342:	f7fc ffd8 	bl	80022f6 <Show_String>

		// Right Text - random color
		if(fullcolor) Foreground_color_256(randColor);
 8005346:	4b77      	ldr	r3, [pc, #476]	; (8005524 <screen0x0d+0x2d8>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <screen0x0d+0x10e>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	b2db      	uxtb	r3, r3
 8005352:	4618      	mov	r0, r3
 8005354:	f7fc ff8b 	bl	800226e <Foreground_color_256>
 8005358:	e002      	b.n	8005360 <screen0x0d+0x114>
		else Foreground_color_256(MONOCHROME_COLOR);
 800535a:	201f      	movs	r0, #31
 800535c:	f7fc ff87 	bl	800226e <Foreground_color_256>

		//Background_color_256(color256_black);
		Goto_Text_XY(50,728);       //  Y, X
 8005360:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 8005364:	2032      	movs	r0, #50	; 0x32
 8005366:	f7fc fa01 	bl	800176c <Goto_Text_XY>
		Show_String("\"TAKE");
 800536a:	4871      	ldr	r0, [pc, #452]	; (8005530 <screen0x0d+0x2e4>)
 800536c:	f7fc ffc3 	bl	80022f6 <Show_String>
		Goto_Text_XY(180,773);       //  Y, X  4-13-2024 it was 210,801
 8005370:	f240 3105 	movw	r1, #773	; 0x305
 8005374:	20b4      	movs	r0, #180	; 0xb4
 8005376:	f7fc f9f9 	bl	800176c <Goto_Text_XY>
		Show_String("OFFER\"");
 800537a:	486e      	ldr	r0, [pc, #440]	; (8005534 <screen0x0d+0x2e8>)
 800537c:	f7fc ffbb 	bl	80022f6 <Show_String>

		if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005380:	4b67      	ldr	r3, [pc, #412]	; (8005520 <screen0x0d+0x2d4>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	f040 80b7 	bne.w	80054f8 <screen0x0d+0x2ac>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f003 f811 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005392:	4b63      	ldr	r3, [pc, #396]	; (8005520 <screen0x0d+0x2d4>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	f040 80b0 	bne.w	80054fc <screen0x0d+0x2b0>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f003 f808 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(holdDelay);
 80053a4:	4b5e      	ldr	r3, [pc, #376]	; (8005520 <screen0x0d+0x2d4>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f040 80a9 	bne.w	8005500 <screen0x0d+0x2b4>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f002 ffff 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(holdDelay);
 80053b6:	4b5a      	ldr	r3, [pc, #360]	; (8005520 <screen0x0d+0x2d4>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f040 80a2 	bne.w	8005504 <screen0x0d+0x2b8>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f002 fff6 	bl	80083b4 <HAL_Delay>
		else break;

		// Clear Left Box
		Foreground_color_256(color256_black);
 80053c8:	2000      	movs	r0, #0
 80053ca:	f7fc ff50 	bl	800226e <Foreground_color_256>
		Background_color_256(color256_black);
 80053ce:	2000      	movs	r0, #0
 80053d0:	f7fc ff6f 	bl	80022b2 <Background_color_256>
		Line_Start_XY(0,0);
 80053d4:	2100      	movs	r1, #0
 80053d6:	2000      	movs	r0, #0
 80053d8:	f7fc f9fc 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(400,640);  //  Y,X
 80053dc:	f44f 7120 	mov.w	r1, #640	; 0x280
 80053e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80053e4:	f7fc fa26 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 80053e8:	f7fc fae4 	bl	80019b4 <Start_Square_Fill>

		// Right Box - random color
		//randColor = RandomColor_256();
		if(fullcolor) Foreground_color_256(randColor);
 80053ec:	4b4d      	ldr	r3, [pc, #308]	; (8005524 <screen0x0d+0x2d8>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <screen0x0d+0x1b4>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fc ff38 	bl	800226e <Foreground_color_256>
 80053fe:	e002      	b.n	8005406 <screen0x0d+0x1ba>
		else Foreground_color_256(MONOCHROME_COLOR);
 8005400:	201f      	movs	r0, #31
 8005402:	f7fc ff34 	bl	800226e <Foreground_color_256>
		if(fullcolor) Background_color_256(randColor);
 8005406:	4b47      	ldr	r3, [pc, #284]	; (8005524 <screen0x0d+0x2d8>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <screen0x0d+0x1ce>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	4618      	mov	r0, r3
 8005414:	f7fc ff4d 	bl	80022b2 <Background_color_256>
 8005418:	e002      	b.n	8005420 <screen0x0d+0x1d4>
		else Background_color_256(MONOCHROME_COLOR);
 800541a:	201f      	movs	r0, #31
 800541c:	f7fc ff49 	bl	80022b2 <Background_color_256>

		Line_Start_XY(0,641);
 8005420:	f240 2181 	movw	r1, #641	; 0x281
 8005424:	2000      	movs	r0, #0
 8005426:	f7fc f9d5 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(399,1279);  //  Y,X
 800542a:	f240 41ff 	movw	r1, #1279	; 0x4ff
 800542e:	f240 108f 	movw	r0, #399	; 0x18f
 8005432:	f7fc f9ff 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 8005436:	f7fc fabd 	bl	80019b4 <Start_Square_Fill>

		// Left Box Text
		if(fullcolor) Foreground_color_256(randColor);
 800543a:	4b3a      	ldr	r3, [pc, #232]	; (8005524 <screen0x0d+0x2d8>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <screen0x0d+0x202>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	4618      	mov	r0, r3
 8005448:	f7fc ff11 	bl	800226e <Foreground_color_256>
 800544c:	e002      	b.n	8005454 <screen0x0d+0x208>
		else Foreground_color_256(MONOCHROME_COLOR);
 800544e:	201f      	movs	r0, #31
 8005450:	f7fc ff0d 	bl	800226e <Foreground_color_256>
		Goto_Text_XY(50,96);       //  Y, X
 8005454:	2160      	movs	r1, #96	; 0x60
 8005456:	2032      	movs	r0, #50	; 0x32
 8005458:	f7fc f988 	bl	800176c <Goto_Text_XY>
		Show_String("BEST PLAY");
 800545c:	4832      	ldr	r0, [pc, #200]	; (8005528 <screen0x0d+0x2dc>)
 800545e:	f7fc ff4a 	bl	80022f6 <Show_String>
		Goto_Text_XY(180,236);       //  Y, X  228
 8005462:	21ec      	movs	r1, #236	; 0xec
 8005464:	20b4      	movs	r0, #180	; 0xb4
 8005466:	f7fc f981 	bl	800176c <Goto_Text_XY>
		Show_String("SAYS");
 800546a:	4830      	ldr	r0, [pc, #192]	; (800552c <screen0x0d+0x2e0>)
 800546c:	f7fc ff43 	bl	80022f6 <Show_String>

		// Right Box Text
		Foreground_color_256(color256_black);
 8005470:	2000      	movs	r0, #0
 8005472:	f7fc fefc 	bl	800226e <Foreground_color_256>
		if(fullcolor) Background_color_256(color256_white);
 8005476:	4b2b      	ldr	r3, [pc, #172]	; (8005524 <screen0x0d+0x2d8>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <screen0x0d+0x23a>
 800547e:	20ff      	movs	r0, #255	; 0xff
 8005480:	f7fc ff17 	bl	80022b2 <Background_color_256>
 8005484:	e002      	b.n	800548c <screen0x0d+0x240>
		else Background_color_256(MONOCHROME_COLOR);
 8005486:	201f      	movs	r0, #31
 8005488:	f7fc ff13 	bl	80022b2 <Background_color_256>

		Goto_Text_XY(50,728);       //  Y, X
 800548c:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 8005490:	2032      	movs	r0, #50	; 0x32
 8005492:	f7fc f96b 	bl	800176c <Goto_Text_XY>
		Show_String("\"TAKE");
 8005496:	4826      	ldr	r0, [pc, #152]	; (8005530 <screen0x0d+0x2e4>)
 8005498:	f7fc ff2d 	bl	80022f6 <Show_String>
		Goto_Text_XY(180,773);       //  Y, X  801
 800549c:	f240 3105 	movw	r1, #773	; 0x305
 80054a0:	20b4      	movs	r0, #180	; 0xb4
 80054a2:	f7fc f963 	bl	800176c <Goto_Text_XY>
		Show_String("OFFER\"");
 80054a6:	4823      	ldr	r0, [pc, #140]	; (8005534 <screen0x0d+0x2e8>)
 80054a8:	f7fc ff25 	bl	80022f6 <Show_String>

		if(currentTask == 0) 		HAL_Delay(holdDelay);
 80054ac:	4b1c      	ldr	r3, [pc, #112]	; (8005520 <screen0x0d+0x2d4>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d129      	bne.n	8005508 <screen0x0d+0x2bc>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f002 ff7c 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(holdDelay);
 80054bc:	4b18      	ldr	r3, [pc, #96]	; (8005520 <screen0x0d+0x2d4>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d123      	bne.n	800550c <screen0x0d+0x2c0>
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f002 ff74 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(holdDelay);
 80054cc:	4b14      	ldr	r3, [pc, #80]	; (8005520 <screen0x0d+0x2d4>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d11d      	bne.n	8005510 <screen0x0d+0x2c4>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f002 ff6c 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(holdDelay);
 80054dc:	4b10      	ldr	r3, [pc, #64]	; (8005520 <screen0x0d+0x2d4>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d117      	bne.n	8005514 <screen0x0d+0x2c8>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f002 ff64 	bl	80083b4 <HAL_Delay>
	while(currentTask == 0)
 80054ec:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <screen0x0d+0x2d4>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f43f aee3 	beq.w	80052bc <screen0x0d+0x70>
		else break;
    }
}
 80054f6:	e00e      	b.n	8005516 <screen0x0d+0x2ca>
		else break;
 80054f8:	bf00      	nop
 80054fa:	e00c      	b.n	8005516 <screen0x0d+0x2ca>
		else break;
 80054fc:	bf00      	nop
 80054fe:	e00a      	b.n	8005516 <screen0x0d+0x2ca>
		else break;
 8005500:	bf00      	nop
 8005502:	e008      	b.n	8005516 <screen0x0d+0x2ca>
		else break;
 8005504:	bf00      	nop
 8005506:	e006      	b.n	8005516 <screen0x0d+0x2ca>
		else break;
 8005508:	bf00      	nop
 800550a:	e004      	b.n	8005516 <screen0x0d+0x2ca>
		else break;
 800550c:	bf00      	nop
 800550e:	e002      	b.n	8005516 <screen0x0d+0x2ca>
		else break;
 8005510:	bf00      	nop
 8005512:	e000      	b.n	8005516 <screen0x0d+0x2ca>
		else break;
 8005514:	bf00      	nop
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	200007fa 	.word	0x200007fa
 8005524:	20000000 	.word	0x20000000
 8005528:	0800c398 	.word	0x0800c398
 800552c:	0800c3a4 	.word	0x0800c3a4
 8005530:	0800c3ac 	.word	0x0800c3ac
 8005534:	0800c3b4 	.word	0x0800c3b4

08005538 <screen0x0e>:



// BEST PLAY SAYS  |  "TRY AGAIN"
void screen0x0e(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
	int holdDelay    =  125;
 800553e:	237d      	movs	r3, #125	; 0x7d
 8005540:	607b      	str	r3, [r7, #4]
	unsigned int randColor;
	srand(HAL_GetTick());
 8005542:	f002 ff2b 	bl	800839c <HAL_GetTick>
 8005546:	4603      	mov	r3, r0
 8005548:	4618      	mov	r0, r3
 800554a:	f005 fe4f 	bl	800b1ec <srand>

	// Clear Screen
	Foreground_color_256(color256_black);
 800554e:	2000      	movs	r0, #0
 8005550:	f7fc fe8d 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8005554:	2000      	movs	r0, #0
 8005556:	f7fc feac 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 800555a:	2100      	movs	r1, #0
 800555c:	2000      	movs	r0, #0
 800555e:	f7fc f939 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 8005562:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8005566:	f240 108f 	movw	r0, #399	; 0x18f
 800556a:	f7fc f963 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 800556e:	f7fc fa21 	bl	80019b4 <Start_Square_Fill>


	CGROM_Select_Genitop_FontROM();
 8005572:	f7fc fcc2 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8005576:	f7fc fe4c 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	//Font_Select_12x24_24x24();
	Font_Select_16x32_32x32();
 800557a:	f7fc fcf2 	bl	8001f62 <Font_Select_16x32_32x32>
	Set_GTFont_Decoder(0x21);
 800557e:	2021      	movs	r0, #33	; 0x21
 8005580:	f7fc fe65 	bl	800224e <Set_GTFont_Decoder>
	if(fullcolor) Foreground_color_256(color256_white);
 8005584:	4ba3      	ldr	r3, [pc, #652]	; (8005814 <screen0x0e+0x2dc>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <screen0x0e+0x5c>
 800558c:	20ff      	movs	r0, #255	; 0xff
 800558e:	f7fc fe6e 	bl	800226e <Foreground_color_256>
 8005592:	e002      	b.n	800559a <screen0x0e+0x62>
	else Foreground_color_256(MONOCHROME_COLOR);
 8005594:	201f      	movs	r0, #31
 8005596:	f7fc fe6a 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 800559a:	2000      	movs	r0, #0
 800559c:	f7fc fe89 	bl	80022b2 <Background_color_256>
	//Disable_Font_Alignment();
	//Font_Background_select_Color();
	Font_Background_select_Transparency();
 80055a0:	f7fc fd25 	bl	8001fee <Font_Background_select_Transparency>
	Font_Width_X3();
 80055a4:	f7fc fd99 	bl	80020da <Font_Width_X3>
	Font_Height_X4();
 80055a8:	f7fc fe19 	bl	80021de <Font_Height_X4>

	currentTask = 0;
 80055ac:	4b9a      	ldr	r3, [pc, #616]	; (8005818 <screen0x0e+0x2e0>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	701a      	strb	r2, [r3, #0]
    while(currentTask == 0)
 80055b2:	e115      	b.n	80057e0 <screen0x0e+0x2a8>
    {
    	randColor = RandomColor_256();
 80055b4:	f001 fff4 	bl	80075a0 <RandomColor_256>
 80055b8:	4603      	mov	r3, r0
 80055ba:	603b      	str	r3, [r7, #0]
		// Left Box Highlighted
		if(fullcolor) Foreground_color_256(randColor);
 80055bc:	4b95      	ldr	r3, [pc, #596]	; (8005814 <screen0x0e+0x2dc>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <screen0x0e+0x98>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fc fe50 	bl	800226e <Foreground_color_256>
 80055ce:	e002      	b.n	80055d6 <screen0x0e+0x9e>
		else Foreground_color_256(MONOCHROME_COLOR);
 80055d0:	201f      	movs	r0, #31
 80055d2:	f7fc fe4c 	bl	800226e <Foreground_color_256>
		if(fullcolor) Background_color_256(randColor);
 80055d6:	4b8f      	ldr	r3, [pc, #572]	; (8005814 <screen0x0e+0x2dc>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <screen0x0e+0xb2>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fc fe65 	bl	80022b2 <Background_color_256>
 80055e8:	e002      	b.n	80055f0 <screen0x0e+0xb8>
		else Background_color_256(MONOCHROME_COLOR);
 80055ea:	201f      	movs	r0, #31
 80055ec:	f7fc fe61 	bl	80022b2 <Background_color_256>
		Line_Start_XY(0,0);
 80055f0:	2100      	movs	r1, #0
 80055f2:	2000      	movs	r0, #0
 80055f4:	f7fc f8ee 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(400,640);  //  Y,X
 80055f8:	f44f 7120 	mov.w	r1, #640	; 0x280
 80055fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005600:	f7fc f918 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 8005604:	f7fc f9d6 	bl	80019b4 <Start_Square_Fill>
		Foreground_color_256(color256_black);
 8005608:	2000      	movs	r0, #0
 800560a:	f7fc fe30 	bl	800226e <Foreground_color_256>
		Background_color_256(color256_black);
 800560e:	2000      	movs	r0, #0
 8005610:	f7fc fe4f 	bl	80022b2 <Background_color_256>
		Line_Start_XY(0,641);
 8005614:	f240 2181 	movw	r1, #641	; 0x281
 8005618:	2000      	movs	r0, #0
 800561a:	f7fc f8db 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(399,1279);  //  Y,X
 800561e:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8005622:	f240 108f 	movw	r0, #399	; 0x18f
 8005626:	f7fc f905 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 800562a:	f7fc f9c3 	bl	80019b4 <Start_Square_Fill>

		Foreground_color_256(color256_black);
 800562e:	2000      	movs	r0, #0
 8005630:	f7fc fe1d 	bl	800226e <Foreground_color_256>
		Goto_Text_XY(50,96);       //  Y, X
 8005634:	2160      	movs	r1, #96	; 0x60
 8005636:	2032      	movs	r0, #50	; 0x32
 8005638:	f7fc f898 	bl	800176c <Goto_Text_XY>
		Show_String("BEST PLAY");
 800563c:	4877      	ldr	r0, [pc, #476]	; (800581c <screen0x0e+0x2e4>)
 800563e:	f7fc fe5a 	bl	80022f6 <Show_String>
		Goto_Text_XY(180,236);       //  Y, X
 8005642:	21ec      	movs	r1, #236	; 0xec
 8005644:	20b4      	movs	r0, #180	; 0xb4
 8005646:	f7fc f891 	bl	800176c <Goto_Text_XY>
		Show_String("SAYS");
 800564a:	4875      	ldr	r0, [pc, #468]	; (8005820 <screen0x0e+0x2e8>)
 800564c:	f7fc fe53 	bl	80022f6 <Show_String>

		if(fullcolor) Foreground_color_256(randColor);
 8005650:	4b70      	ldr	r3, [pc, #448]	; (8005814 <screen0x0e+0x2dc>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <screen0x0e+0x12c>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	b2db      	uxtb	r3, r3
 800565c:	4618      	mov	r0, r3
 800565e:	f7fc fe06 	bl	800226e <Foreground_color_256>
 8005662:	e002      	b.n	800566a <screen0x0e+0x132>
		else Foreground_color_256(MONOCHROME_COLOR);
 8005664:	201f      	movs	r0, #31
 8005666:	f7fc fe02 	bl	800226e <Foreground_color_256>
		//Background_color_256(color256_black);
		Goto_Text_XY(50,742);       //  Y, X
 800566a:	f240 21e6 	movw	r1, #742	; 0x2e6
 800566e:	2032      	movs	r0, #50	; 0x32
 8005670:	f7fc f87c 	bl	800176c <Goto_Text_XY>
		Show_String("\"TRY");
 8005674:	486b      	ldr	r0, [pc, #428]	; (8005824 <screen0x0e+0x2ec>)
 8005676:	f7fc fe3e 	bl	80022f6 <Show_String>
		Goto_Text_XY(180,793);       //  Y, X
 800567a:	f240 3119 	movw	r1, #793	; 0x319
 800567e:	20b4      	movs	r0, #180	; 0xb4
 8005680:	f7fc f874 	bl	800176c <Goto_Text_XY>
		Show_String("AGAIN\"");
 8005684:	4868      	ldr	r0, [pc, #416]	; (8005828 <screen0x0e+0x2f0>)
 8005686:	f7fc fe36 	bl	80022f6 <Show_String>



		if(currentTask == 0) 		HAL_Delay(holdDelay);
 800568a:	4b63      	ldr	r3, [pc, #396]	; (8005818 <screen0x0e+0x2e0>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f040 80ac 	bne.w	80057ec <screen0x0e+0x2b4>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4618      	mov	r0, r3
 8005698:	f002 fe8c 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(holdDelay);
 800569c:	4b5e      	ldr	r3, [pc, #376]	; (8005818 <screen0x0e+0x2e0>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f040 80a5 	bne.w	80057f0 <screen0x0e+0x2b8>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f002 fe83 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(holdDelay);
 80056ae:	4b5a      	ldr	r3, [pc, #360]	; (8005818 <screen0x0e+0x2e0>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f040 809e 	bne.w	80057f4 <screen0x0e+0x2bc>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f002 fe7a 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(holdDelay);
 80056c0:	4b55      	ldr	r3, [pc, #340]	; (8005818 <screen0x0e+0x2e0>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f040 8097 	bne.w	80057f8 <screen0x0e+0x2c0>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f002 fe71 	bl	80083b4 <HAL_Delay>
		else break;

		// Right Box Highlighted
		Foreground_color_256(color256_black);
 80056d2:	2000      	movs	r0, #0
 80056d4:	f7fc fdcb 	bl	800226e <Foreground_color_256>
		Background_color_256(color256_black);
 80056d8:	2000      	movs	r0, #0
 80056da:	f7fc fdea 	bl	80022b2 <Background_color_256>
		Line_Start_XY(0,0);
 80056de:	2100      	movs	r1, #0
 80056e0:	2000      	movs	r0, #0
 80056e2:	f7fc f877 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(400,640);  //  Y,X
 80056e6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80056ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80056ee:	f7fc f8a1 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 80056f2:	f7fc f95f 	bl	80019b4 <Start_Square_Fill>
		if(fullcolor) Foreground_color_256(randColor);
 80056f6:	4b47      	ldr	r3, [pc, #284]	; (8005814 <screen0x0e+0x2dc>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d005      	beq.n	800570a <screen0x0e+0x1d2>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	4618      	mov	r0, r3
 8005704:	f7fc fdb3 	bl	800226e <Foreground_color_256>
 8005708:	e002      	b.n	8005710 <screen0x0e+0x1d8>
		else Foreground_color_256(MONOCHROME_COLOR);
 800570a:	201f      	movs	r0, #31
 800570c:	f7fc fdaf 	bl	800226e <Foreground_color_256>
		if(fullcolor) Background_color_256(randColor);
 8005710:	4b40      	ldr	r3, [pc, #256]	; (8005814 <screen0x0e+0x2dc>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <screen0x0e+0x1ec>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	4618      	mov	r0, r3
 800571e:	f7fc fdc8 	bl	80022b2 <Background_color_256>
 8005722:	e002      	b.n	800572a <screen0x0e+0x1f2>
		else Background_color_256(MONOCHROME_COLOR);
 8005724:	201f      	movs	r0, #31
 8005726:	f7fc fdc4 	bl	80022b2 <Background_color_256>
		Line_Start_XY(0,641);
 800572a:	f240 2181 	movw	r1, #641	; 0x281
 800572e:	2000      	movs	r0, #0
 8005730:	f7fc f850 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(399,1279);  //  Y,X
 8005734:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8005738:	f240 108f 	movw	r0, #399	; 0x18f
 800573c:	f7fc f87a 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 8005740:	f7fc f938 	bl	80019b4 <Start_Square_Fill>

		if(fullcolor) Foreground_color_256(randColor);
 8005744:	4b33      	ldr	r3, [pc, #204]	; (8005814 <screen0x0e+0x2dc>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <screen0x0e+0x220>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	4618      	mov	r0, r3
 8005752:	f7fc fd8c 	bl	800226e <Foreground_color_256>
 8005756:	e002      	b.n	800575e <screen0x0e+0x226>
		else Foreground_color_256(MONOCHROME_COLOR);
 8005758:	201f      	movs	r0, #31
 800575a:	f7fc fd88 	bl	800226e <Foreground_color_256>

		Goto_Text_XY(50,96);       //  Y, X
 800575e:	2160      	movs	r1, #96	; 0x60
 8005760:	2032      	movs	r0, #50	; 0x32
 8005762:	f7fc f803 	bl	800176c <Goto_Text_XY>
		Show_String("BEST PLAY");
 8005766:	482d      	ldr	r0, [pc, #180]	; (800581c <screen0x0e+0x2e4>)
 8005768:	f7fc fdc5 	bl	80022f6 <Show_String>
		Goto_Text_XY(180,236);       //  Y, X
 800576c:	21ec      	movs	r1, #236	; 0xec
 800576e:	20b4      	movs	r0, #180	; 0xb4
 8005770:	f7fb fffc 	bl	800176c <Goto_Text_XY>
		Show_String("SAYS");
 8005774:	482a      	ldr	r0, [pc, #168]	; (8005820 <screen0x0e+0x2e8>)
 8005776:	f7fc fdbe 	bl	80022f6 <Show_String>

		Foreground_color_256(color256_black);
 800577a:	2000      	movs	r0, #0
 800577c:	f7fc fd77 	bl	800226e <Foreground_color_256>
		//Background_color_256(color256_white);
		Goto_Text_XY(50,742);       //  Y, X
 8005780:	f240 21e6 	movw	r1, #742	; 0x2e6
 8005784:	2032      	movs	r0, #50	; 0x32
 8005786:	f7fb fff1 	bl	800176c <Goto_Text_XY>
		Show_String("\"TRY");
 800578a:	4826      	ldr	r0, [pc, #152]	; (8005824 <screen0x0e+0x2ec>)
 800578c:	f7fc fdb3 	bl	80022f6 <Show_String>
		Goto_Text_XY(180,793);       //  Y, X
 8005790:	f240 3119 	movw	r1, #793	; 0x319
 8005794:	20b4      	movs	r0, #180	; 0xb4
 8005796:	f7fb ffe9 	bl	800176c <Goto_Text_XY>
		Show_String("AGAIN\"");
 800579a:	4823      	ldr	r0, [pc, #140]	; (8005828 <screen0x0e+0x2f0>)
 800579c:	f7fc fdab 	bl	80022f6 <Show_String>


		if(currentTask == 0) 		HAL_Delay(holdDelay);
 80057a0:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <screen0x0e+0x2e0>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d129      	bne.n	80057fc <screen0x0e+0x2c4>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f002 fe02 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(holdDelay);
 80057b0:	4b19      	ldr	r3, [pc, #100]	; (8005818 <screen0x0e+0x2e0>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d123      	bne.n	8005800 <screen0x0e+0x2c8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f002 fdfa 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(holdDelay);
 80057c0:	4b15      	ldr	r3, [pc, #84]	; (8005818 <screen0x0e+0x2e0>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d11d      	bne.n	8005804 <screen0x0e+0x2cc>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f002 fdf2 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(holdDelay);
 80057d0:	4b11      	ldr	r3, [pc, #68]	; (8005818 <screen0x0e+0x2e0>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d117      	bne.n	8005808 <screen0x0e+0x2d0>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4618      	mov	r0, r3
 80057dc:	f002 fdea 	bl	80083b4 <HAL_Delay>
    while(currentTask == 0)
 80057e0:	4b0d      	ldr	r3, [pc, #52]	; (8005818 <screen0x0e+0x2e0>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f43f aee5 	beq.w	80055b4 <screen0x0e+0x7c>
		else break;
    }

}
 80057ea:	e00e      	b.n	800580a <screen0x0e+0x2d2>
		else break;
 80057ec:	bf00      	nop
 80057ee:	e00c      	b.n	800580a <screen0x0e+0x2d2>
		else break;
 80057f0:	bf00      	nop
 80057f2:	e00a      	b.n	800580a <screen0x0e+0x2d2>
		else break;
 80057f4:	bf00      	nop
 80057f6:	e008      	b.n	800580a <screen0x0e+0x2d2>
		else break;
 80057f8:	bf00      	nop
 80057fa:	e006      	b.n	800580a <screen0x0e+0x2d2>
		else break;
 80057fc:	bf00      	nop
 80057fe:	e004      	b.n	800580a <screen0x0e+0x2d2>
		else break;
 8005800:	bf00      	nop
 8005802:	e002      	b.n	800580a <screen0x0e+0x2d2>
		else break;
 8005804:	bf00      	nop
 8005806:	e000      	b.n	800580a <screen0x0e+0x2d2>
		else break;
 8005808:	bf00      	nop
}
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000000 	.word	0x20000000
 8005818:	200007fa 	.word	0x200007fa
 800581c:	0800c398 	.word	0x0800c398
 8005820:	0800c3a4 	.word	0x0800c3a4
 8005824:	0800c3bc 	.word	0x0800c3bc
 8005828:	0800c3c4 	.word	0x0800c3c4

0800582c <screen0x0f>:

// TAKE OFFER or TRY AGAIN
void screen0x0f(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
	int holdDelay    =  62;
 8005832:	233e      	movs	r3, #62	; 0x3e
 8005834:	60bb      	str	r3, [r7, #8]
	int screenHold   =  125;
 8005836:	237d      	movs	r3, #125	; 0x7d
 8005838:	607b      	str	r3, [r7, #4]
	int flopLoop     =  2;
 800583a:	2302      	movs	r3, #2
 800583c:	603b      	str	r3, [r7, #0]
	unsigned int randColor;

	// Clear Screen
	Foreground_color_256(color256_black);
 800583e:	2000      	movs	r0, #0
 8005840:	f7fc fd15 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8005844:	2000      	movs	r0, #0
 8005846:	f7fc fd34 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 800584a:	2100      	movs	r1, #0
 800584c:	2000      	movs	r0, #0
 800584e:	f7fb ffc1 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 8005852:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8005856:	f240 108f 	movw	r0, #399	; 0x18f
 800585a:	f7fb ffeb 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 800585e:	f7fc f8a9 	bl	80019b4 <Start_Square_Fill>

	CGROM_Select_Genitop_FontROM();
 8005862:	f7fc fb4a 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8005866:	f7fc fcd4 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	//Font_Select_12x24_24x24();
	Font_Select_16x32_32x32();
 800586a:	f7fc fb7a 	bl	8001f62 <Font_Select_16x32_32x32>
	Set_GTFont_Decoder(0x21);
 800586e:	2021      	movs	r0, #33	; 0x21
 8005870:	f7fc fced 	bl	800224e <Set_GTFont_Decoder>
	if(fullcolor) Foreground_color_256(color256_white);
 8005874:	4bae      	ldr	r3, [pc, #696]	; (8005b30 <screen0x0f+0x304>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <screen0x0f+0x58>
 800587c:	20ff      	movs	r0, #255	; 0xff
 800587e:	f7fc fcf6 	bl	800226e <Foreground_color_256>
 8005882:	e002      	b.n	800588a <screen0x0f+0x5e>
	else Foreground_color_256(MONOCHROME_COLOR);
 8005884:	201f      	movs	r0, #31
 8005886:	f7fc fcf2 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 800588a:	2000      	movs	r0, #0
 800588c:	f7fc fd11 	bl	80022b2 <Background_color_256>
	//Disable_Font_Alignment();
	Font_Background_select_Color();
 8005890:	f7fc fbc3 	bl	800201a <Font_Background_select_Color>
	//Font_Background_select_Transparency();
	Font_Width_X3();
 8005894:	f7fc fc21 	bl	80020da <Font_Width_X3>
	Font_Height_X3();
 8005898:	f7fc fc87 	bl	80021aa <Font_Height_X3>
	if(fullcolor) Foreground_color_256(color256_blue);
 800589c:	4ba4      	ldr	r3, [pc, #656]	; (8005b30 <screen0x0f+0x304>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <screen0x0f+0x80>
 80058a4:	2003      	movs	r0, #3
 80058a6:	f7fc fce2 	bl	800226e <Foreground_color_256>
 80058aa:	e002      	b.n	80058b2 <screen0x0f+0x86>
	else Foreground_color_256(MONOCHROME_COLOR);
 80058ac:	201f      	movs	r0, #31
 80058ae:	f7fc fcde 	bl	800226e <Foreground_color_256>
	Goto_Text_XY(130,588);       //  Y, X
 80058b2:	f44f 7113 	mov.w	r1, #588	; 0x24c
 80058b6:	2082      	movs	r0, #130	; 0x82
 80058b8:	f7fb ff58 	bl	800176c <Goto_Text_XY>
	Show_String("OR");
 80058bc:	489d      	ldr	r0, [pc, #628]	; (8005b34 <screen0x0f+0x308>)
 80058be:	f7fc fd1a 	bl	80022f6 <Show_String>
	Font_Width_X4();
 80058c2:	f7fc fc24 	bl	800210e <Font_Width_X4>
	Font_Height_X4();
 80058c6:	f7fc fc8a 	bl	80021de <Font_Height_X4>
	if(fullcolor) Foreground_color_256(color256_cyan);
 80058ca:	4b99      	ldr	r3, [pc, #612]	; (8005b30 <screen0x0f+0x304>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <screen0x0f+0xae>
 80058d2:	201f      	movs	r0, #31
 80058d4:	f7fc fccb 	bl	800226e <Foreground_color_256>
 80058d8:	e002      	b.n	80058e0 <screen0x0f+0xb4>
	else Foreground_color_256(MONOCHROME_COLOR);
 80058da:	201f      	movs	r0, #31
 80058dc:	f7fc fcc7 	bl	800226e <Foreground_color_256>
	Goto_Text_XY(40,852);       //  Y, X   40,852
 80058e0:	f44f 7155 	mov.w	r1, #852	; 0x354
 80058e4:	2028      	movs	r0, #40	; 0x28
 80058e6:	f7fb ff41 	bl	800176c <Goto_Text_XY>
	Show_String("TRY");
 80058ea:	4893      	ldr	r0, [pc, #588]	; (8005b38 <screen0x0f+0x30c>)
 80058ec:	f7fc fd03 	bl	80022f6 <Show_String>
	Goto_Text_XY(174,774);       //  Y, X  4-13-2024 it was 170, 774
 80058f0:	f240 3106 	movw	r1, #774	; 0x306
 80058f4:	20ae      	movs	r0, #174	; 0xae
 80058f6:	f7fb ff39 	bl	800176c <Goto_Text_XY>
	Show_String("AGAIN");
 80058fa:	4890      	ldr	r0, [pc, #576]	; (8005b3c <screen0x0f+0x310>)
 80058fc:	f7fc fcfb 	bl	80022f6 <Show_String>

	currentTask = 0;
 8005900:	4b8f      	ldr	r3, [pc, #572]	; (8005b40 <screen0x0f+0x314>)
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]

	while(currentTask == 0)
 8005906:	e1f3      	b.n	8005cf0 <screen0x0f+0x4c4>
    {
    	//  Loop TAKE OFFER text
    	for(int l = 0; l < flopLoop; l++)
 8005908:	2300      	movs	r3, #0
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	e094      	b.n	8005a38 <screen0x0f+0x20c>
    	{
    		// Little
    		Foreground_color_256(color256_black);
 800590e:	2000      	movs	r0, #0
 8005910:	f7fc fcad 	bl	800226e <Foreground_color_256>
    		Goto_Text_XY(40,156);       //  Y, X
 8005914:	219c      	movs	r1, #156	; 0x9c
 8005916:	2028      	movs	r0, #40	; 0x28
 8005918:	f7fb ff28 	bl	800176c <Goto_Text_XY>
			Show_String("TAKE");
 800591c:	4889      	ldr	r0, [pc, #548]	; (8005b44 <screen0x0f+0x318>)
 800591e:	f7fc fcea 	bl	80022f6 <Show_String>
			Goto_Text_XY(174,116);       //  Y, X
 8005922:	2174      	movs	r1, #116	; 0x74
 8005924:	20ae      	movs	r0, #174	; 0xae
 8005926:	f7fb ff21 	bl	800176c <Goto_Text_XY>
			Show_String("OFFER");
 800592a:	4887      	ldr	r0, [pc, #540]	; (8005b48 <screen0x0f+0x31c>)
 800592c:	f7fc fce3 	bl	80022f6 <Show_String>
    		randColor = RandomColor_65k();
 8005930:	f001 fe56 	bl	80075e0 <RandomColor_65k>
 8005934:	4603      	mov	r3, r0
 8005936:	617b      	str	r3, [r7, #20]
    		if(fullcolor) Foreground_color_256(randColor);
 8005938:	4b7d      	ldr	r3, [pc, #500]	; (8005b30 <screen0x0f+0x304>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <screen0x0f+0x120>
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	4618      	mov	r0, r3
 8005946:	f7fc fc92 	bl	800226e <Foreground_color_256>
 800594a:	e002      	b.n	8005952 <screen0x0f+0x126>
    		else Foreground_color_256(MONOCHROME_COLOR);
 800594c:	201f      	movs	r0, #31
 800594e:	f7fc fc8e 	bl	800226e <Foreground_color_256>
    		Font_Height_X3();
 8005952:	f7fc fc2a 	bl	80021aa <Font_Height_X3>
    		Goto_Text_XY(71,156);       //  Y, X  71,96
 8005956:	219c      	movs	r1, #156	; 0x9c
 8005958:	2047      	movs	r0, #71	; 0x47
 800595a:	f7fb ff07 	bl	800176c <Goto_Text_XY>
			Show_String("TAKE");
 800595e:	4879      	ldr	r0, [pc, #484]	; (8005b44 <screen0x0f+0x318>)
 8005960:	f7fc fcc9 	bl	80022f6 <Show_String>
			Goto_Text_XY(182,116);       //  Y, X  190,56
 8005964:	2174      	movs	r1, #116	; 0x74
 8005966:	20b6      	movs	r0, #182	; 0xb6
 8005968:	f7fb ff00 	bl	800176c <Goto_Text_XY>
			Show_String("OFFER");
 800596c:	4876      	ldr	r0, [pc, #472]	; (8005b48 <screen0x0f+0x31c>)
 800596e:	f7fc fcc2 	bl	80022f6 <Show_String>
			if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005972:	4b73      	ldr	r3, [pc, #460]	; (8005b40 <screen0x0f+0x314>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d164      	bne.n	8005a44 <screen0x0f+0x218>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4618      	mov	r0, r3
 800597e:	f002 fd19 	bl	80083b4 <HAL_Delay>
			else break;
			if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005982:	4b6f      	ldr	r3, [pc, #444]	; (8005b40 <screen0x0f+0x314>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d15e      	bne.n	8005a48 <screen0x0f+0x21c>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4618      	mov	r0, r3
 800598e:	f002 fd11 	bl	80083b4 <HAL_Delay>
			else break;
			if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005992:	4b6b      	ldr	r3, [pc, #428]	; (8005b40 <screen0x0f+0x314>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d158      	bne.n	8005a4c <screen0x0f+0x220>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	4618      	mov	r0, r3
 800599e:	f002 fd09 	bl	80083b4 <HAL_Delay>
			else break;
			if(currentTask == 0) 		HAL_Delay(holdDelay);
 80059a2:	4b67      	ldr	r3, [pc, #412]	; (8005b40 <screen0x0f+0x314>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d152      	bne.n	8005a50 <screen0x0f+0x224>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f002 fd01 	bl	80083b4 <HAL_Delay>
			else break;

    		// Big
			//HAL_Delay(1000);
			if(fullcolor) randColor = RandomColor_256();
 80059b2:	4b5f      	ldr	r3, [pc, #380]	; (8005b30 <screen0x0f+0x304>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d004      	beq.n	80059c4 <screen0x0f+0x198>
 80059ba:	f001 fdf1 	bl	80075a0 <RandomColor_256>
 80059be:	4603      	mov	r3, r0
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e001      	b.n	80059c8 <screen0x0f+0x19c>
			else randColor = MONOCHROME_COLOR;
 80059c4:	231f      	movs	r3, #31
 80059c6:	617b      	str	r3, [r7, #20]
    		Foreground_color_256(randColor);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fc fc4e 	bl	800226e <Foreground_color_256>
    		Font_Height_X4();
 80059d2:	f7fc fc04 	bl	80021de <Font_Height_X4>
    		Goto_Text_XY(40,156);       //  Y, X
 80059d6:	219c      	movs	r1, #156	; 0x9c
 80059d8:	2028      	movs	r0, #40	; 0x28
 80059da:	f7fb fec7 	bl	800176c <Goto_Text_XY>
			Show_String("TAKE");
 80059de:	4859      	ldr	r0, [pc, #356]	; (8005b44 <screen0x0f+0x318>)
 80059e0:	f7fc fc89 	bl	80022f6 <Show_String>
			Goto_Text_XY(174,116);       //  Y, X
 80059e4:	2174      	movs	r1, #116	; 0x74
 80059e6:	20ae      	movs	r0, #174	; 0xae
 80059e8:	f7fb fec0 	bl	800176c <Goto_Text_XY>
			Show_String("OFFER");
 80059ec:	4856      	ldr	r0, [pc, #344]	; (8005b48 <screen0x0f+0x31c>)
 80059ee:	f7fc fc82 	bl	80022f6 <Show_String>

			if(currentTask == 0) 		HAL_Delay(holdDelay);
 80059f2:	4b53      	ldr	r3, [pc, #332]	; (8005b40 <screen0x0f+0x314>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d12c      	bne.n	8005a54 <screen0x0f+0x228>
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f002 fcd9 	bl	80083b4 <HAL_Delay>
			else break;
			if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005a02:	4b4f      	ldr	r3, [pc, #316]	; (8005b40 <screen0x0f+0x314>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d126      	bne.n	8005a58 <screen0x0f+0x22c>
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f002 fcd1 	bl	80083b4 <HAL_Delay>
			else break;
			if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005a12:	4b4b      	ldr	r3, [pc, #300]	; (8005b40 <screen0x0f+0x314>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d120      	bne.n	8005a5c <screen0x0f+0x230>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f002 fcc9 	bl	80083b4 <HAL_Delay>
			else break;
			if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005a22:	4b47      	ldr	r3, [pc, #284]	; (8005b40 <screen0x0f+0x314>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d11a      	bne.n	8005a60 <screen0x0f+0x234>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f002 fcc1 	bl	80083b4 <HAL_Delay>
    	for(int l = 0; l < flopLoop; l++)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	3301      	adds	r3, #1
 8005a36:	613b      	str	r3, [r7, #16]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	f6ff af66 	blt.w	800590e <screen0x0f+0xe2>
 8005a42:	e00e      	b.n	8005a62 <screen0x0f+0x236>
			else break;
 8005a44:	bf00      	nop
 8005a46:	e00c      	b.n	8005a62 <screen0x0f+0x236>
			else break;
 8005a48:	bf00      	nop
 8005a4a:	e00a      	b.n	8005a62 <screen0x0f+0x236>
			else break;
 8005a4c:	bf00      	nop
 8005a4e:	e008      	b.n	8005a62 <screen0x0f+0x236>
			else break;
 8005a50:	bf00      	nop
 8005a52:	e006      	b.n	8005a62 <screen0x0f+0x236>
			else break;
 8005a54:	bf00      	nop
 8005a56:	e004      	b.n	8005a62 <screen0x0f+0x236>
			else break;
 8005a58:	bf00      	nop
 8005a5a:	e002      	b.n	8005a62 <screen0x0f+0x236>
			else break;
 8005a5c:	bf00      	nop
 8005a5e:	e000      	b.n	8005a62 <screen0x0f+0x236>
			else break;
 8005a60:	bf00      	nop
    	}
		// Big TRY AGAIN
		if(fullcolor) Foreground_color_256(color256_white);
 8005a62:	4b33      	ldr	r3, [pc, #204]	; (8005b30 <screen0x0f+0x304>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <screen0x0f+0x246>
 8005a6a:	20ff      	movs	r0, #255	; 0xff
 8005a6c:	f7fc fbff 	bl	800226e <Foreground_color_256>
 8005a70:	e002      	b.n	8005a78 <screen0x0f+0x24c>
		else Foreground_color_256(MONOCHROME_COLOR);
 8005a72:	201f      	movs	r0, #31
 8005a74:	f7fc fbfb 	bl	800226e <Foreground_color_256>
		Background_color_256(color256_black);
 8005a78:	2000      	movs	r0, #0
 8005a7a:	f7fc fc1a 	bl	80022b2 <Background_color_256>
		Font_Height_X4();
 8005a7e:	f7fc fbae 	bl	80021de <Font_Height_X4>
		Goto_Text_XY(40,156);       //  Y, X
 8005a82:	219c      	movs	r1, #156	; 0x9c
 8005a84:	2028      	movs	r0, #40	; 0x28
 8005a86:	f7fb fe71 	bl	800176c <Goto_Text_XY>
		Show_String("TAKE");
 8005a8a:	482e      	ldr	r0, [pc, #184]	; (8005b44 <screen0x0f+0x318>)
 8005a8c:	f7fc fc33 	bl	80022f6 <Show_String>
		Goto_Text_XY(174,116);       //  Y, X
 8005a90:	2174      	movs	r1, #116	; 0x74
 8005a92:	20ae      	movs	r0, #174	; 0xae
 8005a94:	f7fb fe6a 	bl	800176c <Goto_Text_XY>
		Show_String("OFFER");
 8005a98:	482b      	ldr	r0, [pc, #172]	; (8005b48 <screen0x0f+0x31c>)
 8005a9a:	f7fc fc2c 	bl	80022f6 <Show_String>

		if(currentTask == 0) 		HAL_Delay(screenHold);
 8005a9e:	4b28      	ldr	r3, [pc, #160]	; (8005b40 <screen0x0f+0x314>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f040 812a 	bne.w	8005cfc <screen0x0f+0x4d0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f002 fc82 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(screenHold);
 8005ab0:	4b23      	ldr	r3, [pc, #140]	; (8005b40 <screen0x0f+0x314>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f040 8123 	bne.w	8005d00 <screen0x0f+0x4d4>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f002 fc79 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(screenHold);
 8005ac2:	4b1f      	ldr	r3, [pc, #124]	; (8005b40 <screen0x0f+0x314>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f040 811c 	bne.w	8005d04 <screen0x0f+0x4d8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f002 fc70 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) 		HAL_Delay(screenHold);
 8005ad4:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <screen0x0f+0x314>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f040 8115 	bne.w	8005d08 <screen0x0f+0x4dc>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f002 fc67 	bl	80083b4 <HAL_Delay>
		else break;

    	// Loop TRY AGAIN text
		for(int l = 0; l < flopLoop; l++)
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	e0aa      	b.n	8005c42 <screen0x0f+0x416>
    	{
			// Little
			Foreground_color_256(color256_black);
 8005aec:	2000      	movs	r0, #0
 8005aee:	f7fc fbbe 	bl	800226e <Foreground_color_256>
			Goto_Text_XY(40,852);       //  Y, X
 8005af2:	f44f 7155 	mov.w	r1, #852	; 0x354
 8005af6:	2028      	movs	r0, #40	; 0x28
 8005af8:	f7fb fe38 	bl	800176c <Goto_Text_XY>
			Show_String("TRY");
 8005afc:	480e      	ldr	r0, [pc, #56]	; (8005b38 <screen0x0f+0x30c>)
 8005afe:	f7fc fbfa 	bl	80022f6 <Show_String>
			Goto_Text_XY(174,774);       //  Y, X  4-13-2024 it was 210,801
 8005b02:	f240 3106 	movw	r1, #774	; 0x306
 8005b06:	20ae      	movs	r0, #174	; 0xae
 8005b08:	f7fb fe30 	bl	800176c <Goto_Text_XY>
			Show_String("AGAIN");
 8005b0c:	480b      	ldr	r0, [pc, #44]	; (8005b3c <screen0x0f+0x310>)
 8005b0e:	f7fc fbf2 	bl	80022f6 <Show_String>
			randColor = RandomColor_256();
 8005b12:	f001 fd45 	bl	80075a0 <RandomColor_256>
 8005b16:	4603      	mov	r3, r0
 8005b18:	617b      	str	r3, [r7, #20]
    		if(fullcolor) Foreground_color_256(randColor);
 8005b1a:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <screen0x0f+0x304>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d014      	beq.n	8005b4c <screen0x0f+0x320>
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fc fba1 	bl	800226e <Foreground_color_256>
 8005b2c:	e011      	b.n	8005b52 <screen0x0f+0x326>
 8005b2e:	bf00      	nop
 8005b30:	20000000 	.word	0x20000000
 8005b34:	0800c3cc 	.word	0x0800c3cc
 8005b38:	0800c3d0 	.word	0x0800c3d0
 8005b3c:	0800c3d4 	.word	0x0800c3d4
 8005b40:	200007fa 	.word	0x200007fa
 8005b44:	0800c3dc 	.word	0x0800c3dc
 8005b48:	0800c378 	.word	0x0800c378
    		else Foreground_color_256(MONOCHROME_COLOR);
 8005b4c:	201f      	movs	r0, #31
 8005b4e:	f7fc fb8e 	bl	800226e <Foreground_color_256>
    		Font_Height_X3();
 8005b52:	f7fc fb2a 	bl	80021aa <Font_Height_X3>
    		Goto_Text_XY(71,852);       //  Y, X   4-13-2024 it was 71, 888
 8005b56:	f44f 7155 	mov.w	r1, #852	; 0x354
 8005b5a:	2047      	movs	r0, #71	; 0x47
 8005b5c:	f7fb fe06 	bl	800176c <Goto_Text_XY>
			Show_String("TRY");
 8005b60:	4870      	ldr	r0, [pc, #448]	; (8005d24 <screen0x0f+0x4f8>)
 8005b62:	f7fc fbc8 	bl	80022f6 <Show_String>
			Goto_Text_XY(182,774);       //  Y, X  4-13-2024 it was 182,801
 8005b66:	f240 3106 	movw	r1, #774	; 0x306
 8005b6a:	20b6      	movs	r0, #182	; 0xb6
 8005b6c:	f7fb fdfe 	bl	800176c <Goto_Text_XY>
			Show_String("AGAIN");
 8005b70:	486d      	ldr	r0, [pc, #436]	; (8005d28 <screen0x0f+0x4fc>)
 8005b72:	f7fc fbc0 	bl	80022f6 <Show_String>

			if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005b76:	4b6d      	ldr	r3, [pc, #436]	; (8005d2c <screen0x0f+0x500>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d167      	bne.n	8005c4e <screen0x0f+0x422>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f002 fc17 	bl	80083b4 <HAL_Delay>
			else break;
			if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005b86:	4b69      	ldr	r3, [pc, #420]	; (8005d2c <screen0x0f+0x500>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d161      	bne.n	8005c52 <screen0x0f+0x426>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f002 fc0f 	bl	80083b4 <HAL_Delay>
			else break;
			if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005b96:	4b65      	ldr	r3, [pc, #404]	; (8005d2c <screen0x0f+0x500>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d15b      	bne.n	8005c56 <screen0x0f+0x42a>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f002 fc07 	bl	80083b4 <HAL_Delay>
			else break;
			if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005ba6:	4b61      	ldr	r3, [pc, #388]	; (8005d2c <screen0x0f+0x500>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d155      	bne.n	8005c5a <screen0x0f+0x42e>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f002 fbff 	bl	80083b4 <HAL_Delay>
			else break;

			// Big
			randColor = RandomColor_256();
 8005bb6:	f001 fcf3 	bl	80075a0 <RandomColor_256>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	617b      	str	r3, [r7, #20]
    		if(fullcolor) Foreground_color_256(randColor);
 8005bbe:	4b5c      	ldr	r3, [pc, #368]	; (8005d30 <screen0x0f+0x504>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d005      	beq.n	8005bd2 <screen0x0f+0x3a6>
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fc fb4f 	bl	800226e <Foreground_color_256>
 8005bd0:	e002      	b.n	8005bd8 <screen0x0f+0x3ac>
    		else Foreground_color_256(MONOCHROME_COLOR);
 8005bd2:	201f      	movs	r0, #31
 8005bd4:	f7fc fb4b 	bl	800226e <Foreground_color_256>
    		Font_Height_X4();
 8005bd8:	f7fc fb01 	bl	80021de <Font_Height_X4>
    		Goto_Text_XY(40,852);       //  Y, X
 8005bdc:	f44f 7155 	mov.w	r1, #852	; 0x354
 8005be0:	2028      	movs	r0, #40	; 0x28
 8005be2:	f7fb fdc3 	bl	800176c <Goto_Text_XY>
			Show_String("TRY");
 8005be6:	484f      	ldr	r0, [pc, #316]	; (8005d24 <screen0x0f+0x4f8>)
 8005be8:	f7fc fb85 	bl	80022f6 <Show_String>
			Goto_Text_XY(174,774);       //  Y, X  4-13-2024 it was 210,801
 8005bec:	f240 3106 	movw	r1, #774	; 0x306
 8005bf0:	20ae      	movs	r0, #174	; 0xae
 8005bf2:	f7fb fdbb 	bl	800176c <Goto_Text_XY>
			Show_String("AGAIN");
 8005bf6:	484c      	ldr	r0, [pc, #304]	; (8005d28 <screen0x0f+0x4fc>)
 8005bf8:	f7fc fb7d 	bl	80022f6 <Show_String>

			if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005bfc:	4b4b      	ldr	r3, [pc, #300]	; (8005d2c <screen0x0f+0x500>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d12c      	bne.n	8005c5e <screen0x0f+0x432>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f002 fbd4 	bl	80083b4 <HAL_Delay>
			else break;
			if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005c0c:	4b47      	ldr	r3, [pc, #284]	; (8005d2c <screen0x0f+0x500>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d126      	bne.n	8005c62 <screen0x0f+0x436>
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f002 fbcc 	bl	80083b4 <HAL_Delay>
			else break;
			if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005c1c:	4b43      	ldr	r3, [pc, #268]	; (8005d2c <screen0x0f+0x500>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d120      	bne.n	8005c66 <screen0x0f+0x43a>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f002 fbc4 	bl	80083b4 <HAL_Delay>
			else break;
			if(currentTask == 0) 		HAL_Delay(holdDelay);
 8005c2c:	4b3f      	ldr	r3, [pc, #252]	; (8005d2c <screen0x0f+0x500>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d11a      	bne.n	8005c6a <screen0x0f+0x43e>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f002 fbbc 	bl	80083b4 <HAL_Delay>
		for(int l = 0; l < flopLoop; l++)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	f6ff af50 	blt.w	8005aec <screen0x0f+0x2c0>
 8005c4c:	e00e      	b.n	8005c6c <screen0x0f+0x440>
			else break;
 8005c4e:	bf00      	nop
 8005c50:	e00c      	b.n	8005c6c <screen0x0f+0x440>
			else break;
 8005c52:	bf00      	nop
 8005c54:	e00a      	b.n	8005c6c <screen0x0f+0x440>
			else break;
 8005c56:	bf00      	nop
 8005c58:	e008      	b.n	8005c6c <screen0x0f+0x440>
			else break;
 8005c5a:	bf00      	nop
 8005c5c:	e006      	b.n	8005c6c <screen0x0f+0x440>
			else break;
 8005c5e:	bf00      	nop
 8005c60:	e004      	b.n	8005c6c <screen0x0f+0x440>
			else break;
 8005c62:	bf00      	nop
 8005c64:	e002      	b.n	8005c6c <screen0x0f+0x440>
			else break;
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <screen0x0f+0x440>
			else break;
 8005c6a:	bf00      	nop
    	}

		// Big TRY AGAIN
		if(fullcolor) Foreground_color_256(color256_white);
 8005c6c:	4b30      	ldr	r3, [pc, #192]	; (8005d30 <screen0x0f+0x504>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <screen0x0f+0x450>
 8005c74:	20ff      	movs	r0, #255	; 0xff
 8005c76:	f7fc fafa 	bl	800226e <Foreground_color_256>
 8005c7a:	e002      	b.n	8005c82 <screen0x0f+0x456>
		else Foreground_color_256(MONOCHROME_COLOR);
 8005c7c:	201f      	movs	r0, #31
 8005c7e:	f7fc faf6 	bl	800226e <Foreground_color_256>
		Background_color_256(color256_black);
 8005c82:	2000      	movs	r0, #0
 8005c84:	f7fc fb15 	bl	80022b2 <Background_color_256>
		//Disable_Font_Alignment();
		//Font_Background_select_Color();
		//Font_Background_select_Transparency();
		Font_Width_X4();
 8005c88:	f7fc fa41 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8005c8c:	f7fc faa7 	bl	80021de <Font_Height_X4>
		Goto_Text_XY(40,852);       //  Y, X
 8005c90:	f44f 7155 	mov.w	r1, #852	; 0x354
 8005c94:	2028      	movs	r0, #40	; 0x28
 8005c96:	f7fb fd69 	bl	800176c <Goto_Text_XY>
		Show_String("TRY");
 8005c9a:	4822      	ldr	r0, [pc, #136]	; (8005d24 <screen0x0f+0x4f8>)
 8005c9c:	f7fc fb2b 	bl	80022f6 <Show_String>
		Goto_Text_XY(174,774);       //  Y, X
 8005ca0:	f240 3106 	movw	r1, #774	; 0x306
 8005ca4:	20ae      	movs	r0, #174	; 0xae
 8005ca6:	f7fb fd61 	bl	800176c <Goto_Text_XY>
		Show_String("AGAIN");
 8005caa:	481f      	ldr	r0, [pc, #124]	; (8005d28 <screen0x0f+0x4fc>)
 8005cac:	f7fc fb23 	bl	80022f6 <Show_String>

		if(currentTask == 0) HAL_Delay(screenHold);
 8005cb0:	4b1e      	ldr	r3, [pc, #120]	; (8005d2c <screen0x0f+0x500>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d129      	bne.n	8005d0c <screen0x0f+0x4e0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f002 fb7a 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(screenHold);
 8005cc0:	4b1a      	ldr	r3, [pc, #104]	; (8005d2c <screen0x0f+0x500>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d123      	bne.n	8005d10 <screen0x0f+0x4e4>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f002 fb72 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(screenHold);
 8005cd0:	4b16      	ldr	r3, [pc, #88]	; (8005d2c <screen0x0f+0x500>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d11d      	bne.n	8005d14 <screen0x0f+0x4e8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f002 fb6a 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0) HAL_Delay(screenHold);
 8005ce0:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <screen0x0f+0x500>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d117      	bne.n	8005d18 <screen0x0f+0x4ec>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f002 fb62 	bl	80083b4 <HAL_Delay>
	while(currentTask == 0)
 8005cf0:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <screen0x0f+0x500>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f43f ae07 	beq.w	8005908 <screen0x0f+0xdc>
		else break;
    }
}
 8005cfa:	e00e      	b.n	8005d1a <screen0x0f+0x4ee>
		else break;
 8005cfc:	bf00      	nop
 8005cfe:	e00c      	b.n	8005d1a <screen0x0f+0x4ee>
		else break;
 8005d00:	bf00      	nop
 8005d02:	e00a      	b.n	8005d1a <screen0x0f+0x4ee>
		else break;
 8005d04:	bf00      	nop
 8005d06:	e008      	b.n	8005d1a <screen0x0f+0x4ee>
		else break;
 8005d08:	bf00      	nop
 8005d0a:	e006      	b.n	8005d1a <screen0x0f+0x4ee>
		else break;
 8005d0c:	bf00      	nop
 8005d0e:	e004      	b.n	8005d1a <screen0x0f+0x4ee>
		else break;
 8005d10:	bf00      	nop
 8005d12:	e002      	b.n	8005d1a <screen0x0f+0x4ee>
		else break;
 8005d14:	bf00      	nop
 8005d16:	e000      	b.n	8005d1a <screen0x0f+0x4ee>
		else break;
 8005d18:	bf00      	nop
}
 8005d1a:	bf00      	nop
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	0800c3d0 	.word	0x0800c3d0
 8005d28:	0800c3d4 	.word	0x0800c3d4
 8005d2c:	200007fa 	.word	0x200007fa
 8005d30:	20000000 	.word	0x20000000

08005d34 <screen0x10>:


//  CHOOSE A BUTTON
void screen0x10(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
	int xOffset = 20;
 8005d3a:	2314      	movs	r3, #20
 8005d3c:	607b      	str	r3, [r7, #4]
	int yOffset = 16;
 8005d3e:	2310      	movs	r3, #16
 8005d40:	603b      	str	r3, [r7, #0]
	int i = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
	char dir = 1;
 8005d46:	2301      	movs	r3, #1
 8005d48:	72fb      	strb	r3, [r7, #11]
	char cnt = 0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	72bb      	strb	r3, [r7, #10]

	// Clear Screen
	Foreground_color_256(color256_black);
 8005d4e:	2000      	movs	r0, #0
 8005d50:	f7fc fa8d 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8005d54:	2000      	movs	r0, #0
 8005d56:	f7fc faac 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	f7fb fd39 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 8005d62:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8005d66:	f240 108f 	movw	r0, #399	; 0x18f
 8005d6a:	f7fb fd63 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 8005d6e:	f7fb fe21 	bl	80019b4 <Start_Square_Fill>

	CGROM_Select_Genitop_FontROM();
 8005d72:	f7fc f8c2 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8005d76:	f7fc fa4c 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	Font_Select_12x24_24x24();
 8005d7a:	f7fc f8d8 	bl	8001f2e <Font_Select_12x24_24x24>
	//Font_Select_16x32_32x32();
	Set_GTFont_Decoder(0x21);               //  <--- Activate the chip...
 8005d7e:	2021      	movs	r0, #33	; 0x21
 8005d80:	f7fc fa65 	bl	800224e <Set_GTFont_Decoder>
	if(fullcolor) Foreground_color_256(color256_white);
 8005d84:	4b28      	ldr	r3, [pc, #160]	; (8005e28 <screen0x10+0xf4>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <screen0x10+0x60>
 8005d8c:	20ff      	movs	r0, #255	; 0xff
 8005d8e:	f7fc fa6e 	bl	800226e <Foreground_color_256>
 8005d92:	e002      	b.n	8005d9a <screen0x10+0x66>
	else Foreground_color_256(MONOCHROME_COLOR);
 8005d94:	201f      	movs	r0, #31
 8005d96:	f7fc fa6a 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	f7fc fa89 	bl	80022b2 <Background_color_256>
	//Disable_Font_Alignment();
	Font_Background_select_Color();
 8005da0:	f7fc f93b 	bl	800201a <Font_Background_select_Color>
	//Font_Background_select_Transparency();
	//Font_Width_X4();
	//Font_Height_X4();

	// Clear Screen
    Foreground_color_256(color256_black);
 8005da4:	2000      	movs	r0, #0
 8005da6:	f7fc fa62 	bl	800226e <Foreground_color_256>
    Line_Start_XY(0,0);
 8005daa:	2100      	movs	r1, #0
 8005dac:	2000      	movs	r0, #0
 8005dae:	f7fb fd11 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 8005db2:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8005db6:	f240 108f 	movw	r0, #399	; 0x18f
 8005dba:	f7fb fd3b 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 8005dbe:	f7fb fdf9 	bl	80019b4 <Start_Square_Fill>

    if(fullcolor) Foreground_color_256(color256_white);
 8005dc2:	4b19      	ldr	r3, [pc, #100]	; (8005e28 <screen0x10+0xf4>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <screen0x10+0x9e>
 8005dca:	20ff      	movs	r0, #255	; 0xff
 8005dcc:	f7fc fa4f 	bl	800226e <Foreground_color_256>
 8005dd0:	e002      	b.n	8005dd8 <screen0x10+0xa4>
    else Foreground_color_256(MONOCHROME_COLOR);
 8005dd2:	201f      	movs	r0, #31
 8005dd4:	f7fc fa4b 	bl	800226e <Foreground_color_256>

	Font_Width_X4();
 8005dd8:	f7fc f999 	bl	800210e <Font_Width_X4>
	Font_Height_X3();
 8005ddc:	f7fc f9e5 	bl	80021aa <Font_Height_X3>
	Goto_Text_XY(56,440);     // 4-13-2024 it was 40,372
 8005de0:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8005de4:	2038      	movs	r0, #56	; 0x38
 8005de6:	f7fb fcc1 	bl	800176c <Goto_Text_XY>
	Show_String("CHOOSE");
 8005dea:	4810      	ldr	r0, [pc, #64]	; (8005e2c <screen0x10+0xf8>)
 8005dec:	f7fc fa83 	bl	80022f6 <Show_String>

	Goto_Text_XY(146,616);
 8005df0:	f44f 711a 	mov.w	r1, #616	; 0x268
 8005df4:	2092      	movs	r0, #146	; 0x92
 8005df6:	f7fb fcb9 	bl	800176c <Goto_Text_XY>
    Show_String("A");
 8005dfa:	480d      	ldr	r0, [pc, #52]	; (8005e30 <screen0x10+0xfc>)
 8005dfc:	f7fc fa7b 	bl	80022f6 <Show_String>

	Goto_Text_XY(228,456);
 8005e00:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8005e04:	20e4      	movs	r0, #228	; 0xe4
 8005e06:	f7fb fcb1 	bl	800176c <Goto_Text_XY>
	Show_String("BUTTON");
 8005e0a:	480a      	ldr	r0, [pc, #40]	; (8005e34 <screen0x10+0x100>)
 8005e0c:	f7fc fa73 	bl	80022f6 <Show_String>

	currentTask = 0;
 8005e10:	4b09      	ldr	r3, [pc, #36]	; (8005e38 <screen0x10+0x104>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]

	while(currentTask == 0)
 8005e16:	e174      	b.n	8006102 <screen0x10+0x3ce>
	{
		// Left Arrow
		if(fullcolor) Foreground_color_256(color256_blue);
 8005e18:	4b03      	ldr	r3, [pc, #12]	; (8005e28 <screen0x10+0xf4>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00d      	beq.n	8005e3c <screen0x10+0x108>
 8005e20:	2003      	movs	r0, #3
 8005e22:	f7fc fa24 	bl	800226e <Foreground_color_256>
 8005e26:	e00c      	b.n	8005e42 <screen0x10+0x10e>
 8005e28:	20000000 	.word	0x20000000
 8005e2c:	0800c3e4 	.word	0x0800c3e4
 8005e30:	0800c3ec 	.word	0x0800c3ec
 8005e34:	0800c3f0 	.word	0x0800c3f0
 8005e38:	200007fa 	.word	0x200007fa
		else Foreground_color_256(MONOCHROME_COLOR);
 8005e3c:	201f      	movs	r0, #31
 8005e3e:	f7fc fa16 	bl	800226e <Foreground_color_256>
		Triangle_Point1_XY(200-yOffset,200-i);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	4619      	mov	r1, r3
 8005e58:	4610      	mov	r0, r2
 8005e5a:	f7fb fd1b 	bl	8001894 <Triangle_Point1_XY>
		Triangle_Point2_XY(100-yOffset,300-i);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f7fb fd3d 	bl	80018f4 <Triangle_Point2_XY>
		Triangle_Point3_XY(300-yOffset,300-i);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4610      	mov	r0, r2
 8005e92:	f7fb fd5f 	bl	8001954 <Triangle_Point3_XY>
		Start_Triangle_Fill();
 8005e96:	f7fb fc91 	bl	80017bc <Start_Triangle_Fill>
		Line_Start_XY(150-yOffset,250-i);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	f7fb fc8f 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(250-yOffset,450-i);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f5c3 73e1 	rsb	r3, r3, #450	; 0x1c2
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f7fb fcb1 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 8005ed2:	f7fb fd6f 	bl	80019b4 <Start_Square_Fill>

		// Right Arrow
		Triangle_Point1_XY(100-yOffset,(980+xOffset)+i);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005ede:	b298      	uxth	r0, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	4413      	add	r3, r2
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	f7fb fcce 	bl	8001894 <Triangle_Point1_XY>
		Triangle_Point2_XY(300-yOffset,(980+xOffset)+i);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005f00:	b298      	uxth	r0, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	4413      	add	r3, r2
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	4619      	mov	r1, r3
 8005f16:	f7fb fced 	bl	80018f4 <Triangle_Point2_XY>
		Triangle_Point3_XY(200-yOffset,(1080+xOffset)+i);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8005f22:	b298      	uxth	r0, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	4619      	mov	r1, r3
 8005f38:	f7fb fd0c 	bl	8001954 <Triangle_Point3_XY>
		Start_Triangle_Fill();
 8005f3c:	f7fb fc3e 	bl	80017bc <Start_Triangle_Fill>
		Line_Start_XY(150-yOffset,(830+xOffset)+i);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005f48:	b298      	uxth	r0, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	4413      	add	r3, r2
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f203 333e 	addw	r3, r3, #830	; 0x33e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	f7fb fc39 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(250-yOffset,(1030+xOffset)+i);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8005f6a:	b298      	uxth	r0, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	4413      	add	r3, r2
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	4619      	mov	r1, r3
 8005f80:	f7fb fc58 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 8005f84:	f7fb fd16 	bl	80019b4 <Start_Square_Fill>
		HAL_Delay(1);
 8005f88:	2001      	movs	r0, #1
 8005f8a:	f002 fa13 	bl	80083b4 <HAL_Delay>

		// Left Arrow
		Foreground_color_256(color256_black);
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f7fc f96d 	bl	800226e <Foreground_color_256>
		Triangle_Point1_XY(200-yOffset,200-i);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4610      	mov	r0, r2
 8005fac:	f7fb fc72 	bl	8001894 <Triangle_Point1_XY>
		Triangle_Point2_XY(100-yOffset,300-i);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f7fb fc94 	bl	80018f4 <Triangle_Point2_XY>
		Triangle_Point3_XY(300-yOffset,300-i);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	f7fb fcb6 	bl	8001954 <Triangle_Point3_XY>
		Start_Triangle_Fill();
 8005fe8:	f7fb fbe8 	bl	80017bc <Start_Triangle_Fill>
		Line_Start_XY(150-yOffset,250-i);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f7fb fbe6 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(250-yOffset,450-i);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f5c3 73e1 	rsb	r3, r3, #450	; 0x1c2
 800601a:	b29b      	uxth	r3, r3
 800601c:	4619      	mov	r1, r3
 800601e:	4610      	mov	r0, r2
 8006020:	f7fb fc08 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 8006024:	f7fb fcc6 	bl	80019b4 <Start_Square_Fill>

		// Right Arrow
		Triangle_Point1_XY(100-yOffset,(980+xOffset)+i);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8006030:	b298      	uxth	r0, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	b29b      	uxth	r3, r3
 800603a:	4413      	add	r3, r2
 800603c:	b29b      	uxth	r3, r3
 800603e:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8006042:	b29b      	uxth	r3, r3
 8006044:	4619      	mov	r1, r3
 8006046:	f7fb fc25 	bl	8001894 <Triangle_Point1_XY>
		Triangle_Point2_XY(300-yOffset,(980+xOffset)+i);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8006052:	b298      	uxth	r0, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	b29b      	uxth	r3, r3
 800605c:	4413      	add	r3, r2
 800605e:	b29b      	uxth	r3, r3
 8006060:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8006064:	b29b      	uxth	r3, r3
 8006066:	4619      	mov	r1, r3
 8006068:	f7fb fc44 	bl	80018f4 <Triangle_Point2_XY>
		Triangle_Point3_XY(200-yOffset,(1080+xOffset)+i);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8006074:	b298      	uxth	r0, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	b29b      	uxth	r3, r3
 800607e:	4413      	add	r3, r2
 8006080:	b29b      	uxth	r3, r3
 8006082:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8006086:	b29b      	uxth	r3, r3
 8006088:	4619      	mov	r1, r3
 800608a:	f7fb fc63 	bl	8001954 <Triangle_Point3_XY>
		Start_Triangle_Fill();
 800608e:	f7fb fb95 	bl	80017bc <Start_Triangle_Fill>
		Line_Start_XY(150-yOffset,830+i);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f203 333e 	addw	r3, r3, #830	; 0x33e
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f7fb fb93 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(250-yOffset,1030+i);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	4619      	mov	r1, r3
 80060c4:	4610      	mov	r0, r2
 80060c6:	f7fb fbb5 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 80060ca:	f7fb fc73 	bl	80019b4 <Start_Square_Fill>

		if(dir > 0)
 80060ce:	7afb      	ldrb	r3, [r7, #11]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00b      	beq.n	80060ec <screen0x10+0x3b8>
		{
			i+=2;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3302      	adds	r3, #2
 80060d8:	60fb      	str	r3, [r7, #12]
			if(i>100) dir = 0,cnt++;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b64      	cmp	r3, #100	; 0x64
 80060de:	dd0d      	ble.n	80060fc <screen0x10+0x3c8>
 80060e0:	2300      	movs	r3, #0
 80060e2:	72fb      	strb	r3, [r7, #11]
 80060e4:	7abb      	ldrb	r3, [r7, #10]
 80060e6:	3301      	adds	r3, #1
 80060e8:	72bb      	strb	r3, [r7, #10]
 80060ea:	e007      	b.n	80060fc <screen0x10+0x3c8>
		}
		else
		{
			i-=2;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3b02      	subs	r3, #2
 80060f0:	60fb      	str	r3, [r7, #12]
			if(i<0) dir = 1;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da01      	bge.n	80060fc <screen0x10+0x3c8>
 80060f8:	2301      	movs	r3, #1
 80060fa:	72fb      	strb	r3, [r7, #11]
		}
		if(cnt > 5) break;
 80060fc:	7abb      	ldrb	r3, [r7, #10]
 80060fe:	2b05      	cmp	r3, #5
 8006100:	d805      	bhi.n	800610e <screen0x10+0x3da>
	while(currentTask == 0)
 8006102:	4b3f      	ldr	r3, [pc, #252]	; (8006200 <screen0x10+0x4cc>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	f43f ae86 	beq.w	8005e18 <screen0x10+0xe4>
 800610c:	e000      	b.n	8006110 <screen0x10+0x3dc>
		if(cnt > 5) break;
 800610e:	bf00      	nop
	}

	if(fullcolor) Foreground_color_256(color256_blue);
 8006110:	4b3c      	ldr	r3, [pc, #240]	; (8006204 <screen0x10+0x4d0>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <screen0x10+0x3ec>
 8006118:	2003      	movs	r0, #3
 800611a:	f7fc f8a8 	bl	800226e <Foreground_color_256>
 800611e:	e002      	b.n	8006126 <screen0x10+0x3f2>
	else Foreground_color_256(MONOCHROME_COLOR);
 8006120:	201f      	movs	r0, #31
 8006122:	f7fc f8a4 	bl	800226e <Foreground_color_256>
	Triangle_Point1_XY(200-yOffset,150);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800612e:	b29b      	uxth	r3, r3
 8006130:	2196      	movs	r1, #150	; 0x96
 8006132:	4618      	mov	r0, r3
 8006134:	f7fb fbae 	bl	8001894 <Triangle_Point1_XY>
	Triangle_Point2_XY(100-yOffset,250);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8006140:	b29b      	uxth	r3, r3
 8006142:	21fa      	movs	r1, #250	; 0xfa
 8006144:	4618      	mov	r0, r3
 8006146:	f7fb fbd5 	bl	80018f4 <Triangle_Point2_XY>
	Triangle_Point3_XY(300-yOffset,250);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8006152:	b29b      	uxth	r3, r3
 8006154:	21fa      	movs	r1, #250	; 0xfa
 8006156:	4618      	mov	r0, r3
 8006158:	f7fb fbfc 	bl	8001954 <Triangle_Point3_XY>
	Start_Triangle_Fill();
 800615c:	f7fb fb2e 	bl	80017bc <Start_Triangle_Fill>
	Line_Start_XY(150-yOffset,200);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006168:	b29b      	uxth	r3, r3
 800616a:	21c8      	movs	r1, #200	; 0xc8
 800616c:	4618      	mov	r0, r3
 800616e:	f7fb fb31 	bl	80017d4 <Line_Start_XY>
	Line_End_XY(250-yOffset,400);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 800617a:	b29b      	uxth	r3, r3
 800617c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006180:	4618      	mov	r0, r3
 8006182:	f7fb fb57 	bl	8001834 <Line_End_XY>
	Start_Square_Fill();
 8006186:	f7fb fc15 	bl	80019b4 <Start_Square_Fill>

	Triangle_Point1_XY(100-yOffset,1030);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8006192:	b29b      	uxth	r3, r3
 8006194:	f240 4106 	movw	r1, #1030	; 0x406
 8006198:	4618      	mov	r0, r3
 800619a:	f7fb fb7b 	bl	8001894 <Triangle_Point1_XY>
	Triangle_Point2_XY(300-yOffset,1030);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f240 4106 	movw	r1, #1030	; 0x406
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fb fba1 	bl	80018f4 <Triangle_Point2_XY>
	Triangle_Point3_XY(200-yOffset,1130);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f240 416a 	movw	r1, #1130	; 0x46a
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fb fbc7 	bl	8001954 <Triangle_Point3_XY>
	Start_Triangle_Fill();
 80061c6:	f7fb faf9 	bl	80017bc <Start_Triangle_Fill>
	Line_Start_XY(150-yOffset,880);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f44f 715c 	mov.w	r1, #880	; 0x370
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fb fafb 	bl	80017d4 <Line_Start_XY>
	Line_End_XY(250-yOffset,1080);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fb fb21 	bl	8001834 <Line_End_XY>
	Start_Square_Fill();
 80061f2:	f7fb fbdf 	bl	80019b4 <Start_Square_Fill>
}
 80061f6:	bf00      	nop
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200007fa 	.word	0x200007fa
 8006204:	20000000 	.word	0x20000000

08006208 <screen0x11>:


// CONGRATULATIONS YOU WIN XXXX CREDITS
void screen0x11(void)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08e      	sub	sp, #56	; 0x38
 800620c:	af00      	add	r7, sp, #0
//	char temp[5]         = {0};
//	int  x               = 0;
	int  screenHold      = 125;
 800620e:	237d      	movs	r3, #125	; 0x7d
 8006210:	62fb      	str	r3, [r7, #44]	; 0x2c
	int  backgroundDelay = 100;
 8006212:	2364      	movs	r3, #100	; 0x64
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28
	int  colorLoop       = 3;
 8006216:	2303      	movs	r3, #3
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
	int  line1x          = 298;    // was 140
 800621a:	f44f 7395 	mov.w	r3, #298	; 0x12a
 800621e:	623b      	str	r3, [r7, #32]
	int  line1y          = 45;     // was 65
 8006220:	232d      	movs	r3, #45	; 0x2d
 8006222:	61fb      	str	r3, [r7, #28]
	int  youwinx         = 154;     // was 60
 8006224:	239a      	movs	r3, #154	; 0x9a
 8006226:	61bb      	str	r3, [r7, #24]
	int  youwiny         = 210;     // was 230
 8006228:	23d2      	movs	r3, #210	; 0xd2
 800622a:	617b      	str	r3, [r7, #20]
	int  totalx          = 538;    // was 485
 800622c:	f240 231a 	movw	r3, #538	; 0x21a
 8006230:	613b      	str	r3, [r7, #16]
	int  totaly          = 190;    // was 200
 8006232:	23be      	movs	r3, #190	; 0xbe
 8006234:	60fb      	str	r3, [r7, #12]
	int  creditsx        = 805;    // was 771
 8006236:	f240 3325 	movw	r3, #805	; 0x325
 800623a:	60bb      	str	r3, [r7, #8]
	int  creditsy        = 210;    // was 230
 800623c:	23d2      	movs	r3, #210	; 0xd2
 800623e:	607b      	str	r3, [r7, #4]
	unsigned int rndclr  = 0;
 8006240:	2300      	movs	r3, #0
 8006242:	637b      	str	r3, [r7, #52]	; 0x34

	currentTask = 0;
 8006244:	4b86      	ldr	r3, [pc, #536]	; (8006460 <screen0x11+0x258>)
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]

	// Clear Screen
	Foreground_color_256(color256_black);
 800624a:	2000      	movs	r0, #0
 800624c:	f7fc f80f 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8006250:	2000      	movs	r0, #0
 8006252:	f7fc f82e 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 8006256:	2100      	movs	r1, #0
 8006258:	2000      	movs	r0, #0
 800625a:	f7fb fabb 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 800625e:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8006262:	f240 108f 	movw	r0, #399	; 0x18f
 8006266:	f7fb fae5 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 800626a:	f7fb fba3 	bl	80019b4 <Start_Square_Fill>

    CGROM_Select_Genitop_FontROM();
 800626e:	f7fb fe44 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8006272:	f7fb ffce 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	Font_Select_12x24_24x24();
 8006276:	f7fb fe5a 	bl	8001f2e <Font_Select_12x24_24x24>
	//Font_Select_16x32_32x32();
	Set_GTFont_Decoder(0x21);               //  <--- Activate the chip...
 800627a:	2021      	movs	r0, #33	; 0x21
 800627c:	f7fb ffe7 	bl	800224e <Set_GTFont_Decoder>
	if(fullcolor) Foreground_color_256(color256_white);
 8006280:	4b78      	ldr	r3, [pc, #480]	; (8006464 <screen0x11+0x25c>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <screen0x11+0x88>
 8006288:	20ff      	movs	r0, #255	; 0xff
 800628a:	f7fb fff0 	bl	800226e <Foreground_color_256>
 800628e:	e002      	b.n	8006296 <screen0x11+0x8e>
	else Foreground_color_256(MONOCHROME_COLOR);
 8006290:	201f      	movs	r0, #31
 8006292:	f7fb ffec 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8006296:	2000      	movs	r0, #0
 8006298:	f7fc f80b 	bl	80022b2 <Background_color_256>
	//Disable_Font_Alignment();
	//Font_Background_select_Color();
	Font_Background_select_Transparency();
 800629c:	f7fb fea7 	bl	8001fee <Font_Background_select_Transparency>

	Font_Width_X3();
 80062a0:	f7fb ff1b 	bl	80020da <Font_Width_X3>
	Font_Height_X4();
 80062a4:	f7fb ff9b 	bl	80021de <Font_Height_X4>
	if(fullcolor) Foreground_color_256(color256_white);
 80062a8:	4b6e      	ldr	r3, [pc, #440]	; (8006464 <screen0x11+0x25c>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <screen0x11+0xb0>
 80062b0:	20ff      	movs	r0, #255	; 0xff
 80062b2:	f7fb ffdc 	bl	800226e <Foreground_color_256>
 80062b6:	e002      	b.n	80062be <screen0x11+0xb6>
	else Foreground_color_256(MONOCHROME_COLOR);
 80062b8:	201f      	movs	r0, #31
 80062ba:	f7fb ffd8 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 80062be:	2000      	movs	r0, #0
 80062c0:	f7fb fff7 	bl	80022b2 <Background_color_256>
	Goto_Text_XY(line1y,line1x);
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	6a3a      	ldr	r2, [r7, #32]
 80062ca:	b292      	uxth	r2, r2
 80062cc:	4611      	mov	r1, r2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fb fa4c 	bl	800176c <Goto_Text_XY>
    Show_String("CONGRATULATIONS!");
 80062d4:	4864      	ldr	r0, [pc, #400]	; (8006468 <screen0x11+0x260>)
 80062d6:	f7fc f80e 	bl	80022f6 <Show_String>

	Goto_Text_XY(youwiny,youwinx);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	b292      	uxth	r2, r2
 80062e2:	4611      	mov	r1, r2
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fb fa41 	bl	800176c <Goto_Text_XY>
	Font_Width_X3();
 80062ea:	f7fb fef6 	bl	80020da <Font_Width_X3>
	Font_Height_X3();
 80062ee:	f7fb ff5c 	bl	80021aa <Font_Height_X3>
    Show_String("YOU WIN ");
 80062f2:	485e      	ldr	r0, [pc, #376]	; (800646c <screen0x11+0x264>)
 80062f4:	f7fb ffff 	bl	80022f6 <Show_String>

	if(offerText[1] == '\0' && offerText[2] == '\0' && offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+90);  // 1 digit
 80062f8:	4b5d      	ldr	r3, [pc, #372]	; (8006470 <screen0x11+0x268>)
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d116      	bne.n	800632e <screen0x11+0x126>
 8006300:	4b5b      	ldr	r3, [pc, #364]	; (8006470 <screen0x11+0x268>)
 8006302:	789b      	ldrb	r3, [r3, #2]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d112      	bne.n	800632e <screen0x11+0x126>
 8006308:	4b59      	ldr	r3, [pc, #356]	; (8006470 <screen0x11+0x268>)
 800630a:	78db      	ldrb	r3, [r3, #3]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10e      	bne.n	800632e <screen0x11+0x126>
 8006310:	4b57      	ldr	r3, [pc, #348]	; (8006470 <screen0x11+0x268>)
 8006312:	791b      	ldrb	r3, [r3, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <screen0x11+0x126>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	b29a      	uxth	r2, r3
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	b29b      	uxth	r3, r3
 8006320:	335a      	adds	r3, #90	; 0x5a
 8006322:	b29b      	uxth	r3, r3
 8006324:	4619      	mov	r1, r3
 8006326:	4610      	mov	r0, r2
 8006328:	f7fb fa20 	bl	800176c <Goto_Text_XY>
 800632c:	e028      	b.n	8006380 <screen0x11+0x178>
	else if(offerText[2] == '\0' && offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+60);                     // 2 digits
 800632e:	4b50      	ldr	r3, [pc, #320]	; (8006470 <screen0x11+0x268>)
 8006330:	789b      	ldrb	r3, [r3, #2]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d112      	bne.n	800635c <screen0x11+0x154>
 8006336:	4b4e      	ldr	r3, [pc, #312]	; (8006470 <screen0x11+0x268>)
 8006338:	78db      	ldrb	r3, [r3, #3]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10e      	bne.n	800635c <screen0x11+0x154>
 800633e:	4b4c      	ldr	r3, [pc, #304]	; (8006470 <screen0x11+0x268>)
 8006340:	791b      	ldrb	r3, [r3, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10a      	bne.n	800635c <screen0x11+0x154>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	b29a      	uxth	r2, r3
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	b29b      	uxth	r3, r3
 800634e:	333c      	adds	r3, #60	; 0x3c
 8006350:	b29b      	uxth	r3, r3
 8006352:	4619      	mov	r1, r3
 8006354:	4610      	mov	r0, r2
 8006356:	f7fb fa09 	bl	800176c <Goto_Text_XY>
 800635a:	e011      	b.n	8006380 <screen0x11+0x178>
	else if(offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+38);                                             // 3 digits
 800635c:	4b44      	ldr	r3, [pc, #272]	; (8006470 <screen0x11+0x268>)
 800635e:	78db      	ldrb	r3, [r3, #3]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10d      	bne.n	8006380 <screen0x11+0x178>
 8006364:	4b42      	ldr	r3, [pc, #264]	; (8006470 <screen0x11+0x268>)
 8006366:	791b      	ldrb	r3, [r3, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d109      	bne.n	8006380 <screen0x11+0x178>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	b29a      	uxth	r2, r3
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	b29b      	uxth	r3, r3
 8006374:	3326      	adds	r3, #38	; 0x26
 8006376:	b29b      	uxth	r3, r3
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f7fb f9f6 	bl	800176c <Goto_Text_XY>
	if(offerText[1] == ',') Goto_Text_XY(totaly,totalx-8);                                                                            // 5 digits
 8006380:	4b3b      	ldr	r3, [pc, #236]	; (8006470 <screen0x11+0x268>)
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	2b2c      	cmp	r3, #44	; 0x2c
 8006386:	d109      	bne.n	800639c <screen0x11+0x194>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	b29a      	uxth	r2, r3
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b08      	subs	r3, #8
 8006392:	b29b      	uxth	r3, r3
 8006394:	4619      	mov	r1, r3
 8006396:	4610      	mov	r0, r2
 8006398:	f7fb f9e8 	bl	800176c <Goto_Text_XY>

    if(fullcolor) Foreground_color_256(color256_green);
 800639c:	4b31      	ldr	r3, [pc, #196]	; (8006464 <screen0x11+0x25c>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <screen0x11+0x1a4>
 80063a4:	201c      	movs	r0, #28
 80063a6:	f7fb ff62 	bl	800226e <Foreground_color_256>
 80063aa:	e002      	b.n	80063b2 <screen0x11+0x1aa>
	else Foreground_color_256(MONOCHROME_COLOR);
 80063ac:	201f      	movs	r0, #31
 80063ae:	f7fb ff5e 	bl	800226e <Foreground_color_256>
	Font_Width_X4();
 80063b2:	f7fb feac 	bl	800210e <Font_Width_X4>
	Font_Height_X4();
 80063b6:	f7fb ff12 	bl	80021de <Font_Height_X4>
    Show_String((char *)offerText);
 80063ba:	482d      	ldr	r0, [pc, #180]	; (8006470 <screen0x11+0x268>)
 80063bc:	f7fb ff9b 	bl	80022f6 <Show_String>

	if(fullcolor) Foreground_color_256(color256_white);
 80063c0:	4b28      	ldr	r3, [pc, #160]	; (8006464 <screen0x11+0x25c>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <screen0x11+0x1c8>
 80063c8:	20ff      	movs	r0, #255	; 0xff
 80063ca:	f7fb ff50 	bl	800226e <Foreground_color_256>
 80063ce:	e002      	b.n	80063d6 <screen0x11+0x1ce>
	else Foreground_color_256(MONOCHROME_COLOR);
 80063d0:	201f      	movs	r0, #31
 80063d2:	f7fb ff4c 	bl	800226e <Foreground_color_256>
	Goto_Text_XY(creditsy,creditsx);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	b29b      	uxth	r3, r3
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	b292      	uxth	r2, r2
 80063de:	4611      	mov	r1, r2
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fb f9c3 	bl	800176c <Goto_Text_XY>
	Font_Width_X3();
 80063e6:	f7fb fe78 	bl	80020da <Font_Width_X3>
	Font_Height_X3();
 80063ea:	f7fb fede 	bl	80021aa <Font_Height_X3>
    Show_String(" CREDITS");
 80063ee:	4821      	ldr	r0, [pc, #132]	; (8006474 <screen0x11+0x26c>)
 80063f0:	f7fb ff81 	bl	80022f6 <Show_String>

    if(currentTask == 0)  HAL_Delay(screenHold);
 80063f4:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <screen0x11+0x258>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f040 828c 	bne.w	8006916 <screen0x11+0x70e>
 80063fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006400:	4618      	mov	r0, r3
 8006402:	f001 ffd7 	bl	80083b4 <HAL_Delay>
    else return;
    if(currentTask == 0)  HAL_Delay(screenHold);
 8006406:	4b16      	ldr	r3, [pc, #88]	; (8006460 <screen0x11+0x258>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 8285 	bne.w	800691a <screen0x11+0x712>
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	4618      	mov	r0, r3
 8006414:	f001 ffce 	bl	80083b4 <HAL_Delay>
    else return;
    if(currentTask == 0)  HAL_Delay(screenHold);
 8006418:	4b11      	ldr	r3, [pc, #68]	; (8006460 <screen0x11+0x258>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	f040 827e 	bne.w	800691e <screen0x11+0x716>
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	4618      	mov	r0, r3
 8006426:	f001 ffc5 	bl	80083b4 <HAL_Delay>
    else return;
    if(currentTask == 0)  HAL_Delay(screenHold);
 800642a:	4b0d      	ldr	r3, [pc, #52]	; (8006460 <screen0x11+0x258>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f040 8277 	bne.w	8006922 <screen0x11+0x71a>
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	4618      	mov	r0, r3
 8006438:	f001 ffbc 	bl	80083b4 <HAL_Delay>
    else return;

    while(currentTask == 0)
 800643c:	e265      	b.n	800690a <screen0x11+0x702>
    {
		for(int t = 0; t < colorLoop; t++)
 800643e:	2300      	movs	r3, #0
 8006440:	633b      	str	r3, [r7, #48]	; 0x30
 8006442:	e16c      	b.n	800671e <screen0x11+0x516>
		{
			if(currentTask) break;
 8006444:	4b06      	ldr	r3, [pc, #24]	; (8006460 <screen0x11+0x258>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	f040 816e 	bne.w	800672a <screen0x11+0x522>
			if(fullcolor) rndclr = RandomColor_256();
 800644e:	4b05      	ldr	r3, [pc, #20]	; (8006464 <screen0x11+0x25c>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d010      	beq.n	8006478 <screen0x11+0x270>
 8006456:	f001 f8a3 	bl	80075a0 <RandomColor_256>
 800645a:	4603      	mov	r3, r0
 800645c:	637b      	str	r3, [r7, #52]	; 0x34
 800645e:	e00d      	b.n	800647c <screen0x11+0x274>
 8006460:	200007fa 	.word	0x200007fa
 8006464:	20000000 	.word	0x20000000
 8006468:	0800c3f8 	.word	0x0800c3f8
 800646c:	0800c40c 	.word	0x0800c40c
 8006470:	200007f0 	.word	0x200007f0
 8006474:	0800c418 	.word	0x0800c418
			else rndclr = MONOCHROME_COLOR;
 8006478:	231f      	movs	r3, #31
 800647a:	637b      	str	r3, [r7, #52]	; 0x34
			Foreground_color_256(rndclr);
 800647c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647e:	b2db      	uxtb	r3, r3
 8006480:	4618      	mov	r0, r3
 8006482:	f7fb fef4 	bl	800226e <Foreground_color_256>
			Line_Start_XY(0,0);
 8006486:	2100      	movs	r1, #0
 8006488:	2000      	movs	r0, #0
 800648a:	f7fb f9a3 	bl	80017d4 <Line_Start_XY>
			Line_End_XY(399,1279);  //  Y,X
 800648e:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8006492:	f240 108f 	movw	r0, #399	; 0x18f
 8006496:	f7fb f9cd 	bl	8001834 <Line_End_XY>
			Start_Square_Fill();
 800649a:	f7fb fa8b 	bl	80019b4 <Start_Square_Fill>

			Foreground_color_256(color256_black);
 800649e:	2000      	movs	r0, #0
 80064a0:	f7fb fee5 	bl	800226e <Foreground_color_256>

			Font_Width_X3();
 80064a4:	f7fb fe19 	bl	80020da <Font_Width_X3>
			Font_Height_X4();
 80064a8:	f7fb fe99 	bl	80021de <Font_Height_X4>
			Goto_Text_XY(line1y,line1x);
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	6a3a      	ldr	r2, [r7, #32]
 80064b2:	b292      	uxth	r2, r2
 80064b4:	4611      	mov	r1, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fb f958 	bl	800176c <Goto_Text_XY>
			Show_String("CONGRATULATIONS!");
 80064bc:	489e      	ldr	r0, [pc, #632]	; (8006738 <screen0x11+0x530>)
 80064be:	f7fb ff1a 	bl	80022f6 <Show_String>

			Goto_Text_XY(youwiny,youwinx);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	b292      	uxth	r2, r2
 80064ca:	4611      	mov	r1, r2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fb f94d 	bl	800176c <Goto_Text_XY>
			Font_Width_X3();
 80064d2:	f7fb fe02 	bl	80020da <Font_Width_X3>
			Font_Height_X3();
 80064d6:	f7fb fe68 	bl	80021aa <Font_Height_X3>
			Show_String("YOU WIN ");
 80064da:	4898      	ldr	r0, [pc, #608]	; (800673c <screen0x11+0x534>)
 80064dc:	f7fb ff0b 	bl	80022f6 <Show_String>

			if(offerText[1] == '\0' && offerText[2] == '\0' && offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+90);  // 1 digit
 80064e0:	4b97      	ldr	r3, [pc, #604]	; (8006740 <screen0x11+0x538>)
 80064e2:	785b      	ldrb	r3, [r3, #1]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d116      	bne.n	8006516 <screen0x11+0x30e>
 80064e8:	4b95      	ldr	r3, [pc, #596]	; (8006740 <screen0x11+0x538>)
 80064ea:	789b      	ldrb	r3, [r3, #2]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d112      	bne.n	8006516 <screen0x11+0x30e>
 80064f0:	4b93      	ldr	r3, [pc, #588]	; (8006740 <screen0x11+0x538>)
 80064f2:	78db      	ldrb	r3, [r3, #3]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10e      	bne.n	8006516 <screen0x11+0x30e>
 80064f8:	4b91      	ldr	r3, [pc, #580]	; (8006740 <screen0x11+0x538>)
 80064fa:	791b      	ldrb	r3, [r3, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10a      	bne.n	8006516 <screen0x11+0x30e>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	b29a      	uxth	r2, r3
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	b29b      	uxth	r3, r3
 8006508:	335a      	adds	r3, #90	; 0x5a
 800650a:	b29b      	uxth	r3, r3
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f7fb f92c 	bl	800176c <Goto_Text_XY>
 8006514:	e028      	b.n	8006568 <screen0x11+0x360>
			else if(offerText[2] == '\0' && offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+60);                     // 2 digits
 8006516:	4b8a      	ldr	r3, [pc, #552]	; (8006740 <screen0x11+0x538>)
 8006518:	789b      	ldrb	r3, [r3, #2]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d112      	bne.n	8006544 <screen0x11+0x33c>
 800651e:	4b88      	ldr	r3, [pc, #544]	; (8006740 <screen0x11+0x538>)
 8006520:	78db      	ldrb	r3, [r3, #3]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10e      	bne.n	8006544 <screen0x11+0x33c>
 8006526:	4b86      	ldr	r3, [pc, #536]	; (8006740 <screen0x11+0x538>)
 8006528:	791b      	ldrb	r3, [r3, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <screen0x11+0x33c>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	b29a      	uxth	r2, r3
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	b29b      	uxth	r3, r3
 8006536:	333c      	adds	r3, #60	; 0x3c
 8006538:	b29b      	uxth	r3, r3
 800653a:	4619      	mov	r1, r3
 800653c:	4610      	mov	r0, r2
 800653e:	f7fb f915 	bl	800176c <Goto_Text_XY>
 8006542:	e011      	b.n	8006568 <screen0x11+0x360>
			else if(offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+38);                                             // 3 digits
 8006544:	4b7e      	ldr	r3, [pc, #504]	; (8006740 <screen0x11+0x538>)
 8006546:	78db      	ldrb	r3, [r3, #3]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10d      	bne.n	8006568 <screen0x11+0x360>
 800654c:	4b7c      	ldr	r3, [pc, #496]	; (8006740 <screen0x11+0x538>)
 800654e:	791b      	ldrb	r3, [r3, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d109      	bne.n	8006568 <screen0x11+0x360>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	b29a      	uxth	r2, r3
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	b29b      	uxth	r3, r3
 800655c:	3326      	adds	r3, #38	; 0x26
 800655e:	b29b      	uxth	r3, r3
 8006560:	4619      	mov	r1, r3
 8006562:	4610      	mov	r0, r2
 8006564:	f7fb f902 	bl	800176c <Goto_Text_XY>
			if(offerText[1] == ',') Goto_Text_XY(totaly,totalx-8);                                                                            // 5 digits
 8006568:	4b75      	ldr	r3, [pc, #468]	; (8006740 <screen0x11+0x538>)
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	2b2c      	cmp	r3, #44	; 0x2c
 800656e:	d109      	bne.n	8006584 <screen0x11+0x37c>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	b29a      	uxth	r2, r3
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b08      	subs	r3, #8
 800657a:	b29b      	uxth	r3, r3
 800657c:	4619      	mov	r1, r3
 800657e:	4610      	mov	r0, r2
 8006580:	f7fb f8f4 	bl	800176c <Goto_Text_XY>

//			Goto_Text_XY(totaly,totalx);
			Font_Width_X4();
 8006584:	f7fb fdc3 	bl	800210e <Font_Width_X4>
			Font_Height_X4();
 8006588:	f7fb fe29 	bl	80021de <Font_Height_X4>
		    Show_String((char *)offerText);
 800658c:	486c      	ldr	r0, [pc, #432]	; (8006740 <screen0x11+0x538>)
 800658e:	f7fb feb2 	bl	80022f6 <Show_String>

			if(currentTask) break;
 8006592:	4b6c      	ldr	r3, [pc, #432]	; (8006744 <screen0x11+0x53c>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f040 80c9 	bne.w	800672e <screen0x11+0x526>

			Goto_Text_XY(creditsy,creditsx);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	b292      	uxth	r2, r2
 80065a4:	4611      	mov	r1, r2
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fb f8e0 	bl	800176c <Goto_Text_XY>
			Font_Width_X3();
 80065ac:	f7fb fd95 	bl	80020da <Font_Width_X3>
			Font_Height_X3();
 80065b0:	f7fb fdfb 	bl	80021aa <Font_Height_X3>
			Show_String(" CREDITS");
 80065b4:	4864      	ldr	r0, [pc, #400]	; (8006748 <screen0x11+0x540>)
 80065b6:	f7fb fe9e 	bl	80022f6 <Show_String>

			if(currentTask == 0) HAL_Delay(backgroundDelay);
 80065ba:	4b62      	ldr	r3, [pc, #392]	; (8006744 <screen0x11+0x53c>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f040 80b7 	bne.w	8006732 <screen0x11+0x52a>
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	4618      	mov	r0, r3
 80065c8:	f001 fef4 	bl	80083b4 <HAL_Delay>
			else break;

			Background_color_256(color256_black);
 80065cc:	2000      	movs	r0, #0
 80065ce:	f7fb fe70 	bl	80022b2 <Background_color_256>
			if(fullcolor) Foreground_color_256(rndclr);
 80065d2:	4b5e      	ldr	r3, [pc, #376]	; (800674c <screen0x11+0x544>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d005      	beq.n	80065e6 <screen0x11+0x3de>
 80065da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fb fe45 	bl	800226e <Foreground_color_256>
 80065e4:	e002      	b.n	80065ec <screen0x11+0x3e4>
			else Foreground_color_256(MONOCHROME_COLOR);
 80065e6:	201f      	movs	r0, #31
 80065e8:	f7fb fe41 	bl	800226e <Foreground_color_256>
			Line_Start_XY(0,0);
 80065ec:	2100      	movs	r1, #0
 80065ee:	2000      	movs	r0, #0
 80065f0:	f7fb f8f0 	bl	80017d4 <Line_Start_XY>
			Line_End_XY(399,1279);  //  Y,X
 80065f4:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80065f8:	f240 108f 	movw	r0, #399	; 0x18f
 80065fc:	f7fb f91a 	bl	8001834 <Line_End_XY>
			Start_Square_Fill();
 8006600:	f7fb f9d8 	bl	80019b4 <Start_Square_Fill>

			//Foreground_color_256(color256_white);
			Font_Width_X3();
 8006604:	f7fb fd69 	bl	80020da <Font_Width_X3>
			Font_Height_X4();
 8006608:	f7fb fde9 	bl	80021de <Font_Height_X4>
			//Goto_Text_XY(65,140);
			Goto_Text_XY(line1y,line1x);
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	b29b      	uxth	r3, r3
 8006610:	6a3a      	ldr	r2, [r7, #32]
 8006612:	b292      	uxth	r2, r2
 8006614:	4611      	mov	r1, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f7fb f8a8 	bl	800176c <Goto_Text_XY>
			Show_String("CONGRATULATIONS!");
 800661c:	4846      	ldr	r0, [pc, #280]	; (8006738 <screen0x11+0x530>)
 800661e:	f7fb fe6a 	bl	80022f6 <Show_String>
			Font_Width_X3();
 8006622:	f7fb fd5a 	bl	80020da <Font_Width_X3>
			Font_Height_X3();
 8006626:	f7fb fdc0 	bl	80021aa <Font_Height_X3>
	//			Goto_Text_XY(230,90);
			Goto_Text_XY(youwiny,youwinx);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	b29b      	uxth	r3, r3
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	b292      	uxth	r2, r2
 8006632:	4611      	mov	r1, r2
 8006634:	4618      	mov	r0, r3
 8006636:	f7fb f899 	bl	800176c <Goto_Text_XY>
			Show_String("YOU WIN ");
 800663a:	4840      	ldr	r0, [pc, #256]	; (800673c <screen0x11+0x534>)
 800663c:	f7fb fe5b 	bl	80022f6 <Show_String>

			//Goto_Text_XY(200,525);
//			Goto_Text_XY(totaly,totalx);

			if(offerText[1] == '\0' && offerText[2] == '\0' && offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+90);  // 1 digit
 8006640:	4b3f      	ldr	r3, [pc, #252]	; (8006740 <screen0x11+0x538>)
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d116      	bne.n	8006676 <screen0x11+0x46e>
 8006648:	4b3d      	ldr	r3, [pc, #244]	; (8006740 <screen0x11+0x538>)
 800664a:	789b      	ldrb	r3, [r3, #2]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d112      	bne.n	8006676 <screen0x11+0x46e>
 8006650:	4b3b      	ldr	r3, [pc, #236]	; (8006740 <screen0x11+0x538>)
 8006652:	78db      	ldrb	r3, [r3, #3]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10e      	bne.n	8006676 <screen0x11+0x46e>
 8006658:	4b39      	ldr	r3, [pc, #228]	; (8006740 <screen0x11+0x538>)
 800665a:	791b      	ldrb	r3, [r3, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <screen0x11+0x46e>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	b29a      	uxth	r2, r3
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	b29b      	uxth	r3, r3
 8006668:	335a      	adds	r3, #90	; 0x5a
 800666a:	b29b      	uxth	r3, r3
 800666c:	4619      	mov	r1, r3
 800666e:	4610      	mov	r0, r2
 8006670:	f7fb f87c 	bl	800176c <Goto_Text_XY>
 8006674:	e028      	b.n	80066c8 <screen0x11+0x4c0>
			else if(offerText[2] == '\0' && offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+60);                     // 2 digits
 8006676:	4b32      	ldr	r3, [pc, #200]	; (8006740 <screen0x11+0x538>)
 8006678:	789b      	ldrb	r3, [r3, #2]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d112      	bne.n	80066a4 <screen0x11+0x49c>
 800667e:	4b30      	ldr	r3, [pc, #192]	; (8006740 <screen0x11+0x538>)
 8006680:	78db      	ldrb	r3, [r3, #3]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10e      	bne.n	80066a4 <screen0x11+0x49c>
 8006686:	4b2e      	ldr	r3, [pc, #184]	; (8006740 <screen0x11+0x538>)
 8006688:	791b      	ldrb	r3, [r3, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10a      	bne.n	80066a4 <screen0x11+0x49c>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	b29a      	uxth	r2, r3
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	b29b      	uxth	r3, r3
 8006696:	333c      	adds	r3, #60	; 0x3c
 8006698:	b29b      	uxth	r3, r3
 800669a:	4619      	mov	r1, r3
 800669c:	4610      	mov	r0, r2
 800669e:	f7fb f865 	bl	800176c <Goto_Text_XY>
 80066a2:	e011      	b.n	80066c8 <screen0x11+0x4c0>
			else if(offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+38);                                             // 3 digits
 80066a4:	4b26      	ldr	r3, [pc, #152]	; (8006740 <screen0x11+0x538>)
 80066a6:	78db      	ldrb	r3, [r3, #3]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10d      	bne.n	80066c8 <screen0x11+0x4c0>
 80066ac:	4b24      	ldr	r3, [pc, #144]	; (8006740 <screen0x11+0x538>)
 80066ae:	791b      	ldrb	r3, [r3, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d109      	bne.n	80066c8 <screen0x11+0x4c0>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3326      	adds	r3, #38	; 0x26
 80066be:	b29b      	uxth	r3, r3
 80066c0:	4619      	mov	r1, r3
 80066c2:	4610      	mov	r0, r2
 80066c4:	f7fb f852 	bl	800176c <Goto_Text_XY>
			if(offerText[1] == ',') Goto_Text_XY(totaly,totalx-8);                                                                            // 5 digits
 80066c8:	4b1d      	ldr	r3, [pc, #116]	; (8006740 <screen0x11+0x538>)
 80066ca:	785b      	ldrb	r3, [r3, #1]
 80066cc:	2b2c      	cmp	r3, #44	; 0x2c
 80066ce:	d109      	bne.n	80066e4 <screen0x11+0x4dc>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	3b08      	subs	r3, #8
 80066da:	b29b      	uxth	r3, r3
 80066dc:	4619      	mov	r1, r3
 80066de:	4610      	mov	r0, r2
 80066e0:	f7fb f844 	bl	800176c <Goto_Text_XY>

			Font_Width_X4();
 80066e4:	f7fb fd13 	bl	800210e <Font_Width_X4>
			Font_Height_X4();
 80066e8:	f7fb fd79 	bl	80021de <Font_Height_X4>
		    Show_String((char *)offerText);
 80066ec:	4814      	ldr	r0, [pc, #80]	; (8006740 <screen0x11+0x538>)
 80066ee:	f7fb fe02 	bl	80022f6 <Show_String>

			//Goto_Text_XY(230,741);
			Goto_Text_XY(creditsy,creditsx);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	b292      	uxth	r2, r2
 80066fa:	4611      	mov	r1, r2
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fb f835 	bl	800176c <Goto_Text_XY>
			Font_Width_X3();
 8006702:	f7fb fcea 	bl	80020da <Font_Width_X3>
			Font_Height_X3();
 8006706:	f7fb fd50 	bl	80021aa <Font_Height_X3>
			Show_String(" CREDITS");
 800670a:	480f      	ldr	r0, [pc, #60]	; (8006748 <screen0x11+0x540>)
 800670c:	f7fb fdf3 	bl	80022f6 <Show_String>

			if(currentTask) break;
 8006710:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <screen0x11+0x53c>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11b      	bne.n	8006750 <screen0x11+0x548>
		for(int t = 0; t < colorLoop; t++)
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	3301      	adds	r3, #1
 800671c:	633b      	str	r3, [r7, #48]	; 0x30
 800671e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	429a      	cmp	r2, r3
 8006724:	f6ff ae8e 	blt.w	8006444 <screen0x11+0x23c>
 8006728:	e013      	b.n	8006752 <screen0x11+0x54a>
			if(currentTask) break;
 800672a:	bf00      	nop
 800672c:	e011      	b.n	8006752 <screen0x11+0x54a>
			if(currentTask) break;
 800672e:	bf00      	nop
 8006730:	e00f      	b.n	8006752 <screen0x11+0x54a>
			else break;
 8006732:	bf00      	nop
 8006734:	e00d      	b.n	8006752 <screen0x11+0x54a>
 8006736:	bf00      	nop
 8006738:	0800c3f8 	.word	0x0800c3f8
 800673c:	0800c40c 	.word	0x0800c40c
 8006740:	200007f0 	.word	0x200007f0
 8006744:	200007fa 	.word	0x200007fa
 8006748:	0800c418 	.word	0x0800c418
 800674c:	20000000 	.word	0x20000000
			if(currentTask) break;
 8006750:	bf00      	nop
		}

		// Clear Screen
		Foreground_color_256(color256_black);
 8006752:	2000      	movs	r0, #0
 8006754:	f7fb fd8b 	bl	800226e <Foreground_color_256>
		Background_color_256(color256_black);
 8006758:	2000      	movs	r0, #0
 800675a:	f7fb fdaa 	bl	80022b2 <Background_color_256>
		Line_Start_XY(0,0);
 800675e:	2100      	movs	r1, #0
 8006760:	2000      	movs	r0, #0
 8006762:	f7fb f837 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(399,1279);  //  Y,X
 8006766:	f240 41ff 	movw	r1, #1279	; 0x4ff
 800676a:	f240 108f 	movw	r0, #399	; 0x18f
 800676e:	f7fb f861 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 8006772:	f7fb f91f 	bl	80019b4 <Start_Square_Fill>

		Font_Width_X3();
 8006776:	f7fb fcb0 	bl	80020da <Font_Width_X3>
		Font_Height_X4();
 800677a:	f7fb fd30 	bl	80021de <Font_Height_X4>
		if(fullcolor) Foreground_color_256(color256_white);
 800677e:	4b6f      	ldr	r3, [pc, #444]	; (800693c <screen0x11+0x734>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <screen0x11+0x586>
 8006786:	20ff      	movs	r0, #255	; 0xff
 8006788:	f7fb fd71 	bl	800226e <Foreground_color_256>
 800678c:	e002      	b.n	8006794 <screen0x11+0x58c>
		else Foreground_color_256(MONOCHROME_COLOR);
 800678e:	201f      	movs	r0, #31
 8006790:	f7fb fd6d 	bl	800226e <Foreground_color_256>
		Background_color_256(color256_black);
 8006794:	2000      	movs	r0, #0
 8006796:	f7fb fd8c 	bl	80022b2 <Background_color_256>
		Goto_Text_XY(line1y,line1x);
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	b29b      	uxth	r3, r3
 800679e:	6a3a      	ldr	r2, [r7, #32]
 80067a0:	b292      	uxth	r2, r2
 80067a2:	4611      	mov	r1, r2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fa ffe1 	bl	800176c <Goto_Text_XY>
		Show_String("CONGRATULATIONS!");
 80067aa:	4865      	ldr	r0, [pc, #404]	; (8006940 <screen0x11+0x738>)
 80067ac:	f7fb fda3 	bl	80022f6 <Show_String>

		Goto_Text_XY(youwiny,youwinx);
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	b292      	uxth	r2, r2
 80067b8:	4611      	mov	r1, r2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fa ffd6 	bl	800176c <Goto_Text_XY>
		Font_Width_X3();
 80067c0:	f7fb fc8b 	bl	80020da <Font_Width_X3>
		Font_Height_X3();
 80067c4:	f7fb fcf1 	bl	80021aa <Font_Height_X3>
		Show_String("YOU WIN ");
 80067c8:	485e      	ldr	r0, [pc, #376]	; (8006944 <screen0x11+0x73c>)
 80067ca:	f7fb fd94 	bl	80022f6 <Show_String>

		if(offerText[1] == '\0' && offerText[2] == '\0' && offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+90);  // 1 digit
 80067ce:	4b5e      	ldr	r3, [pc, #376]	; (8006948 <screen0x11+0x740>)
 80067d0:	785b      	ldrb	r3, [r3, #1]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d116      	bne.n	8006804 <screen0x11+0x5fc>
 80067d6:	4b5c      	ldr	r3, [pc, #368]	; (8006948 <screen0x11+0x740>)
 80067d8:	789b      	ldrb	r3, [r3, #2]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d112      	bne.n	8006804 <screen0x11+0x5fc>
 80067de:	4b5a      	ldr	r3, [pc, #360]	; (8006948 <screen0x11+0x740>)
 80067e0:	78db      	ldrb	r3, [r3, #3]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10e      	bne.n	8006804 <screen0x11+0x5fc>
 80067e6:	4b58      	ldr	r3, [pc, #352]	; (8006948 <screen0x11+0x740>)
 80067e8:	791b      	ldrb	r3, [r3, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10a      	bne.n	8006804 <screen0x11+0x5fc>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	335a      	adds	r3, #90	; 0x5a
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	4619      	mov	r1, r3
 80067fc:	4610      	mov	r0, r2
 80067fe:	f7fa ffb5 	bl	800176c <Goto_Text_XY>
 8006802:	e028      	b.n	8006856 <screen0x11+0x64e>
		else if(offerText[2] == '\0' && offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+60);                     // 2 digits
 8006804:	4b50      	ldr	r3, [pc, #320]	; (8006948 <screen0x11+0x740>)
 8006806:	789b      	ldrb	r3, [r3, #2]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d112      	bne.n	8006832 <screen0x11+0x62a>
 800680c:	4b4e      	ldr	r3, [pc, #312]	; (8006948 <screen0x11+0x740>)
 800680e:	78db      	ldrb	r3, [r3, #3]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10e      	bne.n	8006832 <screen0x11+0x62a>
 8006814:	4b4c      	ldr	r3, [pc, #304]	; (8006948 <screen0x11+0x740>)
 8006816:	791b      	ldrb	r3, [r3, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <screen0x11+0x62a>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	b29a      	uxth	r2, r3
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	b29b      	uxth	r3, r3
 8006824:	333c      	adds	r3, #60	; 0x3c
 8006826:	b29b      	uxth	r3, r3
 8006828:	4619      	mov	r1, r3
 800682a:	4610      	mov	r0, r2
 800682c:	f7fa ff9e 	bl	800176c <Goto_Text_XY>
 8006830:	e011      	b.n	8006856 <screen0x11+0x64e>
		else if(offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+38);                                             // 3 digits
 8006832:	4b45      	ldr	r3, [pc, #276]	; (8006948 <screen0x11+0x740>)
 8006834:	78db      	ldrb	r3, [r3, #3]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10d      	bne.n	8006856 <screen0x11+0x64e>
 800683a:	4b43      	ldr	r3, [pc, #268]	; (8006948 <screen0x11+0x740>)
 800683c:	791b      	ldrb	r3, [r3, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d109      	bne.n	8006856 <screen0x11+0x64e>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	b29a      	uxth	r2, r3
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	b29b      	uxth	r3, r3
 800684a:	3326      	adds	r3, #38	; 0x26
 800684c:	b29b      	uxth	r3, r3
 800684e:	4619      	mov	r1, r3
 8006850:	4610      	mov	r0, r2
 8006852:	f7fa ff8b 	bl	800176c <Goto_Text_XY>
		if(offerText[1] == ',') Goto_Text_XY(totaly,totalx-8);                                                                            // 5 digits
 8006856:	4b3c      	ldr	r3, [pc, #240]	; (8006948 <screen0x11+0x740>)
 8006858:	785b      	ldrb	r3, [r3, #1]
 800685a:	2b2c      	cmp	r3, #44	; 0x2c
 800685c:	d109      	bne.n	8006872 <screen0x11+0x66a>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	b29a      	uxth	r2, r3
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b08      	subs	r3, #8
 8006868:	b29b      	uxth	r3, r3
 800686a:	4619      	mov	r1, r3
 800686c:	4610      	mov	r0, r2
 800686e:	f7fa ff7d 	bl	800176c <Goto_Text_XY>

		if(fullcolor) Foreground_color_256(color256_green);
 8006872:	4b32      	ldr	r3, [pc, #200]	; (800693c <screen0x11+0x734>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <screen0x11+0x67a>
 800687a:	201c      	movs	r0, #28
 800687c:	f7fb fcf7 	bl	800226e <Foreground_color_256>
 8006880:	e002      	b.n	8006888 <screen0x11+0x680>
		else Foreground_color_256(MONOCHROME_COLOR);
 8006882:	201f      	movs	r0, #31
 8006884:	f7fb fcf3 	bl	800226e <Foreground_color_256>
		Font_Width_X4();
 8006888:	f7fb fc41 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 800688c:	f7fb fca7 	bl	80021de <Font_Height_X4>
	    Show_String((char *)offerText);
 8006890:	482d      	ldr	r0, [pc, #180]	; (8006948 <screen0x11+0x740>)
 8006892:	f7fb fd30 	bl	80022f6 <Show_String>

		if(fullcolor) Foreground_color_256(color256_white);
 8006896:	4b29      	ldr	r3, [pc, #164]	; (800693c <screen0x11+0x734>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <screen0x11+0x69e>
 800689e:	20ff      	movs	r0, #255	; 0xff
 80068a0:	f7fb fce5 	bl	800226e <Foreground_color_256>
 80068a4:	e002      	b.n	80068ac <screen0x11+0x6a4>
		else Foreground_color_256(MONOCHROME_COLOR);
 80068a6:	201f      	movs	r0, #31
 80068a8:	f7fb fce1 	bl	800226e <Foreground_color_256>
		Goto_Text_XY(creditsy,creditsx);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	b292      	uxth	r2, r2
 80068b4:	4611      	mov	r1, r2
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fa ff58 	bl	800176c <Goto_Text_XY>
		Font_Width_X3();
 80068bc:	f7fb fc0d 	bl	80020da <Font_Width_X3>
		Font_Height_X3();
 80068c0:	f7fb fc73 	bl	80021aa <Font_Height_X3>
		Show_String(" CREDITS");
 80068c4:	4821      	ldr	r0, [pc, #132]	; (800694c <screen0x11+0x744>)
 80068c6:	f7fb fd16 	bl	80022f6 <Show_String>

		if(currentTask == 0)  HAL_Delay(screenHold);
 80068ca:	4b21      	ldr	r3, [pc, #132]	; (8006950 <screen0x11+0x748>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d129      	bne.n	8006926 <screen0x11+0x71e>
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	4618      	mov	r0, r3
 80068d6:	f001 fd6d 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0)  HAL_Delay(screenHold);
 80068da:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <screen0x11+0x748>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d123      	bne.n	800692a <screen0x11+0x722>
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 fd65 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0)  HAL_Delay(screenHold);
 80068ea:	4b19      	ldr	r3, [pc, #100]	; (8006950 <screen0x11+0x748>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d11d      	bne.n	800692e <screen0x11+0x726>
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	4618      	mov	r0, r3
 80068f6:	f001 fd5d 	bl	80083b4 <HAL_Delay>
		else break;
		if(currentTask == 0)  HAL_Delay(screenHold);
 80068fa:	4b15      	ldr	r3, [pc, #84]	; (8006950 <screen0x11+0x748>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d117      	bne.n	8006932 <screen0x11+0x72a>
 8006902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006904:	4618      	mov	r0, r3
 8006906:	f001 fd55 	bl	80083b4 <HAL_Delay>
    while(currentTask == 0)
 800690a:	4b11      	ldr	r3, [pc, #68]	; (8006950 <screen0x11+0x748>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f43f ad95 	beq.w	800643e <screen0x11+0x236>
 8006914:	e00e      	b.n	8006934 <screen0x11+0x72c>
    else return;
 8006916:	bf00      	nop
 8006918:	e00c      	b.n	8006934 <screen0x11+0x72c>
    else return;
 800691a:	bf00      	nop
 800691c:	e00a      	b.n	8006934 <screen0x11+0x72c>
    else return;
 800691e:	bf00      	nop
 8006920:	e008      	b.n	8006934 <screen0x11+0x72c>
    else return;
 8006922:	bf00      	nop
 8006924:	e006      	b.n	8006934 <screen0x11+0x72c>
		else break;
 8006926:	bf00      	nop
 8006928:	e004      	b.n	8006934 <screen0x11+0x72c>
		else break;
 800692a:	bf00      	nop
 800692c:	e002      	b.n	8006934 <screen0x11+0x72c>
		else break;
 800692e:	bf00      	nop
 8006930:	e000      	b.n	8006934 <screen0x11+0x72c>
		else break;
 8006932:	bf00      	nop
    }
}
 8006934:	3738      	adds	r7, #56	; 0x38
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20000000 	.word	0x20000000
 8006940:	0800c3f8 	.word	0x0800c3f8
 8006944:	0800c40c 	.word	0x0800c40c
 8006948:	200007f0 	.word	0x200007f0
 800694c:	0800c418 	.word	0x0800c418
 8006950:	200007fa 	.word	0x200007fa

08006954 <screen0x12>:



// TOTAL BONUS WIN X,YYY  CREDITS
void screen0x12(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
	unsigned int   totalx   = 518;
 800695a:	f240 2306 	movw	r3, #518	; 0x206
 800695e:	613b      	str	r3, [r7, #16]
	unsigned int   totaly   = 200;
 8006960:	23c8      	movs	r3, #200	; 0xc8
 8006962:	60fb      	str	r3, [r7, #12]
	unsigned int   creditsx = 620;
 8006964:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8006968:	60bb      	str	r3, [r7, #8]
	unsigned int   creditsy = 192;
 800696a:	23c0      	movs	r3, #192	; 0xc0
 800696c:	607b      	str	r3, [r7, #4]
	unsigned int   holdTime = 100;
 800696e:	2364      	movs	r3, #100	; 0x64
 8006970:	603b      	str	r3, [r7, #0]
	unsigned short rndColor = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	82fb      	strh	r3, [r7, #22]

	currentTask = 0;
 8006976:	4b9e      	ldr	r3, [pc, #632]	; (8006bf0 <screen0x12+0x29c>)
 8006978:	2200      	movs	r2, #0
 800697a:	701a      	strb	r2, [r3, #0]

	if(offerText[1] == '\0' && offerText[2] == '\0' && offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+90);  // 1 digit
 800697c:	4b9d      	ldr	r3, [pc, #628]	; (8006bf4 <screen0x12+0x2a0>)
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d116      	bne.n	80069b2 <screen0x12+0x5e>
 8006984:	4b9b      	ldr	r3, [pc, #620]	; (8006bf4 <screen0x12+0x2a0>)
 8006986:	789b      	ldrb	r3, [r3, #2]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d112      	bne.n	80069b2 <screen0x12+0x5e>
 800698c:	4b99      	ldr	r3, [pc, #612]	; (8006bf4 <screen0x12+0x2a0>)
 800698e:	78db      	ldrb	r3, [r3, #3]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10e      	bne.n	80069b2 <screen0x12+0x5e>
 8006994:	4b97      	ldr	r3, [pc, #604]	; (8006bf4 <screen0x12+0x2a0>)
 8006996:	791b      	ldrb	r3, [r3, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <screen0x12+0x5e>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	b29a      	uxth	r2, r3
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	335a      	adds	r3, #90	; 0x5a
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	4619      	mov	r1, r3
 80069aa:	4610      	mov	r0, r2
 80069ac:	f7fa fede 	bl	800176c <Goto_Text_XY>
 80069b0:	e028      	b.n	8006a04 <screen0x12+0xb0>
	else if(offerText[2] == '\0' && offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+60);                     // 2 digits
 80069b2:	4b90      	ldr	r3, [pc, #576]	; (8006bf4 <screen0x12+0x2a0>)
 80069b4:	789b      	ldrb	r3, [r3, #2]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d112      	bne.n	80069e0 <screen0x12+0x8c>
 80069ba:	4b8e      	ldr	r3, [pc, #568]	; (8006bf4 <screen0x12+0x2a0>)
 80069bc:	78db      	ldrb	r3, [r3, #3]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10e      	bne.n	80069e0 <screen0x12+0x8c>
 80069c2:	4b8c      	ldr	r3, [pc, #560]	; (8006bf4 <screen0x12+0x2a0>)
 80069c4:	791b      	ldrb	r3, [r3, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <screen0x12+0x8c>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	333c      	adds	r3, #60	; 0x3c
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	4619      	mov	r1, r3
 80069d8:	4610      	mov	r0, r2
 80069da:	f7fa fec7 	bl	800176c <Goto_Text_XY>
 80069de:	e011      	b.n	8006a04 <screen0x12+0xb0>
	else if(offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(totaly,totalx+38);                                             // 3 digits
 80069e0:	4b84      	ldr	r3, [pc, #528]	; (8006bf4 <screen0x12+0x2a0>)
 80069e2:	78db      	ldrb	r3, [r3, #3]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10d      	bne.n	8006a04 <screen0x12+0xb0>
 80069e8:	4b82      	ldr	r3, [pc, #520]	; (8006bf4 <screen0x12+0x2a0>)
 80069ea:	791b      	ldrb	r3, [r3, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d109      	bne.n	8006a04 <screen0x12+0xb0>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	3326      	adds	r3, #38	; 0x26
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	4619      	mov	r1, r3
 80069fe:	4610      	mov	r0, r2
 8006a00:	f7fa feb4 	bl	800176c <Goto_Text_XY>
	if(offerText[1] == ',') Goto_Text_XY(totaly,totalx-8);                                                                            // 5 digits
 8006a04:	4b7b      	ldr	r3, [pc, #492]	; (8006bf4 <screen0x12+0x2a0>)
 8006a06:	785b      	ldrb	r3, [r3, #1]
 8006a08:	2b2c      	cmp	r3, #44	; 0x2c
 8006a0a:	d109      	bne.n	8006a20 <screen0x12+0xcc>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b08      	subs	r3, #8
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	f7fa fea6 	bl	800176c <Goto_Text_XY>

	// Clear Screen
	Foreground_color_256(color256_black);
 8006a20:	2000      	movs	r0, #0
 8006a22:	f7fb fc24 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8006a26:	2000      	movs	r0, #0
 8006a28:	f7fb fc43 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	2000      	movs	r0, #0
 8006a30:	f7fa fed0 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 8006a34:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8006a38:	f240 108f 	movw	r0, #399	; 0x18f
 8006a3c:	f7fa fefa 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 8006a40:	f7fa ffb8 	bl	80019b4 <Start_Square_Fill>

    CGROM_Select_Genitop_FontROM();
 8006a44:	f7fb fa59 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8006a48:	f7fb fbe3 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	Font_Select_12x24_24x24();
 8006a4c:	f7fb fa6f 	bl	8001f2e <Font_Select_12x24_24x24>
	//Font_Select_16x32_32x32();
	Set_GTFont_Decoder(0x21);               //  <--- Activate the chip...
 8006a50:	2021      	movs	r0, #33	; 0x21
 8006a52:	f7fb fbfc 	bl	800224e <Set_GTFont_Decoder>
	if(fullcolor) Foreground_color_256(color256_white);
 8006a56:	4b68      	ldr	r3, [pc, #416]	; (8006bf8 <screen0x12+0x2a4>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <screen0x12+0x112>
 8006a5e:	20ff      	movs	r0, #255	; 0xff
 8006a60:	f7fb fc05 	bl	800226e <Foreground_color_256>
 8006a64:	e002      	b.n	8006a6c <screen0x12+0x118>
	else Foreground_color_256(MONOCHROME_COLOR);
 8006a66:	201f      	movs	r0, #31
 8006a68:	f7fb fc01 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	f7fb fc20 	bl	80022b2 <Background_color_256>
	//Font_Background_select_Color();
	//Font_Background_select_Transparency();
	//Font_Width_X4();
	//Font_Height_X4();

    if(fullcolor) Foreground_color_256(color256_white);
 8006a72:	4b61      	ldr	r3, [pc, #388]	; (8006bf8 <screen0x12+0x2a4>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <screen0x12+0x12e>
 8006a7a:	20ff      	movs	r0, #255	; 0xff
 8006a7c:	f7fb fbf7 	bl	800226e <Foreground_color_256>
 8006a80:	e002      	b.n	8006a88 <screen0x12+0x134>
	else Foreground_color_256(MONOCHROME_COLOR);
 8006a82:	201f      	movs	r0, #31
 8006a84:	f7fb fbf3 	bl	800226e <Foreground_color_256>

    Font_Width_X4();
 8006a88:	f7fb fb41 	bl	800210e <Font_Width_X4>
	Font_Height_X4();
 8006a8c:	f7fb fba7 	bl	80021de <Font_Height_X4>
	Goto_Text_XY(65,190);            // it was 65, 30
 8006a90:	21be      	movs	r1, #190	; 0xbe
 8006a92:	2041      	movs	r0, #65	; 0x41
 8006a94:	f7fa fe6a 	bl	800176c <Goto_Text_XY>
	Show_String("TOTAL BONUS WIN");
 8006a98:	4858      	ldr	r0, [pc, #352]	; (8006bfc <screen0x12+0x2a8>)
 8006a9a:	f7fb fc2c 	bl	80022f6 <Show_String>

	Font_Width_X4();
 8006a9e:	f7fb fb36 	bl	800210e <Font_Width_X4>
	Font_Height_X4();
 8006aa2:	f7fb fb9c 	bl	80021de <Font_Height_X4>
	//Foreground_color_256(color256_green);
	if(fullcolor) Foreground_color_256(color256_white);
 8006aa6:	4b54      	ldr	r3, [pc, #336]	; (8006bf8 <screen0x12+0x2a4>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <screen0x12+0x162>
 8006aae:	20ff      	movs	r0, #255	; 0xff
 8006ab0:	f7fb fbdd 	bl	800226e <Foreground_color_256>
 8006ab4:	e002      	b.n	8006abc <screen0x12+0x168>
	else Foreground_color_256(MONOCHROME_COLOR);
 8006ab6:	201f      	movs	r0, #31
 8006ab8:	f7fb fbd9 	bl	800226e <Foreground_color_256>

	Goto_Text_XY(190,358);
 8006abc:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8006ac0:	20be      	movs	r0, #190	; 0xbe
 8006ac2:	f7fa fe53 	bl	800176c <Goto_Text_XY>
	Show_String((char *)offerText);
 8006ac6:	484b      	ldr	r0, [pc, #300]	; (8006bf4 <screen0x12+0x2a0>)
 8006ac8:	f7fb fc15 	bl	80022f6 <Show_String>

	if(fullcolor) Foreground_color_256(color256_white);
 8006acc:	4b4a      	ldr	r3, [pc, #296]	; (8006bf8 <screen0x12+0x2a4>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <screen0x12+0x188>
 8006ad4:	20ff      	movs	r0, #255	; 0xff
 8006ad6:	f7fb fbca 	bl	800226e <Foreground_color_256>
 8006ada:	e002      	b.n	8006ae2 <screen0x12+0x18e>
	else Foreground_color_256(MONOCHROME_COLOR);
 8006adc:	201f      	movs	r0, #31
 8006ade:	f7fb fbc6 	bl	800226e <Foreground_color_256>

	Font_Width_X3();
 8006ae2:	f7fb fafa 	bl	80020da <Font_Width_X3>
	Font_Height_X4();
 8006ae6:	f7fb fb7a 	bl	80021de <Font_Height_X4>
	Goto_Text_XY(creditsy,creditsx);           // was 245, 806
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	b292      	uxth	r2, r2
 8006af2:	4611      	mov	r1, r2
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fa fe39 	bl	800176c <Goto_Text_XY>
	Show_String("CREDITS");
 8006afa:	4841      	ldr	r0, [pc, #260]	; (8006c00 <screen0x12+0x2ac>)
 8006afc:	f7fb fbfb 	bl	80022f6 <Show_String>
	Font_Width_X4();
 8006b00:	f7fb fb05 	bl	800210e <Font_Width_X4>
	Font_Height_X4();
 8006b04:	f7fb fb6b 	bl	80021de <Font_Height_X4>

    if(currentTask == 0) HAL_Delay(holdTime);
 8006b08:	4b39      	ldr	r3, [pc, #228]	; (8006bf0 <screen0x12+0x29c>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d102      	bne.n	8006b16 <screen0x12+0x1c2>
 8006b10:	6838      	ldr	r0, [r7, #0]
 8006b12:	f001 fc4f 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0) HAL_Delay(holdTime);
 8006b16:	4b36      	ldr	r3, [pc, #216]	; (8006bf0 <screen0x12+0x29c>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d102      	bne.n	8006b24 <screen0x12+0x1d0>
 8006b1e:	6838      	ldr	r0, [r7, #0]
 8006b20:	f001 fc48 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0) HAL_Delay(holdTime);
 8006b24:	4b32      	ldr	r3, [pc, #200]	; (8006bf0 <screen0x12+0x29c>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d102      	bne.n	8006b32 <screen0x12+0x1de>
 8006b2c:	6838      	ldr	r0, [r7, #0]
 8006b2e:	f001 fc41 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0) HAL_Delay(holdTime);
 8006b32:	4b2f      	ldr	r3, [pc, #188]	; (8006bf0 <screen0x12+0x29c>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d102      	bne.n	8006b40 <screen0x12+0x1ec>
 8006b3a:	6838      	ldr	r0, [r7, #0]
 8006b3c:	f001 fc3a 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0) HAL_Delay(holdTime);
 8006b40:	4b2b      	ldr	r3, [pc, #172]	; (8006bf0 <screen0x12+0x29c>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d102      	bne.n	8006b4e <screen0x12+0x1fa>
 8006b48:	6838      	ldr	r0, [r7, #0]
 8006b4a:	f001 fc33 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0) HAL_Delay(holdTime);
 8006b4e:	4b28      	ldr	r3, [pc, #160]	; (8006bf0 <screen0x12+0x29c>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d102      	bne.n	8006b5c <screen0x12+0x208>
 8006b56:	6838      	ldr	r0, [r7, #0]
 8006b58:	f001 fc2c 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0) HAL_Delay(holdTime);
 8006b5c:	4b24      	ldr	r3, [pc, #144]	; (8006bf0 <screen0x12+0x29c>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d102      	bne.n	8006b6a <screen0x12+0x216>
 8006b64:	6838      	ldr	r0, [r7, #0]
 8006b66:	f001 fc25 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0) HAL_Delay(holdTime);
 8006b6a:	4b21      	ldr	r3, [pc, #132]	; (8006bf0 <screen0x12+0x29c>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d102      	bne.n	8006b78 <screen0x12+0x224>
 8006b72:	6838      	ldr	r0, [r7, #0]
 8006b74:	f001 fc1e 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0) HAL_Delay(holdTime);
 8006b78:	4b1d      	ldr	r3, [pc, #116]	; (8006bf0 <screen0x12+0x29c>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d102      	bne.n	8006b86 <screen0x12+0x232>
 8006b80:	6838      	ldr	r0, [r7, #0]
 8006b82:	f001 fc17 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0) HAL_Delay(holdTime);
 8006b86:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <screen0x12+0x29c>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d102      	bne.n	8006b94 <screen0x12+0x240>
 8006b8e:	6838      	ldr	r0, [r7, #0]
 8006b90:	f001 fc10 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0) HAL_Delay(holdTime);
 8006b94:	4b16      	ldr	r3, [pc, #88]	; (8006bf0 <screen0x12+0x29c>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d102      	bne.n	8006ba2 <screen0x12+0x24e>
 8006b9c:	6838      	ldr	r0, [r7, #0]
 8006b9e:	f001 fc09 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0) HAL_Delay(holdTime);
 8006ba2:	4b13      	ldr	r3, [pc, #76]	; (8006bf0 <screen0x12+0x29c>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d102      	bne.n	8006bb0 <screen0x12+0x25c>
 8006baa:	6838      	ldr	r0, [r7, #0]
 8006bac:	f001 fc02 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0) HAL_Delay(holdTime);
 8006bb0:	4b0f      	ldr	r3, [pc, #60]	; (8006bf0 <screen0x12+0x29c>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d102      	bne.n	8006bbe <screen0x12+0x26a>
 8006bb8:	6838      	ldr	r0, [r7, #0]
 8006bba:	f001 fbfb 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0) HAL_Delay(holdTime);
 8006bbe:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <screen0x12+0x29c>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <screen0x12+0x278>
 8006bc6:	6838      	ldr	r0, [r7, #0]
 8006bc8:	f001 fbf4 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0) HAL_Delay(holdTime);
 8006bcc:	4b08      	ldr	r3, [pc, #32]	; (8006bf0 <screen0x12+0x29c>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f040 80a1 	bne.w	8006d18 <screen0x12+0x3c4>
 8006bd6:	6838      	ldr	r0, [r7, #0]
 8006bd8:	f001 fbec 	bl	80083b4 <HAL_Delay>


	while(currentTask == 0)
 8006bdc:	e09c      	b.n	8006d18 <screen0x12+0x3c4>
	{
		if(fullcolor) rndColor = RandomColor_256();
 8006bde:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <screen0x12+0x2a4>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00e      	beq.n	8006c04 <screen0x12+0x2b0>
 8006be6:	f000 fcdb 	bl	80075a0 <RandomColor_256>
 8006bea:	4603      	mov	r3, r0
 8006bec:	82fb      	strh	r3, [r7, #22]
 8006bee:	e00b      	b.n	8006c08 <screen0x12+0x2b4>
 8006bf0:	200007fa 	.word	0x200007fa
 8006bf4:	200007f0 	.word	0x200007f0
 8006bf8:	20000000 	.word	0x20000000
 8006bfc:	0800c424 	.word	0x0800c424
 8006c00:	0800c434 	.word	0x0800c434
		else rndColor = MONOCHROME_COLOR;
 8006c04:	231f      	movs	r3, #31
 8006c06:	82fb      	strh	r3, [r7, #22]
		Font_Width_X4();
 8006c08:	f7fb fa81 	bl	800210e <Font_Width_X4>
		Font_Height_X4();
 8006c0c:	f7fb fae7 	bl	80021de <Font_Height_X4>
		Foreground_color_256(rndColor);
 8006c10:	8afb      	ldrh	r3, [r7, #22]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fb fb2a 	bl	800226e <Foreground_color_256>
		Goto_Text_XY(65,190);
 8006c1a:	21be      	movs	r1, #190	; 0xbe
 8006c1c:	2041      	movs	r0, #65	; 0x41
 8006c1e:	f7fa fda5 	bl	800176c <Goto_Text_XY>
		Show_String("TOTAL BONUS WIN");
 8006c22:	4851      	ldr	r0, [pc, #324]	; (8006d68 <screen0x12+0x414>)
 8006c24:	f7fb fb67 	bl	80022f6 <Show_String>
		Goto_Text_XY(creditsy,creditsx);          // was 245,806
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	b292      	uxth	r2, r2
 8006c30:	4611      	mov	r1, r2
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fa fd9a 	bl	800176c <Goto_Text_XY>
		Font_Width_X3();
 8006c38:	f7fb fa4f 	bl	80020da <Font_Width_X3>
		Font_Height_X4();
 8006c3c:	f7fb facf 	bl	80021de <Font_Height_X4>
		Show_String("CREDITS");
 8006c40:	484a      	ldr	r0, [pc, #296]	; (8006d6c <screen0x12+0x418>)
 8006c42:	f7fb fb58 	bl	80022f6 <Show_String>
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006c46:	4b4a      	ldr	r3, [pc, #296]	; (8006d70 <screen0x12+0x41c>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d16a      	bne.n	8006d24 <screen0x12+0x3d0>
 8006c4e:	6838      	ldr	r0, [r7, #0]
 8006c50:	f001 fbb0 	bl	80083b4 <HAL_Delay>
	    else break;
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006c54:	4b46      	ldr	r3, [pc, #280]	; (8006d70 <screen0x12+0x41c>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d165      	bne.n	8006d28 <screen0x12+0x3d4>
 8006c5c:	6838      	ldr	r0, [r7, #0]
 8006c5e:	f001 fba9 	bl	80083b4 <HAL_Delay>
	    else break;
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006c62:	4b43      	ldr	r3, [pc, #268]	; (8006d70 <screen0x12+0x41c>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d160      	bne.n	8006d2c <screen0x12+0x3d8>
 8006c6a:	6838      	ldr	r0, [r7, #0]
 8006c6c:	f001 fba2 	bl	80083b4 <HAL_Delay>
	    else break;
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006c70:	4b3f      	ldr	r3, [pc, #252]	; (8006d70 <screen0x12+0x41c>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d15b      	bne.n	8006d30 <screen0x12+0x3dc>
 8006c78:	6838      	ldr	r0, [r7, #0]
 8006c7a:	f001 fb9b 	bl	80083b4 <HAL_Delay>
	    else break;
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006c7e:	4b3c      	ldr	r3, [pc, #240]	; (8006d70 <screen0x12+0x41c>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d156      	bne.n	8006d34 <screen0x12+0x3e0>
 8006c86:	6838      	ldr	r0, [r7, #0]
 8006c88:	f001 fb94 	bl	80083b4 <HAL_Delay>
	    else break;
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006c8c:	4b38      	ldr	r3, [pc, #224]	; (8006d70 <screen0x12+0x41c>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d151      	bne.n	8006d38 <screen0x12+0x3e4>
 8006c94:	6838      	ldr	r0, [r7, #0]
 8006c96:	f001 fb8d 	bl	80083b4 <HAL_Delay>
	    else break;
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006c9a:	4b35      	ldr	r3, [pc, #212]	; (8006d70 <screen0x12+0x41c>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d14c      	bne.n	8006d3c <screen0x12+0x3e8>
 8006ca2:	6838      	ldr	r0, [r7, #0]
 8006ca4:	f001 fb86 	bl	80083b4 <HAL_Delay>
	    else break;
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006ca8:	4b31      	ldr	r3, [pc, #196]	; (8006d70 <screen0x12+0x41c>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d147      	bne.n	8006d40 <screen0x12+0x3ec>
 8006cb0:	6838      	ldr	r0, [r7, #0]
 8006cb2:	f001 fb7f 	bl	80083b4 <HAL_Delay>
	    else break;
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006cb6:	4b2e      	ldr	r3, [pc, #184]	; (8006d70 <screen0x12+0x41c>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d142      	bne.n	8006d44 <screen0x12+0x3f0>
 8006cbe:	6838      	ldr	r0, [r7, #0]
 8006cc0:	f001 fb78 	bl	80083b4 <HAL_Delay>
	    else break;
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006cc4:	4b2a      	ldr	r3, [pc, #168]	; (8006d70 <screen0x12+0x41c>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d13d      	bne.n	8006d48 <screen0x12+0x3f4>
 8006ccc:	6838      	ldr	r0, [r7, #0]
 8006cce:	f001 fb71 	bl	80083b4 <HAL_Delay>
	    else break;
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006cd2:	4b27      	ldr	r3, [pc, #156]	; (8006d70 <screen0x12+0x41c>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d138      	bne.n	8006d4c <screen0x12+0x3f8>
 8006cda:	6838      	ldr	r0, [r7, #0]
 8006cdc:	f001 fb6a 	bl	80083b4 <HAL_Delay>
	    else break;
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006ce0:	4b23      	ldr	r3, [pc, #140]	; (8006d70 <screen0x12+0x41c>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d133      	bne.n	8006d50 <screen0x12+0x3fc>
 8006ce8:	6838      	ldr	r0, [r7, #0]
 8006cea:	f001 fb63 	bl	80083b4 <HAL_Delay>
	    else break;
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006cee:	4b20      	ldr	r3, [pc, #128]	; (8006d70 <screen0x12+0x41c>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d12e      	bne.n	8006d54 <screen0x12+0x400>
 8006cf6:	6838      	ldr	r0, [r7, #0]
 8006cf8:	f001 fb5c 	bl	80083b4 <HAL_Delay>
	    else break;
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006cfc:	4b1c      	ldr	r3, [pc, #112]	; (8006d70 <screen0x12+0x41c>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d129      	bne.n	8006d58 <screen0x12+0x404>
 8006d04:	6838      	ldr	r0, [r7, #0]
 8006d06:	f001 fb55 	bl	80083b4 <HAL_Delay>
	    else break;
	    if(currentTask == 0) HAL_Delay(holdTime);
 8006d0a:	4b19      	ldr	r3, [pc, #100]	; (8006d70 <screen0x12+0x41c>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d124      	bne.n	8006d5c <screen0x12+0x408>
 8006d12:	6838      	ldr	r0, [r7, #0]
 8006d14:	f001 fb4e 	bl	80083b4 <HAL_Delay>
	while(currentTask == 0)
 8006d18:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <screen0x12+0x41c>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f43f af5e 	beq.w	8006bde <screen0x12+0x28a>
	    else break;
	};
}
 8006d22:	e01c      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d24:	bf00      	nop
 8006d26:	e01a      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d28:	bf00      	nop
 8006d2a:	e018      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d2c:	bf00      	nop
 8006d2e:	e016      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d30:	bf00      	nop
 8006d32:	e014      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d34:	bf00      	nop
 8006d36:	e012      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d38:	bf00      	nop
 8006d3a:	e010      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d3c:	bf00      	nop
 8006d3e:	e00e      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d40:	bf00      	nop
 8006d42:	e00c      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d44:	bf00      	nop
 8006d46:	e00a      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d48:	bf00      	nop
 8006d4a:	e008      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d4c:	bf00      	nop
 8006d4e:	e006      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d50:	bf00      	nop
 8006d52:	e004      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d54:	bf00      	nop
 8006d56:	e002      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d58:	bf00      	nop
 8006d5a:	e000      	b.n	8006d5e <screen0x12+0x40a>
	    else break;
 8006d5c:	bf00      	nop
}
 8006d5e:	bf00      	nop
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	0800c424 	.word	0x0800c424
 8006d6c:	0800c434 	.word	0x0800c434
 8006d70:	200007fa 	.word	0x200007fa

08006d74 <screen0x13>:


// CURRENT OFFER, OFFERS LEFT
void screen0x13(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
    unsigned int framePause        = 50;
 8006d7a:	2332      	movs	r3, #50	; 0x32
 8006d7c:	61bb      	str	r3, [r7, #24]
    unsigned int frameReplay       = 2;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	61fb      	str	r3, [r7, #28]
    unsigned int frameReplayLoop   = 2;
 8006d82:	2302      	movs	r3, #2
 8006d84:	617b      	str	r3, [r7, #20]
    int          bigcurrentx_pos   = 124;    // was 50
 8006d86:	237c      	movs	r3, #124	; 0x7c
 8006d88:	613b      	str	r3, [r7, #16]
    int          smallcurrentx_pos = 224;   // was 180
 8006d8a:	23e0      	movs	r3, #224	; 0xe0
 8006d8c:	60fb      	str	r3, [r7, #12]
    int          bigofferx_pos     = 744;   // was 746
 8006d8e:	f44f 733a 	mov.w	r3, #744	; 0x2e8
 8006d92:	60bb      	str	r3, [r7, #8]
    int          smallofferx_pos   = 864;   // was 866
 8006d94:	f44f 7358 	mov.w	r3, #864	; 0x360
 8006d98:	607b      	str	r3, [r7, #4]
//    mainBuffer[8] =  '8';
//    mainBuffer[9] =  '8';
//    mainBuffer[10] = '3';
    //offersLeft      = tempBuff[0] * 1000 + tempBuff[1] * 100 + tempBuff[2] * 10 + tempBuff[3];

	CGROM_Select_Genitop_FontROM();
 8006d9a:	f7fb f8ae 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8006d9e:	f7fb fa38 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	//Font_Select_12x24_24x24();
	Font_Select_16x32_32x32();
 8006da2:	f7fb f8de 	bl	8001f62 <Font_Select_16x32_32x32>
	Set_GTFont_Decoder(0x21);               //  <--- Activate the chip...
 8006da6:	2021      	movs	r0, #33	; 0x21
 8006da8:	f7fb fa51 	bl	800224e <Set_GTFont_Decoder>
	Font_Background_select_Color();
 8006dac:	f7fb f935 	bl	800201a <Font_Background_select_Color>
	//Font_Background_select_Transparency();

	Background_color_256(color256_black);
 8006db0:	2000      	movs	r0, #0
 8006db2:	f7fb fa7e 	bl	80022b2 <Background_color_256>
	Foreground_color_256(color256_black);
 8006db6:	2000      	movs	r0, #0
 8006db8:	f7fb fa59 	bl	800226e <Foreground_color_256>


    currentTask = 0;
 8006dbc:	4baa      	ldr	r3, [pc, #680]	; (8007068 <screen0x13+0x2f4>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	701a      	strb	r2, [r3, #0]

    // Clear Screen
    Foreground_color_256(color256_black);
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	f7fb fa53 	bl	800226e <Foreground_color_256>
    Line_Start_XY(0,0);
 8006dc8:	2100      	movs	r1, #0
 8006dca:	2000      	movs	r0, #0
 8006dcc:	f7fa fd02 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 8006dd0:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8006dd4:	f240 108f 	movw	r0, #399	; 0x18f
 8006dd8:	f7fa fd2c 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 8006ddc:	f7fa fdea 	bl	80019b4 <Start_Square_Fill>

    // Draw divider line
    if(fullcolor) Foreground_color_256(color256_blue);
 8006de0:	4ba2      	ldr	r3, [pc, #648]	; (800706c <screen0x13+0x2f8>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <screen0x13+0x7c>
 8006de8:	2003      	movs	r0, #3
 8006dea:	f7fb fa40 	bl	800226e <Foreground_color_256>
 8006dee:	e002      	b.n	8006df6 <screen0x13+0x82>
	else Foreground_color_256(MONOCHROME_COLOR);
 8006df0:	201f      	movs	r0, #31
 8006df2:	f7fb fa3c 	bl	800226e <Foreground_color_256>

    Line_Start_XY(30,695);  // Y,X     30,635
 8006df6:	f240 21b7 	movw	r1, #695	; 0x2b7
 8006dfa:	201e      	movs	r0, #30
 8006dfc:	f7fa fcea 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(370,705);  // Y,X      370,645
 8006e00:	f240 21c1 	movw	r1, #705	; 0x2c1
 8006e04:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8006e08:	f7fa fd14 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 8006e0c:	f7fa fdd2 	bl	80019b4 <Start_Square_Fill>

    // FAT FONT
    // Draw offer amount
    // Note:  No 4 digits because of the comma added as a separator
	if(offerText[1] == '\0' && offerText[2] == '\0' && offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(146,405);  // 1 digit
 8006e10:	4b97      	ldr	r3, [pc, #604]	; (8007070 <screen0x13+0x2fc>)
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d111      	bne.n	8006e3c <screen0x13+0xc8>
 8006e18:	4b95      	ldr	r3, [pc, #596]	; (8007070 <screen0x13+0x2fc>)
 8006e1a:	789b      	ldrb	r3, [r3, #2]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10d      	bne.n	8006e3c <screen0x13+0xc8>
 8006e20:	4b93      	ldr	r3, [pc, #588]	; (8007070 <screen0x13+0x2fc>)
 8006e22:	78db      	ldrb	r3, [r3, #3]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d109      	bne.n	8006e3c <screen0x13+0xc8>
 8006e28:	4b91      	ldr	r3, [pc, #580]	; (8007070 <screen0x13+0x2fc>)
 8006e2a:	791b      	ldrb	r3, [r3, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d105      	bne.n	8006e3c <screen0x13+0xc8>
 8006e30:	f240 1195 	movw	r1, #405	; 0x195
 8006e34:	2092      	movs	r0, #146	; 0x92
 8006e36:	f7fa fc99 	bl	800176c <Goto_Text_XY>
 8006e3a:	e01e      	b.n	8006e7a <screen0x13+0x106>
	else if(offerText[2] == '\0' && offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(146,332);                     // 2 digits
 8006e3c:	4b8c      	ldr	r3, [pc, #560]	; (8007070 <screen0x13+0x2fc>)
 8006e3e:	789b      	ldrb	r3, [r3, #2]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10d      	bne.n	8006e60 <screen0x13+0xec>
 8006e44:	4b8a      	ldr	r3, [pc, #552]	; (8007070 <screen0x13+0x2fc>)
 8006e46:	78db      	ldrb	r3, [r3, #3]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d109      	bne.n	8006e60 <screen0x13+0xec>
 8006e4c:	4b88      	ldr	r3, [pc, #544]	; (8007070 <screen0x13+0x2fc>)
 8006e4e:	791b      	ldrb	r3, [r3, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d105      	bne.n	8006e60 <screen0x13+0xec>
 8006e54:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006e58:	2092      	movs	r0, #146	; 0x92
 8006e5a:	f7fa fc87 	bl	800176c <Goto_Text_XY>
 8006e5e:	e00c      	b.n	8006e7a <screen0x13+0x106>
	else if(offerText[3] == '\0' && offerText[4] == '\0') Goto_Text_XY(146,260);                                             // 3 digits
 8006e60:	4b83      	ldr	r3, [pc, #524]	; (8007070 <screen0x13+0x2fc>)
 8006e62:	78db      	ldrb	r3, [r3, #3]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d108      	bne.n	8006e7a <screen0x13+0x106>
 8006e68:	4b81      	ldr	r3, [pc, #516]	; (8007070 <screen0x13+0x2fc>)
 8006e6a:	791b      	ldrb	r3, [r3, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d104      	bne.n	8006e7a <screen0x13+0x106>
 8006e70:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006e74:	2092      	movs	r0, #146	; 0x92
 8006e76:	f7fa fc79 	bl	800176c <Goto_Text_XY>
	if(offerText[1] == ',') Goto_Text_XY(146,152);                           // 5 digits   332
 8006e7a:	4b7d      	ldr	r3, [pc, #500]	; (8007070 <screen0x13+0x2fc>)
 8006e7c:	785b      	ldrb	r3, [r3, #1]
 8006e7e:	2b2c      	cmp	r3, #44	; 0x2c
 8006e80:	d103      	bne.n	8006e8a <screen0x13+0x116>
 8006e82:	2198      	movs	r1, #152	; 0x98
 8006e84:	2092      	movs	r0, #146	; 0x92
 8006e86:	f7fa fc71 	bl	800176c <Goto_Text_XY>

	if(fullcolor) Foreground_color_256(color256_green);
 8006e8a:	4b78      	ldr	r3, [pc, #480]	; (800706c <screen0x13+0x2f8>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <screen0x13+0x126>
 8006e92:	201c      	movs	r0, #28
 8006e94:	f7fb f9eb 	bl	800226e <Foreground_color_256>
 8006e98:	e002      	b.n	8006ea0 <screen0x13+0x12c>
	else Foreground_color_256(MONOCHROME_COLOR);
 8006e9a:	201f      	movs	r0, #31
 8006e9c:	f7fb f9e7 	bl	800226e <Foreground_color_256>

	Font_Width_X4();
 8006ea0:	f7fb f935 	bl	800210e <Font_Width_X4>
	Font_Height_X4();
 8006ea4:	f7fb f99b 	bl	80021de <Font_Height_X4>
	Show_String((char *)offerText);
 8006ea8:	4871      	ldr	r0, [pc, #452]	; (8007070 <screen0x13+0x2fc>)
 8006eaa:	f7fb fa24 	bl	80022f6 <Show_String>

    // Draw CREDITS
    if(fullcolor) Foreground_color_256(color256_white);
 8006eae:	4b6f      	ldr	r3, [pc, #444]	; (800706c <screen0x13+0x2f8>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <screen0x13+0x14a>
 8006eb6:	20ff      	movs	r0, #255	; 0xff
 8006eb8:	f7fb f9d9 	bl	800226e <Foreground_color_256>
 8006ebc:	e002      	b.n	8006ec4 <screen0x13+0x150>
	else Foreground_color_256(MONOCHROME_COLOR);
 8006ebe:	201f      	movs	r0, #31
 8006ec0:	f7fb f9d5 	bl	800226e <Foreground_color_256>

    Goto_Text_XY(174,490);   // Y,X
 8006ec4:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8006ec8:	20ae      	movs	r0, #174	; 0xae
 8006eca:	f7fa fc4f 	bl	800176c <Goto_Text_XY>
    Font_Width_X1();
 8006ece:	f7fb f8d0 	bl	8002072 <Font_Width_X1>
    Font_Height_X3();
 8006ed2:	f7fb f96a 	bl	80021aa <Font_Height_X3>
    Show_String("CREDITS");
 8006ed6:	4867      	ldr	r0, [pc, #412]	; (8007074 <screen0x13+0x300>)
 8006ed8:	f7fb fa0d 	bl	80022f6 <Show_String>

    // Draw the # of offers left
    if(fullcolor) Foreground_color_256(color256_yellow);
 8006edc:	4b63      	ldr	r3, [pc, #396]	; (800706c <screen0x13+0x2f8>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <screen0x13+0x178>
 8006ee4:	20fc      	movs	r0, #252	; 0xfc
 8006ee6:	f7fb f9c2 	bl	800226e <Foreground_color_256>
 8006eea:	e002      	b.n	8006ef2 <screen0x13+0x17e>
	else Foreground_color_256(MONOCHROME_COLOR);
 8006eec:	201f      	movs	r0, #31
 8006eee:	f7fb f9be 	bl	800226e <Foreground_color_256>

    Goto_Text_XY(146,920);   // Y,X
 8006ef2:	f44f 7166 	mov.w	r1, #920	; 0x398
 8006ef6:	2092      	movs	r0, #146	; 0x92
 8006ef8:	f7fa fc38 	bl	800176c <Goto_Text_XY>
    Font_Width_X4();
 8006efc:	f7fb f907 	bl	800210e <Font_Width_X4>
    Font_Height_X4();
 8006f00:	f7fb f96d 	bl	80021de <Font_Height_X4>
    Show_String((char *)offerLeftText);
 8006f04:	485c      	ldr	r0, [pc, #368]	; (8007078 <screen0x13+0x304>)
 8006f06:	f7fb f9f6 	bl	80022f6 <Show_String>

    // Draw CURRENT OFFER in BIG
    if(fullcolor) Foreground_color_256(color256_white);
 8006f0a:	4b58      	ldr	r3, [pc, #352]	; (800706c <screen0x13+0x2f8>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <screen0x13+0x1a6>
 8006f12:	20ff      	movs	r0, #255	; 0xff
 8006f14:	f7fb f9ab 	bl	800226e <Foreground_color_256>
 8006f18:	e002      	b.n	8006f20 <screen0x13+0x1ac>
	else Foreground_color_256(MONOCHROME_COLOR);
 8006f1a:	201f      	movs	r0, #31
 8006f1c:	f7fb f9a7 	bl	800226e <Foreground_color_256>

    Goto_Text_XY(44,bigcurrentx_pos);   // Y,X
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	4619      	mov	r1, r3
 8006f26:	202c      	movs	r0, #44	; 0x2c
 8006f28:	f7fa fc20 	bl	800176c <Goto_Text_XY>
    Font_Width_X2();
 8006f2c:	f7fb f8bb 	bl	80020a6 <Font_Width_X2>
    Font_Height_X3();
 8006f30:	f7fb f93b 	bl	80021aa <Font_Height_X3>
    Show_String("CURRENT OFFER");
 8006f34:	4851      	ldr	r0, [pc, #324]	; (800707c <screen0x13+0x308>)
 8006f36:	f7fb f9de 	bl	80022f6 <Show_String>
    //HAL_Delay(framePause);

    if(fullcolor) Foreground_color_256(color256_white);
 8006f3a:	4b4c      	ldr	r3, [pc, #304]	; (800706c <screen0x13+0x2f8>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <screen0x13+0x1d6>
 8006f42:	20ff      	movs	r0, #255	; 0xff
 8006f44:	f7fb f993 	bl	800226e <Foreground_color_256>
 8006f48:	e002      	b.n	8006f50 <screen0x13+0x1dc>
	else Foreground_color_256(MONOCHROME_COLOR);
 8006f4a:	201f      	movs	r0, #31
 8006f4c:	f7fb f98f 	bl	800226e <Foreground_color_256>

    Goto_Text_XY(44,bigofferx_pos);   // Y,X
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	4619      	mov	r1, r3
 8006f56:	202c      	movs	r0, #44	; 0x2c
 8006f58:	f7fa fc08 	bl	800176c <Goto_Text_XY>
    Font_Width_X2();
 8006f5c:	f7fb f8a3 	bl	80020a6 <Font_Width_X2>
    Font_Height_X3();
 8006f60:	f7fb f923 	bl	80021aa <Font_Height_X3>
    Show_String("OFFERS LEFT");
 8006f64:	4846      	ldr	r0, [pc, #280]	; (8007080 <screen0x13+0x30c>)
 8006f66:	f7fb f9c6 	bl	80022f6 <Show_String>

    //HAL_Delay(framePause);
    if(currentTask == 0)  HAL_Delay(framePause);
 8006f6a:	4b3f      	ldr	r3, [pc, #252]	; (8007068 <screen0x13+0x2f4>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <screen0x13+0x204>
 8006f72:	69b8      	ldr	r0, [r7, #24]
 8006f74:	f001 fa1e 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0)  HAL_Delay(framePause);
 8006f78:	4b3b      	ldr	r3, [pc, #236]	; (8007068 <screen0x13+0x2f4>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d102      	bne.n	8006f86 <screen0x13+0x212>
 8006f80:	69b8      	ldr	r0, [r7, #24]
 8006f82:	f001 fa17 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0)  HAL_Delay(framePause);
 8006f86:	4b38      	ldr	r3, [pc, #224]	; (8007068 <screen0x13+0x2f4>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d102      	bne.n	8006f94 <screen0x13+0x220>
 8006f8e:	69b8      	ldr	r0, [r7, #24]
 8006f90:	f001 fa10 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0)  HAL_Delay(framePause);
 8006f94:	4b34      	ldr	r3, [pc, #208]	; (8007068 <screen0x13+0x2f4>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <screen0x13+0x22e>
 8006f9c:	69b8      	ldr	r0, [r7, #24]
 8006f9e:	f001 fa09 	bl	80083b4 <HAL_Delay>
    if(currentTask == 0)  HAL_Delay(framePause);
 8006fa2:	4b31      	ldr	r3, [pc, #196]	; (8007068 <screen0x13+0x2f4>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d102      	bne.n	8006fb0 <screen0x13+0x23c>
 8006faa:	69b8      	ldr	r0, [r7, #24]
 8006fac:	f001 fa02 	bl	80083b4 <HAL_Delay>
    Font_Width_X1();
    Font_Height_X3();
    Show_String("OFFERS LEFT");
    HAL_Delay(framePause);
*/
    currentTask = 0;
 8006fb0:	4b2d      	ldr	r3, [pc, #180]	; (8007068 <screen0x13+0x2f4>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	701a      	strb	r2, [r3, #0]
    while(currentTask == 0)
 8006fb6:	e170      	b.n	800729a <screen0x13+0x526>
    {
	    frameReplay = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	61fb      	str	r3, [r7, #28]
	    while (frameReplay < frameReplayLoop)
 8006fbc:	e09c      	b.n	80070f8 <screen0x13+0x384>
	    {
		    // Frame 1
		    // Draw CURRENT OFFER in SMALL
		    // Clear small area where big font was
		    Foreground_color_256(color256_black);
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	f7fb f955 	bl	800226e <Foreground_color_256>

		    Line_Start_XY(46,90);
 8006fc4:	215a      	movs	r1, #90	; 0x5a
 8006fc6:	202e      	movs	r0, #46	; 0x2e
 8006fc8:	f7fa fc04 	bl	80017d4 <Line_Start_XY>
		    Line_End_XY(146,660);  //  Y,X   140,633
 8006fcc:	f44f 7125 	mov.w	r1, #660	; 0x294
 8006fd0:	2092      	movs	r0, #146	; 0x92
 8006fd2:	f7fa fc2f 	bl	8001834 <Line_End_XY>
		    Start_Square_Fill();
 8006fd6:	f7fa fced 	bl	80019b4 <Start_Square_Fill>
		    if(fullcolor) Foreground_color_256(color256_white);
 8006fda:	4b24      	ldr	r3, [pc, #144]	; (800706c <screen0x13+0x2f8>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <screen0x13+0x276>
 8006fe2:	20ff      	movs	r0, #255	; 0xff
 8006fe4:	f7fb f943 	bl	800226e <Foreground_color_256>
 8006fe8:	e002      	b.n	8006ff0 <screen0x13+0x27c>
			else Foreground_color_256(MONOCHROME_COLOR);
 8006fea:	201f      	movs	r0, #31
 8006fec:	f7fb f93f 	bl	800226e <Foreground_color_256>

		    Goto_Text_XY(44,smallcurrentx_pos);   // Y,X
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	202c      	movs	r0, #44	; 0x2c
 8006ff8:	f7fa fbb8 	bl	800176c <Goto_Text_XY>
		    Font_Width_X1();
 8006ffc:	f7fb f839 	bl	8002072 <Font_Width_X1>
		    Font_Height_X3();
 8007000:	f7fb f8d3 	bl	80021aa <Font_Height_X3>
		    Show_String("CURRENT OFFER");
 8007004:	481d      	ldr	r0, [pc, #116]	; (800707c <screen0x13+0x308>)
 8007006:	f7fb f976 	bl	80022f6 <Show_String>
		    if(currentTask) break;
 800700a:	4b17      	ldr	r3, [pc, #92]	; (8007068 <screen0x13+0x2f4>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d178      	bne.n	8007104 <screen0x13+0x390>
//		    HAL_Delay(framePause);
		    if(currentTask == 0)  HAL_Delay(framePause);
 8007012:	4b15      	ldr	r3, [pc, #84]	; (8007068 <screen0x13+0x2f4>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d102      	bne.n	8007020 <screen0x13+0x2ac>
 800701a:	69b8      	ldr	r0, [r7, #24]
 800701c:	f001 f9ca 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 8007020:	4b11      	ldr	r3, [pc, #68]	; (8007068 <screen0x13+0x2f4>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d102      	bne.n	800702e <screen0x13+0x2ba>
 8007028:	69b8      	ldr	r0, [r7, #24]
 800702a:	f001 f9c3 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 800702e:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <screen0x13+0x2f4>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <screen0x13+0x2c8>
 8007036:	69b8      	ldr	r0, [r7, #24]
 8007038:	f001 f9bc 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 800703c:	4b0a      	ldr	r3, [pc, #40]	; (8007068 <screen0x13+0x2f4>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d102      	bne.n	800704a <screen0x13+0x2d6>
 8007044:	69b8      	ldr	r0, [r7, #24]
 8007046:	f001 f9b5 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 800704a:	4b07      	ldr	r3, [pc, #28]	; (8007068 <screen0x13+0x2f4>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d102      	bne.n	8007058 <screen0x13+0x2e4>
 8007052:	69b8      	ldr	r0, [r7, #24]
 8007054:	f001 f9ae 	bl	80083b4 <HAL_Delay>

		    // Frame 2
		    // Draw CURRENT OFFER in BIG
		    if(fullcolor) Foreground_color_256(color256_white);
 8007058:	4b04      	ldr	r3, [pc, #16]	; (800706c <screen0x13+0x2f8>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d011      	beq.n	8007084 <screen0x13+0x310>
 8007060:	20ff      	movs	r0, #255	; 0xff
 8007062:	f7fb f904 	bl	800226e <Foreground_color_256>
 8007066:	e010      	b.n	800708a <screen0x13+0x316>
 8007068:	200007fa 	.word	0x200007fa
 800706c:	20000000 	.word	0x20000000
 8007070:	200007f0 	.word	0x200007f0
 8007074:	0800c434 	.word	0x0800c434
 8007078:	200007f8 	.word	0x200007f8
 800707c:	0800c43c 	.word	0x0800c43c
 8007080:	0800c44c 	.word	0x0800c44c
			else Foreground_color_256(MONOCHROME_COLOR);
 8007084:	201f      	movs	r0, #31
 8007086:	f7fb f8f2 	bl	800226e <Foreground_color_256>

		    Goto_Text_XY(44,bigcurrentx_pos);   // Y,X
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	b29b      	uxth	r3, r3
 800708e:	4619      	mov	r1, r3
 8007090:	202c      	movs	r0, #44	; 0x2c
 8007092:	f7fa fb6b 	bl	800176c <Goto_Text_XY>
		    Font_Width_X2();
 8007096:	f7fb f806 	bl	80020a6 <Font_Width_X2>
		    Font_Height_X3();
 800709a:	f7fb f886 	bl	80021aa <Font_Height_X3>
		    Show_String("CURRENT OFFER");
 800709e:	4885      	ldr	r0, [pc, #532]	; (80072b4 <screen0x13+0x540>)
 80070a0:	f7fb f929 	bl	80022f6 <Show_String>
		    if(currentTask) break;
 80070a4:	4b84      	ldr	r3, [pc, #528]	; (80072b8 <screen0x13+0x544>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d12d      	bne.n	8007108 <screen0x13+0x394>
//		    HAL_Delay(framePause);
		    if(currentTask == 0)  HAL_Delay(framePause);
 80070ac:	4b82      	ldr	r3, [pc, #520]	; (80072b8 <screen0x13+0x544>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d102      	bne.n	80070ba <screen0x13+0x346>
 80070b4:	69b8      	ldr	r0, [r7, #24]
 80070b6:	f001 f97d 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 80070ba:	4b7f      	ldr	r3, [pc, #508]	; (80072b8 <screen0x13+0x544>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d102      	bne.n	80070c8 <screen0x13+0x354>
 80070c2:	69b8      	ldr	r0, [r7, #24]
 80070c4:	f001 f976 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 80070c8:	4b7b      	ldr	r3, [pc, #492]	; (80072b8 <screen0x13+0x544>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <screen0x13+0x362>
 80070d0:	69b8      	ldr	r0, [r7, #24]
 80070d2:	f001 f96f 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 80070d6:	4b78      	ldr	r3, [pc, #480]	; (80072b8 <screen0x13+0x544>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d102      	bne.n	80070e4 <screen0x13+0x370>
 80070de:	69b8      	ldr	r0, [r7, #24]
 80070e0:	f001 f968 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 80070e4:	4b74      	ldr	r3, [pc, #464]	; (80072b8 <screen0x13+0x544>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d102      	bne.n	80070f2 <screen0x13+0x37e>
 80070ec:	69b8      	ldr	r0, [r7, #24]
 80070ee:	f001 f961 	bl	80083b4 <HAL_Delay>
		    frameReplay++;
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	3301      	adds	r3, #1
 80070f6:	61fb      	str	r3, [r7, #28]
	    while (frameReplay < frameReplayLoop)
 80070f8:	69fa      	ldr	r2, [r7, #28]
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	f4ff af5e 	bcc.w	8006fbe <screen0x13+0x24a>
 8007102:	e002      	b.n	800710a <screen0x13+0x396>
		    if(currentTask) break;
 8007104:	bf00      	nop
 8007106:	e000      	b.n	800710a <screen0x13+0x396>
		    if(currentTask) break;
 8007108:	bf00      	nop
	    }
	    if(currentTask) break;
 800710a:	4b6b      	ldr	r3, [pc, #428]	; (80072b8 <screen0x13+0x544>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	f040 80c9 	bne.w	80072a6 <screen0x13+0x532>
	    frameReplay = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	61fb      	str	r3, [r7, #28]
	    while (frameReplay < frameReplayLoop)
 8007118:	e08f      	b.n	800723a <screen0x13+0x4c6>
	    {
		    // OFFERS LEFT
		    // Frame 3
		    // Clear area where bigger font was
		    Foreground_color_256(color256_black);
 800711a:	2000      	movs	r0, #0
 800711c:	f7fb f8a7 	bl	800226e <Foreground_color_256>

		    Line_Start_XY(46,720);   //  0,646
 8007120:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8007124:	202e      	movs	r0, #46	; 0x2e
 8007126:	f7fa fb55 	bl	80017d4 <Line_Start_XY>
		    Line_End_XY(146,1279);  //  Y,X  100,1279
 800712a:	f240 41ff 	movw	r1, #1279	; 0x4ff
 800712e:	2092      	movs	r0, #146	; 0x92
 8007130:	f7fa fb80 	bl	8001834 <Line_End_XY>
		    Start_Square_Fill();
 8007134:	f7fa fc3e 	bl	80019b4 <Start_Square_Fill>
		    // Draw OFFERS LEFT SMALL
		    if(fullcolor) Foreground_color_256(color256_white);
 8007138:	4b60      	ldr	r3, [pc, #384]	; (80072bc <screen0x13+0x548>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <screen0x13+0x3d4>
 8007140:	20ff      	movs	r0, #255	; 0xff
 8007142:	f7fb f894 	bl	800226e <Foreground_color_256>
 8007146:	e002      	b.n	800714e <screen0x13+0x3da>
			else Foreground_color_256(MONOCHROME_COLOR);
 8007148:	201f      	movs	r0, #31
 800714a:	f7fb f890 	bl	800226e <Foreground_color_256>

		    Goto_Text_XY(44,smallofferx_pos);   // Y,X
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	b29b      	uxth	r3, r3
 8007152:	4619      	mov	r1, r3
 8007154:	202c      	movs	r0, #44	; 0x2c
 8007156:	f7fa fb09 	bl	800176c <Goto_Text_XY>
		    Font_Width_X1();
 800715a:	f7fa ff8a 	bl	8002072 <Font_Width_X1>
		    Font_Height_X3();
 800715e:	f7fb f824 	bl	80021aa <Font_Height_X3>
		    Show_String("OFFERS LEFT");
 8007162:	4857      	ldr	r0, [pc, #348]	; (80072c0 <screen0x13+0x54c>)
 8007164:	f7fb f8c7 	bl	80022f6 <Show_String>
		    if(currentTask) break;
 8007168:	4b53      	ldr	r3, [pc, #332]	; (80072b8 <screen0x13+0x544>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d16a      	bne.n	8007246 <screen0x13+0x4d2>
//		    HAL_Delay(framePause);
		    if(currentTask == 0)  HAL_Delay(framePause);
 8007170:	4b51      	ldr	r3, [pc, #324]	; (80072b8 <screen0x13+0x544>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d102      	bne.n	800717e <screen0x13+0x40a>
 8007178:	69b8      	ldr	r0, [r7, #24]
 800717a:	f001 f91b 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 800717e:	4b4e      	ldr	r3, [pc, #312]	; (80072b8 <screen0x13+0x544>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d102      	bne.n	800718c <screen0x13+0x418>
 8007186:	69b8      	ldr	r0, [r7, #24]
 8007188:	f001 f914 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 800718c:	4b4a      	ldr	r3, [pc, #296]	; (80072b8 <screen0x13+0x544>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d102      	bne.n	800719a <screen0x13+0x426>
 8007194:	69b8      	ldr	r0, [r7, #24]
 8007196:	f001 f90d 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 800719a:	4b47      	ldr	r3, [pc, #284]	; (80072b8 <screen0x13+0x544>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d102      	bne.n	80071a8 <screen0x13+0x434>
 80071a2:	69b8      	ldr	r0, [r7, #24]
 80071a4:	f001 f906 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 80071a8:	4b43      	ldr	r3, [pc, #268]	; (80072b8 <screen0x13+0x544>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d102      	bne.n	80071b6 <screen0x13+0x442>
 80071b0:	69b8      	ldr	r0, [r7, #24]
 80071b2:	f001 f8ff 	bl	80083b4 <HAL_Delay>
//		    Foreground_color_256(color256_black);
//		    Line_Start_XY(0,646);
//		    Line_End_XY(100,1279);  //  Y,X
//		    Start_Square_Fill();

		    if(fullcolor) Foreground_color_256(color256_white);
 80071b6:	4b41      	ldr	r3, [pc, #260]	; (80072bc <screen0x13+0x548>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <screen0x13+0x452>
 80071be:	20ff      	movs	r0, #255	; 0xff
 80071c0:	f7fb f855 	bl	800226e <Foreground_color_256>
 80071c4:	e002      	b.n	80071cc <screen0x13+0x458>
			else Foreground_color_256(MONOCHROME_COLOR);
 80071c6:	201f      	movs	r0, #31
 80071c8:	f7fb f851 	bl	800226e <Foreground_color_256>

		    Goto_Text_XY(44,bigofferx_pos);   // Y,X
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	4619      	mov	r1, r3
 80071d2:	202c      	movs	r0, #44	; 0x2c
 80071d4:	f7fa faca 	bl	800176c <Goto_Text_XY>
		    Font_Width_X2();
 80071d8:	f7fa ff65 	bl	80020a6 <Font_Width_X2>
		    Font_Height_X3();
 80071dc:	f7fa ffe5 	bl	80021aa <Font_Height_X3>
		    Show_String("OFFERS LEFT");
 80071e0:	4837      	ldr	r0, [pc, #220]	; (80072c0 <screen0x13+0x54c>)
 80071e2:	f7fb f888 	bl	80022f6 <Show_String>
		    if(currentTask) break;
 80071e6:	4b34      	ldr	r3, [pc, #208]	; (80072b8 <screen0x13+0x544>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d12d      	bne.n	800724a <screen0x13+0x4d6>
//		    HAL_Delay(framePause);
		    if(currentTask == 0)  HAL_Delay(framePause);
 80071ee:	4b32      	ldr	r3, [pc, #200]	; (80072b8 <screen0x13+0x544>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d102      	bne.n	80071fc <screen0x13+0x488>
 80071f6:	69b8      	ldr	r0, [r7, #24]
 80071f8:	f001 f8dc 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 80071fc:	4b2e      	ldr	r3, [pc, #184]	; (80072b8 <screen0x13+0x544>)
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d102      	bne.n	800720a <screen0x13+0x496>
 8007204:	69b8      	ldr	r0, [r7, #24]
 8007206:	f001 f8d5 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 800720a:	4b2b      	ldr	r3, [pc, #172]	; (80072b8 <screen0x13+0x544>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d102      	bne.n	8007218 <screen0x13+0x4a4>
 8007212:	69b8      	ldr	r0, [r7, #24]
 8007214:	f001 f8ce 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 8007218:	4b27      	ldr	r3, [pc, #156]	; (80072b8 <screen0x13+0x544>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <screen0x13+0x4b2>
 8007220:	69b8      	ldr	r0, [r7, #24]
 8007222:	f001 f8c7 	bl	80083b4 <HAL_Delay>
		    if(currentTask == 0)  HAL_Delay(framePause);
 8007226:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <screen0x13+0x544>)
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d102      	bne.n	8007234 <screen0x13+0x4c0>
 800722e:	69b8      	ldr	r0, [r7, #24]
 8007230:	f001 f8c0 	bl	80083b4 <HAL_Delay>

		    frameReplay++;
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	3301      	adds	r3, #1
 8007238:	61fb      	str	r3, [r7, #28]
	    while (frameReplay < frameReplayLoop)
 800723a:	69fa      	ldr	r2, [r7, #28]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	429a      	cmp	r2, r3
 8007240:	f4ff af6b 	bcc.w	800711a <screen0x13+0x3a6>
 8007244:	e002      	b.n	800724c <screen0x13+0x4d8>
		    if(currentTask) break;
 8007246:	bf00      	nop
 8007248:	e000      	b.n	800724c <screen0x13+0x4d8>
		    if(currentTask) break;
 800724a:	bf00      	nop
	    }
	    if(currentTask) break;
 800724c:	4b1a      	ldr	r3, [pc, #104]	; (80072b8 <screen0x13+0x544>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d12a      	bne.n	80072aa <screen0x13+0x536>
	    if(currentTask == 0) HAL_Delay(200);  // delay between replaying frames
 8007254:	4b18      	ldr	r3, [pc, #96]	; (80072b8 <screen0x13+0x544>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d102      	bne.n	8007262 <screen0x13+0x4ee>
 800725c:	20c8      	movs	r0, #200	; 0xc8
 800725e:	f001 f8a9 	bl	80083b4 <HAL_Delay>
	    if(currentTask == 0) HAL_Delay(200);
 8007262:	4b15      	ldr	r3, [pc, #84]	; (80072b8 <screen0x13+0x544>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <screen0x13+0x4fc>
 800726a:	20c8      	movs	r0, #200	; 0xc8
 800726c:	f001 f8a2 	bl	80083b4 <HAL_Delay>
	    if(currentTask == 0) HAL_Delay(200);
 8007270:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <screen0x13+0x544>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d102      	bne.n	800727e <screen0x13+0x50a>
 8007278:	20c8      	movs	r0, #200	; 0xc8
 800727a:	f001 f89b 	bl	80083b4 <HAL_Delay>
	    if(currentTask == 0) HAL_Delay(200);
 800727e:	4b0e      	ldr	r3, [pc, #56]	; (80072b8 <screen0x13+0x544>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d102      	bne.n	800728c <screen0x13+0x518>
 8007286:	20c8      	movs	r0, #200	; 0xc8
 8007288:	f001 f894 	bl	80083b4 <HAL_Delay>
	    if(currentTask == 0) HAL_Delay(200);
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <screen0x13+0x544>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d102      	bne.n	800729a <screen0x13+0x526>
 8007294:	20c8      	movs	r0, #200	; 0xc8
 8007296:	f001 f88d 	bl	80083b4 <HAL_Delay>
    while(currentTask == 0)
 800729a:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <screen0x13+0x544>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f43f ae8a 	beq.w	8006fb8 <screen0x13+0x244>
    }

}
 80072a4:	e002      	b.n	80072ac <screen0x13+0x538>
	    if(currentTask) break;
 80072a6:	bf00      	nop
 80072a8:	e000      	b.n	80072ac <screen0x13+0x538>
	    if(currentTask) break;
 80072aa:	bf00      	nop
}
 80072ac:	bf00      	nop
 80072ae:	3720      	adds	r7, #32
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	0800c43c 	.word	0x0800c43c
 80072b8:	200007fa 	.word	0x200007fa
 80072bc:	20000000 	.word	0x20000000
 80072c0:	0800c44c 	.word	0x0800c44c

080072c4 <screen0x99>:


#ifdef TIMEBOMB
void screen0x99(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
    // Clear Screen
    Foreground_color_256(color256_black);
 80072c8:	2000      	movs	r0, #0
 80072ca:	f7fa ffd0 	bl	800226e <Foreground_color_256>
    Line_Start_XY(0,0);
 80072ce:	2100      	movs	r1, #0
 80072d0:	2000      	movs	r0, #0
 80072d2:	f7fa fa7f 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(402,1279);  //  Y,X
 80072d6:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80072da:	f44f 70c9 	mov.w	r0, #402	; 0x192
 80072de:	f7fa faa9 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 80072e2:	f7fa fb67 	bl	80019b4 <Start_Square_Fill>

	CGROM_Select_Genitop_FontROM();
 80072e6:	f7fa fe08 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 80072ea:	f7fa ff92 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	//Font_Select_12x24_24x24();
	Font_Select_16x32_32x32();
 80072ee:	f7fa fe38 	bl	8001f62 <Font_Select_16x32_32x32>
	Set_GTFont_Decoder(0x21);               //  <--- Activate the chip...
 80072f2:	2021      	movs	r0, #33	; 0x21
 80072f4:	f7fa ffab 	bl	800224e <Set_GTFont_Decoder>
	Font_Background_select_Color();
 80072f8:	f7fa fe8f 	bl	800201a <Font_Background_select_Color>
	//Font_Background_select_Transparency();

	Foreground_color_256(color256_black);
 80072fc:	2000      	movs	r0, #0
 80072fe:	f7fa ffb6 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_yellow);
 8007302:	20fc      	movs	r0, #252	; 0xfc
 8007304:	f7fa ffd5 	bl	80022b2 <Background_color_256>

    Goto_Text_XY(130,140);   // Y,X
 8007308:	218c      	movs	r1, #140	; 0x8c
 800730a:	2082      	movs	r0, #130	; 0x82
 800730c:	f7fa fa2e 	bl	800176c <Goto_Text_XY>
    Font_Width_X3();
 8007310:	f7fa fee3 	bl	80020da <Font_Width_X3>
    Font_Height_X3();
 8007314:	f7fa ff49 	bl	80021aa <Font_Height_X3>
    Show_String("BETA RUNTIME OVER.");
 8007318:	4802      	ldr	r0, [pc, #8]	; (8007324 <screen0x99+0x60>)
 800731a:	f7fa ffec 	bl	80022f6 <Show_String>

}
 800731e:	bf00      	nop
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	0800c458 	.word	0x0800c458

08007328 <WelcomeAnimation>:
#endif


void WelcomeAnimation(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
	uint16_t it;

	CGROM_Select_Genitop_FontROM();
 800732e:	f7fa fde4 	bl	8001efa <CGROM_Select_Genitop_FontROM>
	GTFont_Select_GT23L32S4W_GT23H32S4W();  //  <--- We have this chip!!
 8007332:	f7fa ff6e 	bl	8002212 <GTFont_Select_GT23L32S4W_GT23H32S4W>
	Font_Select_12x24_24x24();
 8007336:	f7fa fdfa 	bl	8001f2e <Font_Select_12x24_24x24>
	//Font_Select_16x32_32x32();
	Set_GTFont_Decoder(0x21);
 800733a:	2021      	movs	r0, #33	; 0x21
 800733c:	f7fa ff87 	bl	800224e <Set_GTFont_Decoder>
    Font_Width_X1();
 8007340:	f7fa fe97 	bl	8002072 <Font_Width_X1>
    Font_Height_X3();
 8007344:	f7fa ff31 	bl	80021aa <Font_Height_X3>

	for(it = 0;it<640;it++)
 8007348:	2300      	movs	r3, #0
 800734a:	80fb      	strh	r3, [r7, #6]
 800734c:	e01d      	b.n	800738a <WelcomeAnimation+0x62>
	{
		Foreground_color_256(color256_blue);
 800734e:	2003      	movs	r0, #3
 8007350:	f7fa ff8d 	bl	800226e <Foreground_color_256>
		Triangle_Point1_XY(0,it);
 8007354:	88fb      	ldrh	r3, [r7, #6]
 8007356:	4619      	mov	r1, r3
 8007358:	2000      	movs	r0, #0
 800735a:	f7fa fa9b 	bl	8001894 <Triangle_Point1_XY>
		Triangle_Point2_XY(399,it);
 800735e:	88fb      	ldrh	r3, [r7, #6]
 8007360:	4619      	mov	r1, r3
 8007362:	f240 108f 	movw	r0, #399	; 0x18f
 8007366:	f7fa fac5 	bl	80018f4 <Triangle_Point2_XY>
		Triangle_Point3_XY(300,it+200);
 800736a:	88fb      	ldrh	r3, [r7, #6]
 800736c:	33c8      	adds	r3, #200	; 0xc8
 800736e:	b29b      	uxth	r3, r3
 8007370:	4619      	mov	r1, r3
 8007372:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007376:	f7fa faed 	bl	8001954 <Triangle_Point3_XY>
		Start_Triangle_Fill();
 800737a:	f7fa fa1f 	bl	80017bc <Start_Triangle_Fill>
		HAL_Delay(1);
 800737e:	2001      	movs	r0, #1
 8007380:	f001 f818 	bl	80083b4 <HAL_Delay>
	for(it = 0;it<640;it++)
 8007384:	88fb      	ldrh	r3, [r7, #6]
 8007386:	3301      	adds	r3, #1
 8007388:	80fb      	strh	r3, [r7, #6]
 800738a:	88fb      	ldrh	r3, [r7, #6]
 800738c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007390:	d3dd      	bcc.n	800734e <WelcomeAnimation+0x26>
	}

	for(it = 1;it<1000;it++)
 8007392:	2301      	movs	r3, #1
 8007394:	80fb      	strh	r3, [r7, #6]
 8007396:	e01b      	b.n	80073d0 <WelcomeAnimation+0xa8>
	{
		Foreground_color_256(color256_green);
 8007398:	201c      	movs	r0, #28
 800739a:	f7fa ff68 	bl	800226e <Foreground_color_256>
		Line_Start_XY(100,1279-it);
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	f5c3 639f 	rsb	r3, r3, #1272	; 0x4f8
 80073a4:	3307      	adds	r3, #7
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	4619      	mov	r1, r3
 80073aa:	2064      	movs	r0, #100	; 0x64
 80073ac:	f7fa fa12 	bl	80017d4 <Line_Start_XY>
		Line_End_XY(200,1279 - it + 1);
 80073b0:	88fb      	ldrh	r3, [r7, #6]
 80073b2:	f5c3 63a0 	rsb	r3, r3, #1280	; 0x500
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	4619      	mov	r1, r3
 80073ba:	20c8      	movs	r0, #200	; 0xc8
 80073bc:	f7fa fa3a 	bl	8001834 <Line_End_XY>
		Start_Square_Fill();
 80073c0:	f7fa faf8 	bl	80019b4 <Start_Square_Fill>
		HAL_Delay(1);
 80073c4:	2001      	movs	r0, #1
 80073c6:	f000 fff5 	bl	80083b4 <HAL_Delay>
	for(it = 1;it<1000;it++)
 80073ca:	88fb      	ldrh	r3, [r7, #6]
 80073cc:	3301      	adds	r3, #1
 80073ce:	80fb      	strh	r3, [r7, #6]
 80073d0:	88fb      	ldrh	r3, [r7, #6]
 80073d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073d6:	d3df      	bcc.n	8007398 <WelcomeAnimation+0x70>
	}

	Font_Background_select_Transparency();
 80073d8:	f7fa fe09 	bl	8001fee <Font_Background_select_Transparency>

	Foreground_color_256(color256_white);
 80073dc:	20ff      	movs	r0, #255	; 0xff
 80073de:	f7fa ff46 	bl	800226e <Foreground_color_256>
	Font_Width_X1();
 80073e2:	f7fa fe46 	bl	8002072 <Font_Width_X1>
	Font_Height_X1();
 80073e6:	f7fa feac 	bl	8002142 <Font_Height_X1>
	Goto_Text_XY(290,104);
 80073ea:	2168      	movs	r1, #104	; 0x68
 80073ec:	f44f 7091 	mov.w	r0, #290	; 0x122
 80073f0:	f7fa f9bc 	bl	800176c <Goto_Text_XY>
	Show_String("LCD10014 - 3 REEL TOP DOLLAR");
 80073f4:	4836      	ldr	r0, [pc, #216]	; (80074d0 <WelcomeAnimation+0x1a8>)
 80073f6:	f7fa ff7e 	bl	80022f6 <Show_String>

#ifdef TIMEBOMB
	// Show TIMEBOMB Enabled in lower-right
	Foreground_color_256(color256_yellow);
 80073fa:	20fc      	movs	r0, #252	; 0xfc
 80073fc:	f7fa ff37 	bl	800226e <Foreground_color_256>
	Font_Width_X1();
 8007400:	f7fa fe37 	bl	8002072 <Font_Width_X1>
	Font_Height_X1();
 8007404:	f7fa fe9d 	bl	8002142 <Font_Height_X1>
	Goto_Text_XY(70,950);
 8007408:	f240 31b6 	movw	r1, #950	; 0x3b6
 800740c:	2046      	movs	r0, #70	; 0x46
 800740e:	f7fa f9ad 	bl	800176c <Goto_Text_XY>
	Show_String("TIMEBOMB ENABLED");
 8007412:	4830      	ldr	r0, [pc, #192]	; (80074d4 <WelcomeAnimation+0x1ac>)
 8007414:	f7fa ff6f 	bl	80022f6 <Show_String>
#endif

	Font_Width_X1();
 8007418:	f7fa fe2b 	bl	8002072 <Font_Width_X1>
	Font_Height_X1();
 800741c:	f7fa fe91 	bl	8002142 <Font_Height_X1>
	Goto_Text_XY(290,904);  // 76
 8007420:	f44f 7162 	mov.w	r1, #904	; 0x388
 8007424:	f44f 7091 	mov.w	r0, #290	; 0x122
 8007428:	f7fa f9a0 	bl	800176c <Goto_Text_XY>
	if(fullcolor)
 800742c:	4b2a      	ldr	r3, [pc, #168]	; (80074d8 <WelcomeAnimation+0x1b0>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d02d      	beq.n	8007490 <WelcomeAnimation+0x168>
	{
		Foreground_color_256(RandomColor_256());
 8007434:	f000 f8b4 	bl	80075a0 <RandomColor_256>
 8007438:	4603      	mov	r3, r0
 800743a:	4618      	mov	r0, r3
 800743c:	f7fa ff17 	bl	800226e <Foreground_color_256>
		Show_String("C");
 8007440:	4826      	ldr	r0, [pc, #152]	; (80074dc <WelcomeAnimation+0x1b4>)
 8007442:	f7fa ff58 	bl	80022f6 <Show_String>
		Foreground_color_256(RandomColor_256());
 8007446:	f000 f8ab 	bl	80075a0 <RandomColor_256>
 800744a:	4603      	mov	r3, r0
 800744c:	4618      	mov	r0, r3
 800744e:	f7fa ff0e 	bl	800226e <Foreground_color_256>
		Show_String("O");
 8007452:	4823      	ldr	r0, [pc, #140]	; (80074e0 <WelcomeAnimation+0x1b8>)
 8007454:	f7fa ff4f 	bl	80022f6 <Show_String>
		Foreground_color_256(RandomColor_256());
 8007458:	f000 f8a2 	bl	80075a0 <RandomColor_256>
 800745c:	4603      	mov	r3, r0
 800745e:	4618      	mov	r0, r3
 8007460:	f7fa ff05 	bl	800226e <Foreground_color_256>
		Show_String("L");
 8007464:	481f      	ldr	r0, [pc, #124]	; (80074e4 <WelcomeAnimation+0x1bc>)
 8007466:	f7fa ff46 	bl	80022f6 <Show_String>
		Foreground_color_256(RandomColor_256());
 800746a:	f000 f899 	bl	80075a0 <RandomColor_256>
 800746e:	4603      	mov	r3, r0
 8007470:	4618      	mov	r0, r3
 8007472:	f7fa fefc 	bl	800226e <Foreground_color_256>
		Show_String("O");
 8007476:	481a      	ldr	r0, [pc, #104]	; (80074e0 <WelcomeAnimation+0x1b8>)
 8007478:	f7fa ff3d 	bl	80022f6 <Show_String>
		Foreground_color_256(RandomColor_256());
 800747c:	f000 f890 	bl	80075a0 <RandomColor_256>
 8007480:	4603      	mov	r3, r0
 8007482:	4618      	mov	r0, r3
 8007484:	f7fa fef3 	bl	800226e <Foreground_color_256>
		Show_String("R");
 8007488:	4817      	ldr	r0, [pc, #92]	; (80074e8 <WelcomeAnimation+0x1c0>)
 800748a:	f7fa ff34 	bl	80022f6 <Show_String>
 800748e:	e005      	b.n	800749c <WelcomeAnimation+0x174>
	}
	else
	{
	Foreground_color_256(color256_cyan);
 8007490:	201f      	movs	r0, #31
 8007492:	f7fa feec 	bl	800226e <Foreground_color_256>
	Show_String("MONOCHROME");
 8007496:	4815      	ldr	r0, [pc, #84]	; (80074ec <WelcomeAnimation+0x1c4>)
 8007498:	f7fa ff2d 	bl	80022f6 <Show_String>
	}
	Foreground_color_256(color256_white);
 800749c:	20ff      	movs	r0, #255	; 0xff
 800749e:	f7fa fee6 	bl	800226e <Foreground_color_256>
	Show_String(" mode enabled.");
 80074a2:	4813      	ldr	r0, [pc, #76]	; (80074f0 <WelcomeAnimation+0x1c8>)
 80074a4:	f7fa ff27 	bl	80022f6 <Show_String>


	Foreground_color_256(color256_red);
 80074a8:	20e0      	movs	r0, #224	; 0xe0
 80074aa:	f7fa fee0 	bl	800226e <Foreground_color_256>
	Goto_Text_XY(115,310);
 80074ae:	f44f 719b 	mov.w	r1, #310	; 0x136
 80074b2:	2073      	movs	r0, #115	; 0x73
 80074b4:	f7fa f95a 	bl	800176c <Goto_Text_XY>
	Font_Width_X3();
 80074b8:	f7fa fe0f 	bl	80020da <Font_Width_X3>
	Font_Height_X3();
 80074bc:	f7fa fe75 	bl	80021aa <Font_Height_X3>
	Show_String("Caching 0 of 4...");
 80074c0:	480c      	ldr	r0, [pc, #48]	; (80074f4 <WelcomeAnimation+0x1cc>)
 80074c2:	f7fa ff18 	bl	80022f6 <Show_String>
}
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	0800c46c 	.word	0x0800c46c
 80074d4:	0800c48c 	.word	0x0800c48c
 80074d8:	20000000 	.word	0x20000000
 80074dc:	0800c4a0 	.word	0x0800c4a0
 80074e0:	0800c4a4 	.word	0x0800c4a4
 80074e4:	0800c4a8 	.word	0x0800c4a8
 80074e8:	0800c4ac 	.word	0x0800c4ac
 80074ec:	0800c4b0 	.word	0x0800c4b0
 80074f0:	0800c4bc 	.word	0x0800c4bc
 80074f4:	0800c4cc 	.word	0x0800c4cc

080074f8 <BTE_logo_disp>:

void BTE_logo_disp(int x, int y, int logo_index, int w, int h)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	603b      	str	r3, [r7, #0]
	BTE_S0_Memory_Start_Address(layer_start_addr(logo_index));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 800750c:	fb02 f303 	mul.w	r3, r2, r3
 8007510:	4618      	mov	r0, r3
 8007512:	f7fa fb10 	bl	8001b36 <BTE_S0_Memory_Start_Address>
	BTE_S0_Image_Width(400);
 8007516:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800751a:	f7fa fb2f 	bl	8001b7c <BTE_S0_Image_Width>
	BTE_S0_Window_Start_XY(0,0);
 800751e:	2100      	movs	r1, #0
 8007520:	2000      	movs	r0, #0
 8007522:	f7fa fb42 	bl	8001baa <BTE_S0_Window_Start_XY>
	BTE_S1_Memory_Start_Address(layer_start_addr(logo_index));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 800752c:	fb02 f303 	mul.w	r3, r2, r3
 8007530:	4618      	mov	r0, r3
 8007532:	f7fa fb62 	bl	8001bfa <BTE_S1_Memory_Start_Address>
	BTE_S1_Image_Width(400);
 8007536:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800753a:	f7fa fb81 	bl	8001c40 <BTE_S1_Image_Width>
	BTE_S1_Window_Start_XY(0,0);
 800753e:	2100      	movs	r1, #0
 8007540:	2000      	movs	r0, #0
 8007542:	f7fa fb94 	bl	8001c6e <BTE_S1_Window_Start_XY>
	BTE_Destination_Memory_Start_Address(layer_start_addr(10));
 8007546:	4815      	ldr	r0, [pc, #84]	; (800759c <BTE_logo_disp+0xa4>)
 8007548:	f7fa fbb9 	bl	8001cbe <BTE_Destination_Memory_Start_Address>
	BTE_Destination_Image_Width(400);
 800754c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007550:	f7fa fbd8 	bl	8001d04 <BTE_Destination_Image_Width>
	BTE_Destination_Window_Start_XY(x,y);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	b29b      	uxth	r3, r3
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	b292      	uxth	r2, r2
 800755c:	4611      	mov	r1, r2
 800755e:	4618      	mov	r0, r3
 8007560:	f7fa fbe7 	bl	8001d32 <BTE_Destination_Window_Start_XY>
	BTE_S0_Color_8bpp();
 8007564:	f7fa fa95 	bl	8001a92 <BTE_S0_Color_8bpp>
	BTE_S1_Color_8bpp();
 8007568:	f7fa faad 	bl	8001ac6 <BTE_S1_Color_8bpp>
	BTE_Destination_Color_8bpp();
 800756c:	f7fa fac9 	bl	8001b02 <BTE_Destination_Color_8bpp>
	BTE_Window_Size(h,w);		// original 304,560..  New 248,448
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	b29b      	uxth	r3, r3
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	b292      	uxth	r2, r2
 8007578:	4611      	mov	r1, r2
 800757a:	4618      	mov	r0, r3
 800757c:	f7fa fc01 	bl	8001d82 <BTE_Window_Size>
	BTE_ROP_Code(12);
 8007580:	200c      	movs	r0, #12
 8007582:	f7fa fa4a 	bl	8001a1a <BTE_ROP_Code>
	//BTE_ROP_Code(3);
	BTE_Operation_Code(2); //BTE move
 8007586:	2002      	movs	r0, #2
 8007588:	f7fa fa67 	bl	8001a5a <BTE_Operation_Code>
	BTE_Enable();		  //memory copy s0(layer2) to layer1
 800758c:	f7fa fa1e 	bl	80019cc <BTE_Enable>
	Check_BTE_Busy();
 8007590:	f7fa fa32 	bl	80019f8 <Check_BTE_Busy>
}
 8007594:	bf00      	nop
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	004e2000 	.word	0x004e2000

080075a0 <RandomColor_256>:

uint8_t RandomColor_256(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
	uint8_t ret = rand()%6;
 80075a6:	f003 fe4f 	bl	800b248 <rand>
 80075aa:	4602      	mov	r2, r0
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <RandomColor_256+0x38>)
 80075ae:	fb83 3102 	smull	r3, r1, r3, r2
 80075b2:	17d3      	asrs	r3, r2, #31
 80075b4:	1ac9      	subs	r1, r1, r3
 80075b6:	460b      	mov	r3, r1
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	440b      	add	r3, r1
 80075bc:	005b      	lsls	r3, r3, #1
 80075be:	1ad1      	subs	r1, r2, r3
 80075c0:	460b      	mov	r3, r1
 80075c2:	71fb      	strb	r3, [r7, #7]
	return colors[ret];
 80075c4:	79fb      	ldrb	r3, [r7, #7]
 80075c6:	4a05      	ldr	r2, [pc, #20]	; (80075dc <RandomColor_256+0x3c>)
 80075c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075cc:	b2db      	uxtb	r3, r3
//	uint8_t ret;
//	ret = rand();
//	return ret;
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	2aaaaaab 	.word	0x2aaaaaab
 80075dc:	20000004 	.word	0x20000004

080075e0 <RandomColor_65k>:

uint16_t RandomColor_65k(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
	uint8_t ret;
	ret = rand();
 80075e6:	f003 fe2f 	bl	800b248 <rand>
 80075ea:	4603      	mov	r3, r0
 80075ec:	71fb      	strb	r3, [r7, #7]
	return ret;
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	b29b      	uxth	r3, r3
//	uint16_t ret = rand()%6;
//	return colors[ret];
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <preloadScreen>:
	uint32_t ret = rand();
	return ret;
}

void preloadScreen(void)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0

	int x_text_offset     = 616;
 8007602:	f44f 731a 	mov.w	r3, #616	; 0x268
 8007606:	60fb      	str	r3, [r7, #12]
	int y_text_offset     = 115;
 8007608:	2373      	movs	r3, #115	; 0x73
 800760a:	60bb      	str	r3, [r7, #8]
	int x_green_box_start = 608;
 800760c:	f44f 7318 	mov.w	r3, #608	; 0x260
 8007610:	607b      	str	r3, [r7, #4]
	int y_green_box_start = 122;
 8007612:	237a      	movs	r3, #122	; 0x7a
 8007614:	603b      	str	r3, [r7, #0]

	// Update "Caching screen x of 3 text on screen...
	Foreground_color_256(color256_green);
 8007616:	201c      	movs	r0, #28
 8007618:	f7fa fe29 	bl	800226e <Foreground_color_256>
	Line_Start_XY(y_green_box_start,x_green_box_start);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	b29b      	uxth	r3, r3
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	b292      	uxth	r2, r2
 8007624:	4611      	mov	r1, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f7fa f8d4 	bl	80017d4 <Line_Start_XY>
	Line_End_XY(190,656);
 800762c:	f44f 7124 	mov.w	r1, #656	; 0x290
 8007630:	20be      	movs	r0, #190	; 0xbe
 8007632:	f7fa f8ff 	bl	8001834 <Line_End_XY>
	Start_Square_Fill();
 8007636:	f7fa f9bd 	bl	80019b4 <Start_Square_Fill>

	Foreground_color_256(color256_red);
 800763a:	20e0      	movs	r0, #224	; 0xe0
 800763c:	f7fa fe17 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_green);
 8007640:	201c      	movs	r0, #28
 8007642:	f7fa fe36 	bl	80022b2 <Background_color_256>
	Font_Width_X3();
 8007646:	f7fa fd48 	bl	80020da <Font_Width_X3>
	Font_Height_X3();
 800764a:	f7fa fdae 	bl	80021aa <Font_Height_X3>
	Font_Background_select_Transparency();
 800764e:	f7fa fcce 	bl	8001fee <Font_Background_select_Transparency>
	Goto_Text_XY(y_text_offset,x_text_offset);
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	b29b      	uxth	r3, r3
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	b292      	uxth	r2, r2
 800765a:	4611      	mov	r1, r2
 800765c:	4618      	mov	r0, r3
 800765e:	f7fa f885 	bl	800176c <Goto_Text_XY>
	Show_String("1");
 8007662:	48bd      	ldr	r0, [pc, #756]	; (8007958 <preloadScreen+0x35c>)
 8007664:	f7fa fe47 	bl	80022f6 <Show_String>

	// Cache graphic 1
	BTE_Destination_Image_Width(400);
 8007668:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800766c:	f7fa fb4a 	bl	8001d04 <BTE_Destination_Image_Width>
	BTE_Destination_Window_Start_XY(0,0);
 8007670:	2100      	movs	r1, #0
 8007672:	2000      	movs	r0, #0
 8007674:	f7fa fb5d 	bl	8001d32 <BTE_Destination_Window_Start_XY>
	BTE_S0_Color_8bpp();
 8007678:	f7fa fa0b 	bl	8001a92 <BTE_S0_Color_8bpp>
	BTE_S1_Color_8bpp();
 800767c:	f7fa fa23 	bl	8001ac6 <BTE_S1_Color_8bpp>
	BTE_Destination_Color_8bpp();
 8007680:	f7fa fa3f 	bl	8001b02 <BTE_Destination_Color_8bpp>
	BTE_ROP_Code(12);
 8007684:	200c      	movs	r0, #12
 8007686:	f7fa f9c8 	bl	8001a1a <BTE_ROP_Code>
	if(fullcolor == 0)
 800768a:	4bb4      	ldr	r3, [pc, #720]	; (800795c <preloadScreen+0x360>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d119      	bne.n	80076c6 <preloadScreen+0xca>
	{
		//Foreground_color_256(color256_green);
		Foreground_color_256(MONOCHROME_COLOR);
 8007692:	201f      	movs	r0, #31
 8007694:	f7fa fdeb 	bl	800226e <Foreground_color_256>
		Background_color_256(color256_black);
 8007698:	2000      	movs	r0, #0
 800769a:	f7fa fe0a 	bl	80022b2 <Background_color_256>
		BTE_Destination_Memory_Start_Address(layer_start_addr(0));
 800769e:	2000      	movs	r0, #0
 80076a0:	f7fa fb0d 	bl	8001cbe <BTE_Destination_Memory_Start_Address>
		BTE_Window_Size(400,1280);
 80076a4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80076a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80076ac:	f7fa fb69 	bl	8001d82 <BTE_Window_Size>
		BTE_Operation_Code(8);
 80076b0:	2008      	movs	r0, #8
 80076b2:	f7fa f9d2 	bl	8001a5a <BTE_Operation_Code>
		BTE_Enable();
 80076b6:	f7fa f989 	bl	80019cc <BTE_Enable>
		Show_picture2(64000,screen05final_400x1280_NORMAL);
 80076ba:	49a9      	ldr	r1, [pc, #676]	; (8007960 <preloadScreen+0x364>)
 80076bc:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
 80076c0:	f7fa fe39 	bl	8002336 <Show_picture2>
 80076c4:	e014      	b.n	80076f0 <preloadScreen+0xf4>
	}
	else
	{
		// colored bonus background load 4
		BTE_Destination_Memory_Start_Address(layer_start_addr(0));
 80076c6:	2000      	movs	r0, #0
 80076c8:	f7fa faf9 	bl	8001cbe <BTE_Destination_Memory_Start_Address>
		BTE_Window_Size(400,1280);
 80076cc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80076d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80076d4:	f7fa fb55 	bl	8001d82 <BTE_Window_Size>
		BTE_Operation_Code(0);
 80076d8:	2000      	movs	r0, #0
 80076da:	f7fa f9be 	bl	8001a5a <BTE_Operation_Code>
		BTE_Enable();
 80076de:	f7fa f975 	bl	80019cc <BTE_Enable>
		Show_pictureX2(400,1280,NewBonusBackground_Sized);
 80076e2:	4aa0      	ldr	r2, [pc, #640]	; (8007964 <preloadScreen+0x368>)
 80076e4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80076e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80076ec:	f7fa fe76 	bl	80023dc <Show_pictureX2>
	}

	Check_BTE_Busy();  // <-- Not needed, Show_Picture runs until complete..
 80076f0:	f7fa f982 	bl	80019f8 <Check_BTE_Busy>


	// Update "Caching screen x of 3 text on screen...
	Foreground_color_256(color256_green);
 80076f4:	201c      	movs	r0, #28
 80076f6:	f7fa fdba 	bl	800226e <Foreground_color_256>
	Line_Start_XY(y_green_box_start,x_green_box_start);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	b292      	uxth	r2, r2
 8007702:	4611      	mov	r1, r2
 8007704:	4618      	mov	r0, r3
 8007706:	f7fa f865 	bl	80017d4 <Line_Start_XY>
	Line_End_XY(190,656);
 800770a:	f44f 7124 	mov.w	r1, #656	; 0x290
 800770e:	20be      	movs	r0, #190	; 0xbe
 8007710:	f7fa f890 	bl	8001834 <Line_End_XY>
	Start_Square_Fill();
 8007714:	f7fa f94e 	bl	80019b4 <Start_Square_Fill>

	Foreground_color_256(color256_red);
 8007718:	20e0      	movs	r0, #224	; 0xe0
 800771a:	f7fa fda8 	bl	800226e <Foreground_color_256>
	Goto_Text_XY(y_text_offset,x_text_offset);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	b29b      	uxth	r3, r3
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	b292      	uxth	r2, r2
 8007726:	4611      	mov	r1, r2
 8007728:	4618      	mov	r0, r3
 800772a:	f7fa f81f 	bl	800176c <Goto_Text_XY>
	Show_String("2");
 800772e:	488e      	ldr	r0, [pc, #568]	; (8007968 <preloadScreen+0x36c>)
 8007730:	f7fa fde1 	bl	80022f6 <Show_String>


	// Cache graphic 2
	if(fullcolor){
 8007734:	4b89      	ldr	r3, [pc, #548]	; (800795c <preloadScreen+0x360>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d016      	beq.n	800776a <preloadScreen+0x16e>
		BTE_Destination_Memory_Start_Address(layer_start_addr(1));
 800773c:	f44f 20fa 	mov.w	r0, #512000	; 0x7d000
 8007740:	f7fa fabd 	bl	8001cbe <BTE_Destination_Memory_Start_Address>
		BTE_Window_Size(198,360);
 8007744:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8007748:	20c6      	movs	r0, #198	; 0xc6
 800774a:	f7fa fb1a 	bl	8001d82 <BTE_Window_Size>
		BTE_Operation_Code(0);
 800774e:	2000      	movs	r0, #0
 8007750:	f7fa f983 	bl	8001a5a <BTE_Operation_Code>
		BTE_Enable();
 8007754:	f7fa f93a 	bl	80019cc <BTE_Enable>
		Show_picture3(198,360,Small_Top_Black_198x360);
 8007758:	4a84      	ldr	r2, [pc, #528]	; (800796c <preloadScreen+0x370>)
 800775a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800775e:	20c6      	movs	r0, #198	; 0xc6
 8007760:	f7fa fe09 	bl	8002376 <Show_picture3>
		Check_BTE_Busy();
 8007764:	f7fa f948 	bl	80019f8 <Check_BTE_Busy>
 8007768:	e017      	b.n	800779a <preloadScreen+0x19e>
	}
	else{

		//Foreground_color_256(color256_green);
		Foreground_color_256(MONOCHROME_COLOR);
 800776a:	201f      	movs	r0, #31
 800776c:	f7fa fd7f 	bl	800226e <Foreground_color_256>
		Background_color_256(color256_black);
 8007770:	2000      	movs	r0, #0
 8007772:	f7fa fd9e 	bl	80022b2 <Background_color_256>
		BTE_Destination_Memory_Start_Address(layer_start_addr(1));
 8007776:	f44f 20fa 	mov.w	r0, #512000	; 0x7d000
 800777a:	f7fa faa0 	bl	8001cbe <BTE_Destination_Memory_Start_Address>
		BTE_Window_Size(160,560);
 800777e:	f44f 710c 	mov.w	r1, #560	; 0x230
 8007782:	20a0      	movs	r0, #160	; 0xa0
 8007784:	f7fa fafd 	bl	8001d82 <BTE_Window_Size>
		BTE_Enable();
 8007788:	f7fa f920 	bl	80019cc <BTE_Enable>
		Show_picture2(11200,TopDollar2_CooperBlack_Font_FRAMED_NORMAL_160x560);
 800778c:	4978      	ldr	r1, [pc, #480]	; (8007970 <preloadScreen+0x374>)
 800778e:	f44f 502f 	mov.w	r0, #11200	; 0x2bc0
 8007792:	f7fa fdd0 	bl	8002336 <Show_picture2>
		Check_BTE_Busy();  // <-- Not needed, Show_Picture runs until complete..
 8007796:	f7fa f92f 	bl	80019f8 <Check_BTE_Busy>
	}


	// Update "Caching screen x of 3 text on screen...
	Foreground_color_256(color256_green);
 800779a:	201c      	movs	r0, #28
 800779c:	f7fa fd67 	bl	800226e <Foreground_color_256>
	Line_Start_XY(y_green_box_start,x_green_box_start);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	b292      	uxth	r2, r2
 80077a8:	4611      	mov	r1, r2
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fa f812 	bl	80017d4 <Line_Start_XY>
	Line_End_XY(190,656);
 80077b0:	f44f 7124 	mov.w	r1, #656	; 0x290
 80077b4:	20be      	movs	r0, #190	; 0xbe
 80077b6:	f7fa f83d 	bl	8001834 <Line_End_XY>
	Start_Square_Fill();
 80077ba:	f7fa f8fb 	bl	80019b4 <Start_Square_Fill>

	Foreground_color_256(color256_red);
 80077be:	20e0      	movs	r0, #224	; 0xe0
 80077c0:	f7fa fd55 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_green);
 80077c4:	201c      	movs	r0, #28
 80077c6:	f7fa fd74 	bl	80022b2 <Background_color_256>
	Goto_Text_XY(y_text_offset,x_text_offset);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	b292      	uxth	r2, r2
 80077d2:	4611      	mov	r1, r2
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7f9 ffc9 	bl	800176c <Goto_Text_XY>
	Show_String("3");
 80077da:	4866      	ldr	r0, [pc, #408]	; (8007974 <preloadScreen+0x378>)
 80077dc:	f7fa fd8b 	bl	80022f6 <Show_String>


	// Cache graphic 3
	BTE_Destination_Memory_Start_Address(layer_start_addr(2));
 80077e0:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
 80077e4:	f7fa fa6b 	bl	8001cbe <BTE_Destination_Memory_Start_Address>
	BTE_Window_Size(264,480);
 80077e8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80077ec:	f44f 7084 	mov.w	r0, #264	; 0x108
 80077f0:	f7fa fac7 	bl	8001d82 <BTE_Window_Size>
	BTE_Operation_Code(0);
 80077f4:	2000      	movs	r0, #0
 80077f6:	f7fa f930 	bl	8001a5a <BTE_Operation_Code>
	BTE_Enable();
 80077fa:	f7fa f8e7 	bl	80019cc <BTE_Enable>
	Show_picture2(126720,NewTOP);
 80077fe:	495e      	ldr	r1, [pc, #376]	; (8007978 <preloadScreen+0x37c>)
 8007800:	485e      	ldr	r0, [pc, #376]	; (800797c <preloadScreen+0x380>)
 8007802:	f7fa fd98 	bl	8002336 <Show_picture2>
	Check_BTE_Busy();
 8007806:	f7fa f8f7 	bl	80019f8 <Check_BTE_Busy>

	// Update "Caching screen x of 4 text on screen...
	Foreground_color_256(color256_green);
 800780a:	201c      	movs	r0, #28
 800780c:	f7fa fd2f 	bl	800226e <Foreground_color_256>
	Line_Start_XY(y_green_box_start,x_green_box_start);
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	b29b      	uxth	r3, r3
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	b292      	uxth	r2, r2
 8007818:	4611      	mov	r1, r2
 800781a:	4618      	mov	r0, r3
 800781c:	f7f9 ffda 	bl	80017d4 <Line_Start_XY>
	Line_End_XY(190,656);
 8007820:	f44f 7124 	mov.w	r1, #656	; 0x290
 8007824:	20be      	movs	r0, #190	; 0xbe
 8007826:	f7fa f805 	bl	8001834 <Line_End_XY>
	Start_Square_Fill();
 800782a:	f7fa f8c3 	bl	80019b4 <Start_Square_Fill>

	Foreground_color_256(color256_red);
 800782e:	20e0      	movs	r0, #224	; 0xe0
 8007830:	f7fa fd1d 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_green);
 8007834:	201c      	movs	r0, #28
 8007836:	f7fa fd3c 	bl	80022b2 <Background_color_256>
	Font_Width_X3();
 800783a:	f7fa fc4e 	bl	80020da <Font_Width_X3>
	Font_Height_X3();
 800783e:	f7fa fcb4 	bl	80021aa <Font_Height_X3>
	Font_Background_select_Transparency();
 8007842:	f7fa fbd4 	bl	8001fee <Font_Background_select_Transparency>
	Goto_Text_XY(y_text_offset,x_text_offset);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	b29b      	uxth	r3, r3
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	b292      	uxth	r2, r2
 800784e:	4611      	mov	r1, r2
 8007850:	4618      	mov	r0, r3
 8007852:	f7f9 ff8b 	bl	800176c <Goto_Text_XY>
	Show_String("4");
 8007856:	484a      	ldr	r0, [pc, #296]	; (8007980 <preloadScreen+0x384>)
 8007858:	f7fa fd4d 	bl	80022f6 <Show_String>

	BTE_Destination_Memory_Start_Address(layer_start_addr(3));
 800785c:	4849      	ldr	r0, [pc, #292]	; (8007984 <preloadScreen+0x388>)
 800785e:	f7fa fa2e 	bl	8001cbe <BTE_Destination_Memory_Start_Address>
	BTE_Window_Size(264,480);
 8007862:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8007866:	f44f 7084 	mov.w	r0, #264	; 0x108
 800786a:	f7fa fa8a 	bl	8001d82 <BTE_Window_Size>
	BTE_Operation_Code(0);
 800786e:	2000      	movs	r0, #0
 8007870:	f7fa f8f3 	bl	8001a5a <BTE_Operation_Code>
	BTE_Enable();
 8007874:	f7fa f8aa 	bl	80019cc <BTE_Enable>
	if(fullcolor)
 8007878:	4b38      	ldr	r3, [pc, #224]	; (800795c <preloadScreen+0x360>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d007      	beq.n	8007890 <preloadScreen+0x294>
	Show_picture3(264,480,NewTOP);
 8007880:	4a3d      	ldr	r2, [pc, #244]	; (8007978 <preloadScreen+0x37c>)
 8007882:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8007886:	f44f 7084 	mov.w	r0, #264	; 0x108
 800788a:	f7fa fd74 	bl	8002376 <Show_picture3>
 800788e:	e006      	b.n	800789e <preloadScreen+0x2a2>
	else
	Show_greenPicture(264,480,NewTOP);//
 8007890:	4a39      	ldr	r2, [pc, #228]	; (8007978 <preloadScreen+0x37c>)
 8007892:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8007896:	f44f 7084 	mov.w	r0, #264	; 0x108
 800789a:	f7fa fdd6 	bl	800244a <Show_greenPicture>

	Check_BTE_Busy();  // <-- Not needed, Show_Picture runs until complete..
 800789e:	f7fa f8ab 	bl	80019f8 <Check_BTE_Busy>
	Show_picture3(247,373,DoubleTopLogo_Gold);

	Check_BTE_Busy();  // <-- Not needed, Show_Picture runs until complete..
*/
	// Done loading graphics...
	Foreground_color_256(color256_green);
 80078a2:	201c      	movs	r0, #28
 80078a4:	f7fa fce3 	bl	800226e <Foreground_color_256>
	Line_Start_XY(100,280);
 80078a8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80078ac:	2064      	movs	r0, #100	; 0x64
 80078ae:	f7f9 ff91 	bl	80017d4 <Line_Start_XY>
	Line_End_XY(200,1279);
 80078b2:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80078b6:	20c8      	movs	r0, #200	; 0xc8
 80078b8:	f7f9 ffbc 	bl	8001834 <Line_End_XY>
	Start_Square_Fill();
 80078bc:	f7fa f87a 	bl	80019b4 <Start_Square_Fill>

	Goto_Text_XY(115,310);
 80078c0:	f44f 719b 	mov.w	r1, #310	; 0x136
 80078c4:	2073      	movs	r0, #115	; 0x73
 80078c6:	f7f9 ff51 	bl	800176c <Goto_Text_XY>
	Foreground_color_256(color256_red);
 80078ca:	20e0      	movs	r0, #224	; 0xe0
 80078cc:	f7fa fccf 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_green);
 80078d0:	201c      	movs	r0, #28
 80078d2:	f7fa fcee 	bl	80022b2 <Background_color_256>
	Font_Width_X3();
 80078d6:	f7fa fc00 	bl	80020da <Font_Width_X3>
	Font_Height_X3();
 80078da:	f7fa fc66 	bl	80021aa <Font_Height_X3>
	Show_String("COMPLETE");
 80078de:	482a      	ldr	r0, [pc, #168]	; (8007988 <preloadScreen+0x38c>)
 80078e0:	f7fa fd09 	bl	80022f6 <Show_String>
	HAL_Delay(500);
 80078e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80078e8:	f000 fd64 	bl	80083b4 <HAL_Delay>

	// Reset screen settings
	Select_Main_Window_8bpp();
 80078ec:	f7f9 fb2e 	bl	8000f4c <Select_Main_Window_8bpp>
	Main_Image_Start_Address(layer_start_addr(10));
 80078f0:	4826      	ldr	r0, [pc, #152]	; (800798c <preloadScreen+0x390>)
 80078f2:	f7f9 fd6d 	bl	80013d0 <Main_Image_Start_Address>
	Main_Window_Start_XY(0,0);
 80078f6:	2100      	movs	r1, #0
 80078f8:	2000      	movs	r0, #0
 80078fa:	f7f9 fda3 	bl	8001444 <Main_Window_Start_XY>
	Canvas_Image_Start_address(layer_start_addr(10));
 80078fe:	4823      	ldr	r0, [pc, #140]	; (800798c <preloadScreen+0x390>)
 8007900:	f7f9 fe7a 	bl	80015f8 <Canvas_Image_Start_address>
	Active_Window_XY(0,0);
 8007904:	2100      	movs	r1, #0
 8007906:	2000      	movs	r0, #0
 8007908:	f7f9 feb0 	bl	800166c <Active_Window_XY>
	Font_Background_select_Color();
 800790c:	f7fa fb85 	bl	800201a <Font_Background_select_Color>
	Main_Image_Width(400);
 8007910:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007914:	f7f9 fd7f 	bl	8001416 <Main_Image_Width>
	Canvas_image_width(400);
 8007918:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800791c:	f7f9 fe8f 	bl	800163e <Canvas_image_width>
	Active_Window_WH(400,1280);
 8007920:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8007924:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007928:	f7f9 fec8 	bl	80016bc <Active_Window_WH>

	// Clear Screen
	Foreground_color_256(color256_black);
 800792c:	2000      	movs	r0, #0
 800792e:	f7fa fc9e 	bl	800226e <Foreground_color_256>
	Background_color_256(color256_black);
 8007932:	2000      	movs	r0, #0
 8007934:	f7fa fcbd 	bl	80022b2 <Background_color_256>
	Line_Start_XY(0,0);
 8007938:	2100      	movs	r1, #0
 800793a:	2000      	movs	r0, #0
 800793c:	f7f9 ff4a 	bl	80017d4 <Line_Start_XY>
    Line_End_XY(399,1279);  //  Y,X
 8007940:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8007944:	f240 108f 	movw	r0, #399	; 0x18f
 8007948:	f7f9 ff74 	bl	8001834 <Line_End_XY>
    Start_Square_Fill();
 800794c:	f7fa f832 	bl	80019b4 <Start_Square_Fill>
}
 8007950:	bf00      	nop
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	0800c4e0 	.word	0x0800c4e0
 800795c:	20000000 	.word	0x20000000
 8007960:	0802b3f4 	.word	0x0802b3f4
 8007964:	0803d9b4 	.word	0x0803d9b4
 8007968:	0800c4e4 	.word	0x0800c4e4
 800796c:	0805cdb4 	.word	0x0805cdb4
 8007970:	0803adf4 	.word	0x0803adf4
 8007974:	0800c2cc 	.word	0x0800c2cc
 8007978:	0800c4f4 	.word	0x0800c4f4
 800797c:	0001ef00 	.word	0x0001ef00
 8007980:	0800c364 	.word	0x0800c364
 8007984:	00177000 	.word	0x00177000
 8007988:	0800c4e8 	.word	0x0800c4e8
 800798c:	004e2000 	.word	0x004e2000

08007990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007994:	f000 fc9c 	bl	80082d0 <HAL_Init>
//  HAL_Delay(1000);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007998:	f000 f80e 	bl	80079b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800799c:	f000 f90c 	bl	8007bb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80079a0:	f000 f8b2 	bl	8007b08 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80079a4:	f000 f8da 	bl	8007b5c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 80079a8:	f000 f878 	bl	8007a9c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  InitCommands();
 80079ac:	f7fa fd84 	bl	80024b8 <InitCommands>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HandlePacket();
 80079b0:	f7fb f8f4 	bl	8002b9c <HandlePacket>
 80079b4:	e7fc      	b.n	80079b0 <main+0x20>
	...

080079b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b094      	sub	sp, #80	; 0x50
 80079bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80079be:	f107 031c 	add.w	r3, r7, #28
 80079c2:	2234      	movs	r2, #52	; 0x34
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f003 fd81 	bl	800b4ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80079cc:	f107 0308 	add.w	r3, r7, #8
 80079d0:	2200      	movs	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	605a      	str	r2, [r3, #4]
 80079d6:	609a      	str	r2, [r3, #8]
 80079d8:	60da      	str	r2, [r3, #12]
 80079da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80079dc:	2300      	movs	r3, #0
 80079de:	607b      	str	r3, [r7, #4]
 80079e0:	4b2c      	ldr	r3, [pc, #176]	; (8007a94 <SystemClock_Config+0xdc>)
 80079e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e4:	4a2b      	ldr	r2, [pc, #172]	; (8007a94 <SystemClock_Config+0xdc>)
 80079e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ea:	6413      	str	r3, [r2, #64]	; 0x40
 80079ec:	4b29      	ldr	r3, [pc, #164]	; (8007a94 <SystemClock_Config+0xdc>)
 80079ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f4:	607b      	str	r3, [r7, #4]
 80079f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80079f8:	2300      	movs	r3, #0
 80079fa:	603b      	str	r3, [r7, #0]
 80079fc:	4b26      	ldr	r3, [pc, #152]	; (8007a98 <SystemClock_Config+0xe0>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a25      	ldr	r2, [pc, #148]	; (8007a98 <SystemClock_Config+0xe0>)
 8007a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a06:	6013      	str	r3, [r2, #0]
 8007a08:	4b23      	ldr	r3, [pc, #140]	; (8007a98 <SystemClock_Config+0xe0>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a10:	603b      	str	r3, [r7, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007a14:	2302      	movs	r3, #2
 8007a16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007a1c:	2310      	movs	r3, #16
 8007a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007a20:	2302      	movs	r3, #2
 8007a22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007a24:	2300      	movs	r3, #0
 8007a26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007a28:	2308      	movs	r3, #8
 8007a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8007a2c:	23b4      	movs	r3, #180	; 0xb4
 8007a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007a30:	2302      	movs	r3, #2
 8007a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8007a34:	2302      	movs	r3, #2
 8007a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007a38:	2302      	movs	r3, #2
 8007a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a3c:	f107 031c 	add.w	r3, r7, #28
 8007a40:	4618      	mov	r0, r3
 8007a42:	f001 fbdf 	bl	8009204 <HAL_RCC_OscConfig>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8007a4c:	f000 f998 	bl	8007d80 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007a50:	f001 f83e 	bl	8008ad0 <HAL_PWREx_EnableOverDrive>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8007a5a:	f000 f991 	bl	8007d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a5e:	230f      	movs	r3, #15
 8007a60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a62:	2302      	movs	r3, #2
 8007a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a66:	2300      	movs	r3, #0
 8007a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007a6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a74:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007a76:	f107 0308 	add.w	r3, r7, #8
 8007a7a:	2105      	movs	r1, #5
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f001 f877 	bl	8008b70 <HAL_RCC_ClockConfig>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007a88:	f000 f97a 	bl	8007d80 <Error_Handler>
  }
}
 8007a8c:	bf00      	nop
 8007a8e:	3750      	adds	r7, #80	; 0x50
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	40023800 	.word	0x40023800
 8007a98:	40007000 	.word	0x40007000

08007a9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007aa0:	4b17      	ldr	r3, [pc, #92]	; (8007b00 <MX_SPI2_Init+0x64>)
 8007aa2:	4a18      	ldr	r2, [pc, #96]	; (8007b04 <MX_SPI2_Init+0x68>)
 8007aa4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007aa6:	4b16      	ldr	r3, [pc, #88]	; (8007b00 <MX_SPI2_Init+0x64>)
 8007aa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007aac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007aae:	4b14      	ldr	r3, [pc, #80]	; (8007b00 <MX_SPI2_Init+0x64>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007ab4:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <MX_SPI2_Init+0x64>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007aba:	4b11      	ldr	r3, [pc, #68]	; (8007b00 <MX_SPI2_Init+0x64>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007ac0:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <MX_SPI2_Init+0x64>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007ac6:	4b0e      	ldr	r3, [pc, #56]	; (8007b00 <MX_SPI2_Init+0x64>)
 8007ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007acc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ace:	4b0c      	ldr	r3, [pc, #48]	; (8007b00 <MX_SPI2_Init+0x64>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007ad4:	4b0a      	ldr	r3, [pc, #40]	; (8007b00 <MX_SPI2_Init+0x64>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007ada:	4b09      	ldr	r3, [pc, #36]	; (8007b00 <MX_SPI2_Init+0x64>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ae0:	4b07      	ldr	r3, [pc, #28]	; (8007b00 <MX_SPI2_Init+0x64>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007ae6:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <MX_SPI2_Init+0x64>)
 8007ae8:	220a      	movs	r2, #10
 8007aea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007aec:	4804      	ldr	r0, [pc, #16]	; (8007b00 <MX_SPI2_Init+0x64>)
 8007aee:	f001 fe27 	bl	8009740 <HAL_SPI_Init>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007af8:	f000 f942 	bl	8007d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007afc:	bf00      	nop
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	2000081c 	.word	0x2000081c
 8007b04:	40003800 	.word	0x40003800

08007b08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007b0c:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <MX_USART2_UART_Init+0x4c>)
 8007b0e:	4a12      	ldr	r2, [pc, #72]	; (8007b58 <MX_USART2_UART_Init+0x50>)
 8007b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007b12:	4b10      	ldr	r3, [pc, #64]	; (8007b54 <MX_USART2_UART_Init+0x4c>)
 8007b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007b1a:	4b0e      	ldr	r3, [pc, #56]	; (8007b54 <MX_USART2_UART_Init+0x4c>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007b20:	4b0c      	ldr	r3, [pc, #48]	; (8007b54 <MX_USART2_UART_Init+0x4c>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <MX_USART2_UART_Init+0x4c>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007b2c:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <MX_USART2_UART_Init+0x4c>)
 8007b2e:	220c      	movs	r2, #12
 8007b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b32:	4b08      	ldr	r3, [pc, #32]	; (8007b54 <MX_USART2_UART_Init+0x4c>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b38:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <MX_USART2_UART_Init+0x4c>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007b3e:	4805      	ldr	r0, [pc, #20]	; (8007b54 <MX_USART2_UART_Init+0x4c>)
 8007b40:	f002 fa64 	bl	800a00c <HAL_UART_Init>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007b4a:	f000 f919 	bl	8007d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007b4e:	bf00      	nop
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20000874 	.word	0x20000874
 8007b58:	40004400 	.word	0x40004400

08007b5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007b60:	4b13      	ldr	r3, [pc, #76]	; (8007bb0 <MX_USART3_UART_Init+0x54>)
 8007b62:	4a14      	ldr	r2, [pc, #80]	; (8007bb4 <MX_USART3_UART_Init+0x58>)
 8007b64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8007b66:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <MX_USART3_UART_Init+0x54>)
 8007b68:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8007b6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8007b6e:	4b10      	ldr	r3, [pc, #64]	; (8007bb0 <MX_USART3_UART_Init+0x54>)
 8007b70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007b74:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007b76:	4b0e      	ldr	r3, [pc, #56]	; (8007bb0 <MX_USART3_UART_Init+0x54>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007b7c:	4b0c      	ldr	r3, [pc, #48]	; (8007bb0 <MX_USART3_UART_Init+0x54>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007b82:	4b0b      	ldr	r3, [pc, #44]	; (8007bb0 <MX_USART3_UART_Init+0x54>)
 8007b84:	220c      	movs	r2, #12
 8007b86:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b88:	4b09      	ldr	r3, [pc, #36]	; (8007bb0 <MX_USART3_UART_Init+0x54>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b8e:	4b08      	ldr	r3, [pc, #32]	; (8007bb0 <MX_USART3_UART_Init+0x54>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart3, 0x0E, UART_WAKEUPMETHOD_ADDRESSMARK) != HAL_OK)
 8007b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b98:	210e      	movs	r1, #14
 8007b9a:	4805      	ldr	r0, [pc, #20]	; (8007bb0 <MX_USART3_UART_Init+0x54>)
 8007b9c:	f002 fa86 	bl	800a0ac <HAL_MultiProcessor_Init>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <MX_USART3_UART_Init+0x4e>
  {
    Error_Handler();
 8007ba6:	f000 f8eb 	bl	8007d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8007baa:	bf00      	nop
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	200008bc 	.word	0x200008bc
 8007bb4:	40004800 	.word	0x40004800

08007bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08a      	sub	sp, #40	; 0x28
 8007bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bbe:	f107 0314 	add.w	r3, r7, #20
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	605a      	str	r2, [r3, #4]
 8007bc8:	609a      	str	r2, [r3, #8]
 8007bca:	60da      	str	r2, [r3, #12]
 8007bcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007bce:	2300      	movs	r3, #0
 8007bd0:	613b      	str	r3, [r7, #16]
 8007bd2:	4b62      	ldr	r3, [pc, #392]	; (8007d5c <MX_GPIO_Init+0x1a4>)
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd6:	4a61      	ldr	r2, [pc, #388]	; (8007d5c <MX_GPIO_Init+0x1a4>)
 8007bd8:	f043 0304 	orr.w	r3, r3, #4
 8007bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8007bde:	4b5f      	ldr	r3, [pc, #380]	; (8007d5c <MX_GPIO_Init+0x1a4>)
 8007be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be2:	f003 0304 	and.w	r3, r3, #4
 8007be6:	613b      	str	r3, [r7, #16]
 8007be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	4b5b      	ldr	r3, [pc, #364]	; (8007d5c <MX_GPIO_Init+0x1a4>)
 8007bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf2:	4a5a      	ldr	r2, [pc, #360]	; (8007d5c <MX_GPIO_Init+0x1a4>)
 8007bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8007bfa:	4b58      	ldr	r3, [pc, #352]	; (8007d5c <MX_GPIO_Init+0x1a4>)
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c06:	2300      	movs	r3, #0
 8007c08:	60bb      	str	r3, [r7, #8]
 8007c0a:	4b54      	ldr	r3, [pc, #336]	; (8007d5c <MX_GPIO_Init+0x1a4>)
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	4a53      	ldr	r2, [pc, #332]	; (8007d5c <MX_GPIO_Init+0x1a4>)
 8007c10:	f043 0301 	orr.w	r3, r3, #1
 8007c14:	6313      	str	r3, [r2, #48]	; 0x30
 8007c16:	4b51      	ldr	r3, [pc, #324]	; (8007d5c <MX_GPIO_Init+0x1a4>)
 8007c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	60bb      	str	r3, [r7, #8]
 8007c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c22:	2300      	movs	r3, #0
 8007c24:	607b      	str	r3, [r7, #4]
 8007c26:	4b4d      	ldr	r3, [pc, #308]	; (8007d5c <MX_GPIO_Init+0x1a4>)
 8007c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2a:	4a4c      	ldr	r2, [pc, #304]	; (8007d5c <MX_GPIO_Init+0x1a4>)
 8007c2c:	f043 0302 	orr.w	r3, r3, #2
 8007c30:	6313      	str	r3, [r2, #48]	; 0x30
 8007c32:	4b4a      	ldr	r3, [pc, #296]	; (8007d5c <MX_GPIO_Init+0x1a4>)
 8007c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	607b      	str	r3, [r7, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|LED_Pin|SD_DO_Pin, GPIO_PIN_RESET);
 8007c3e:	2200      	movs	r2, #0
 8007c40:	21b0      	movs	r1, #176	; 0xb0
 8007c42:	4847      	ldr	r0, [pc, #284]	; (8007d60 <MX_GPIO_Init+0x1a8>)
 8007c44:	f000 ff2a 	bl	8008a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD2828_RST_GPIO_Port, SSD2828_RST_Pin, GPIO_PIN_RESET);
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2120      	movs	r1, #32
 8007c4c:	4845      	ldr	r0, [pc, #276]	; (8007d64 <MX_GPIO_Init+0x1ac>)
 8007c4e:	f000 ff25 	bl	8008a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SSD2828_CS_Pin|SSD2828_SCK_Pin|SSD2828_SDO_Pin|SPI_RA8876_NSS_Pin
 8007c52:	2200      	movs	r2, #0
 8007c54:	f241 3107 	movw	r1, #4871	; 0x1307
 8007c58:	4843      	ldr	r0, [pc, #268]	; (8007d68 <MX_GPIO_Init+0x1b0>)
 8007c5a:	f000 ff1f 	bl	8008a9c <HAL_GPIO_WritePin>
                          |SD_CLK_Pin|RESET_RA8876_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007c64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8007c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007c6e:	f107 0314 	add.w	r3, r7, #20
 8007c72:	4619      	mov	r1, r3
 8007c74:	483b      	ldr	r0, [pc, #236]	; (8007d64 <MX_GPIO_Init+0x1ac>)
 8007c76:	f000 fd65 	bl	8008744 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8007c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c80:	2300      	movs	r3, #0
 8007c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c84:	2300      	movs	r3, #0
 8007c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8007c88:	f107 0314 	add.w	r3, r7, #20
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4835      	ldr	r0, [pc, #212]	; (8007d64 <MX_GPIO_Init+0x1ac>)
 8007c90:	f000 fd58 	bl	8008744 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin LED_Pin SD_DO_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LED_Pin|SD_DO_Pin;
 8007c94:	23b0      	movs	r3, #176	; 0xb0
 8007c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ca4:	f107 0314 	add.w	r3, r7, #20
 8007ca8:	4619      	mov	r1, r3
 8007caa:	482d      	ldr	r0, [pc, #180]	; (8007d60 <MX_GPIO_Init+0x1a8>)
 8007cac:	f000 fd4a 	bl	8008744 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DI_Pin */
  GPIO_InitStruct.Pin = SD_DI_Pin;
 8007cb0:	2340      	movs	r3, #64	; 0x40
 8007cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DI_GPIO_Port, &GPIO_InitStruct);
 8007cbc:	f107 0314 	add.w	r3, r7, #20
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	4827      	ldr	r0, [pc, #156]	; (8007d60 <MX_GPIO_Init+0x1a8>)
 8007cc4:	f000 fd3e 	bl	8008744 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARDDETECT_Pin */
  GPIO_InitStruct.Pin = CARDDETECT_Pin;
 8007cc8:	2310      	movs	r3, #16
 8007cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CARDDETECT_GPIO_Port, &GPIO_InitStruct);
 8007cd4:	f107 0314 	add.w	r3, r7, #20
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4822      	ldr	r0, [pc, #136]	; (8007d64 <MX_GPIO_Init+0x1ac>)
 8007cdc:	f000 fd32 	bl	8008744 <HAL_GPIO_Init>

  /*Configure GPIO pin : SSD2828_RST_Pin */
  GPIO_InitStruct.Pin = SSD2828_RST_Pin;
 8007ce0:	2320      	movs	r3, #32
 8007ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cec:	2300      	movs	r3, #0
 8007cee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SSD2828_RST_GPIO_Port, &GPIO_InitStruct);
 8007cf0:	f107 0314 	add.w	r3, r7, #20
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	481b      	ldr	r0, [pc, #108]	; (8007d64 <MX_GPIO_Init+0x1ac>)
 8007cf8:	f000 fd24 	bl	8008744 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSD2828_CS_Pin SSD2828_SCK_Pin SSD2828_SDO_Pin SPI_RA8876_NSS_Pin
                           RESET_RA8876_Pin */
  GPIO_InitStruct.Pin = SSD2828_CS_Pin|SSD2828_SCK_Pin|SSD2828_SDO_Pin|SPI_RA8876_NSS_Pin
 8007cfc:	f241 2307 	movw	r3, #4615	; 0x1207
 8007d00:	617b      	str	r3, [r7, #20]
                          |RESET_RA8876_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d02:	2301      	movs	r3, #1
 8007d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d0e:	f107 0314 	add.w	r3, r7, #20
 8007d12:	4619      	mov	r1, r3
 8007d14:	4814      	ldr	r0, [pc, #80]	; (8007d68 <MX_GPIO_Init+0x1b0>)
 8007d16:	f000 fd15 	bl	8008744 <HAL_GPIO_Init>

  /*Configure GPIO pin : SSD2828_SDI_Pin */
  GPIO_InitStruct.Pin = SSD2828_SDI_Pin;
 8007d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d20:	2300      	movs	r3, #0
 8007d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d24:	2300      	movs	r3, #0
 8007d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SSD2828_SDI_GPIO_Port, &GPIO_InitStruct);
 8007d28:	f107 0314 	add.w	r3, r7, #20
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	480e      	ldr	r0, [pc, #56]	; (8007d68 <MX_GPIO_Init+0x1b0>)
 8007d30:	f000 fd08 	bl	8008744 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CLK_Pin */
  GPIO_InitStruct.Pin = SD_CLK_Pin;
 8007d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007d3e:	2302      	movs	r3, #2
 8007d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d42:	2300      	movs	r3, #0
 8007d44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CLK_GPIO_Port, &GPIO_InitStruct);
 8007d46:	f107 0314 	add.w	r3, r7, #20
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	4806      	ldr	r0, [pc, #24]	; (8007d68 <MX_GPIO_Init+0x1b0>)
 8007d4e:	f000 fcf9 	bl	8008744 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007d52:	bf00      	nop
 8007d54:	3728      	adds	r7, #40	; 0x28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	40023800 	.word	0x40023800
 8007d60:	40020000 	.word	0x40020000
 8007d64:	40020800 	.word	0x40020800
 8007d68:	40020400 	.word	0x40020400

08007d6c <HAL_UART_RxCpltCallback>:
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
	PacketProc();
 8007d74:	f7fa fc28 	bl	80025c8 <PacketProc>
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007d80:	b480      	push	{r7}
 8007d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007d84:	b672      	cpsid	i
}
 8007d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007d88:	e7fe      	b.n	8007d88 <Error_Handler+0x8>
	...

08007d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d92:	2300      	movs	r3, #0
 8007d94:	607b      	str	r3, [r7, #4]
 8007d96:	4b10      	ldr	r3, [pc, #64]	; (8007dd8 <HAL_MspInit+0x4c>)
 8007d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9a:	4a0f      	ldr	r2, [pc, #60]	; (8007dd8 <HAL_MspInit+0x4c>)
 8007d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007da0:	6453      	str	r3, [r2, #68]	; 0x44
 8007da2:	4b0d      	ldr	r3, [pc, #52]	; (8007dd8 <HAL_MspInit+0x4c>)
 8007da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007daa:	607b      	str	r3, [r7, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007dae:	2300      	movs	r3, #0
 8007db0:	603b      	str	r3, [r7, #0]
 8007db2:	4b09      	ldr	r3, [pc, #36]	; (8007dd8 <HAL_MspInit+0x4c>)
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	4a08      	ldr	r2, [pc, #32]	; (8007dd8 <HAL_MspInit+0x4c>)
 8007db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8007dbe:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <HAL_MspInit+0x4c>)
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc6:	603b      	str	r3, [r7, #0]
 8007dc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007dca:	2007      	movs	r0, #7
 8007dcc:	f000 fbe6 	bl	800859c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	40023800 	.word	0x40023800

08007ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08a      	sub	sp, #40	; 0x28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007de4:	f107 0314 	add.w	r3, r7, #20
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	605a      	str	r2, [r3, #4]
 8007dee:	609a      	str	r2, [r3, #8]
 8007df0:	60da      	str	r2, [r3, #12]
 8007df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a19      	ldr	r2, [pc, #100]	; (8007e60 <HAL_SPI_MspInit+0x84>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d12c      	bne.n	8007e58 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007dfe:	2300      	movs	r3, #0
 8007e00:	613b      	str	r3, [r7, #16]
 8007e02:	4b18      	ldr	r3, [pc, #96]	; (8007e64 <HAL_SPI_MspInit+0x88>)
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	4a17      	ldr	r2, [pc, #92]	; (8007e64 <HAL_SPI_MspInit+0x88>)
 8007e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e0e:	4b15      	ldr	r3, [pc, #84]	; (8007e64 <HAL_SPI_MspInit+0x88>)
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e16:	613b      	str	r3, [r7, #16]
 8007e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <HAL_SPI_MspInit+0x88>)
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	4a10      	ldr	r2, [pc, #64]	; (8007e64 <HAL_SPI_MspInit+0x88>)
 8007e24:	f043 0302 	orr.w	r3, r3, #2
 8007e28:	6313      	str	r3, [r2, #48]	; 0x30
 8007e2a:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <HAL_SPI_MspInit+0x88>)
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007e36:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e40:	2300      	movs	r3, #0
 8007e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e44:	2303      	movs	r3, #3
 8007e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007e48:	2305      	movs	r3, #5
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e4c:	f107 0314 	add.w	r3, r7, #20
 8007e50:	4619      	mov	r1, r3
 8007e52:	4805      	ldr	r0, [pc, #20]	; (8007e68 <HAL_SPI_MspInit+0x8c>)
 8007e54:	f000 fc76 	bl	8008744 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007e58:	bf00      	nop
 8007e5a:	3728      	adds	r7, #40	; 0x28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	40003800 	.word	0x40003800
 8007e64:	40023800 	.word	0x40023800
 8007e68:	40020400 	.word	0x40020400

08007e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08c      	sub	sp, #48	; 0x30
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e74:	f107 031c 	add.w	r3, r7, #28
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	605a      	str	r2, [r3, #4]
 8007e7e:	609a      	str	r2, [r3, #8]
 8007e80:	60da      	str	r2, [r3, #12]
 8007e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a36      	ldr	r2, [pc, #216]	; (8007f64 <HAL_UART_MspInit+0xf8>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d12c      	bne.n	8007ee8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61bb      	str	r3, [r7, #24]
 8007e92:	4b35      	ldr	r3, [pc, #212]	; (8007f68 <HAL_UART_MspInit+0xfc>)
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	4a34      	ldr	r2, [pc, #208]	; (8007f68 <HAL_UART_MspInit+0xfc>)
 8007e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e9e:	4b32      	ldr	r3, [pc, #200]	; (8007f68 <HAL_UART_MspInit+0xfc>)
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea6:	61bb      	str	r3, [r7, #24]
 8007ea8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eaa:	2300      	movs	r3, #0
 8007eac:	617b      	str	r3, [r7, #20]
 8007eae:	4b2e      	ldr	r3, [pc, #184]	; (8007f68 <HAL_UART_MspInit+0xfc>)
 8007eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb2:	4a2d      	ldr	r2, [pc, #180]	; (8007f68 <HAL_UART_MspInit+0xfc>)
 8007eb4:	f043 0301 	orr.w	r3, r3, #1
 8007eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8007eba:	4b2b      	ldr	r3, [pc, #172]	; (8007f68 <HAL_UART_MspInit+0xfc>)
 8007ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	617b      	str	r3, [r7, #20]
 8007ec4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eca:	2302      	movs	r3, #2
 8007ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007ed6:	2307      	movs	r3, #7
 8007ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eda:	f107 031c 	add.w	r3, r7, #28
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4822      	ldr	r0, [pc, #136]	; (8007f6c <HAL_UART_MspInit+0x100>)
 8007ee2:	f000 fc2f 	bl	8008744 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007ee6:	e039      	b.n	8007f5c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a20      	ldr	r2, [pc, #128]	; (8007f70 <HAL_UART_MspInit+0x104>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d134      	bne.n	8007f5c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	613b      	str	r3, [r7, #16]
 8007ef6:	4b1c      	ldr	r3, [pc, #112]	; (8007f68 <HAL_UART_MspInit+0xfc>)
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	4a1b      	ldr	r2, [pc, #108]	; (8007f68 <HAL_UART_MspInit+0xfc>)
 8007efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f00:	6413      	str	r3, [r2, #64]	; 0x40
 8007f02:	4b19      	ldr	r3, [pc, #100]	; (8007f68 <HAL_UART_MspInit+0xfc>)
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f0a:	613b      	str	r3, [r7, #16]
 8007f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60fb      	str	r3, [r7, #12]
 8007f12:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <HAL_UART_MspInit+0xfc>)
 8007f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f16:	4a14      	ldr	r2, [pc, #80]	; (8007f68 <HAL_UART_MspInit+0xfc>)
 8007f18:	f043 0304 	orr.w	r3, r3, #4
 8007f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8007f1e:	4b12      	ldr	r3, [pc, #72]	; (8007f68 <HAL_UART_MspInit+0xfc>)
 8007f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007f2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f30:	2302      	movs	r3, #2
 8007f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007f3c:	2307      	movs	r3, #7
 8007f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f40:	f107 031c 	add.w	r3, r7, #28
 8007f44:	4619      	mov	r1, r3
 8007f46:	480b      	ldr	r0, [pc, #44]	; (8007f74 <HAL_UART_MspInit+0x108>)
 8007f48:	f000 fbfc 	bl	8008744 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2100      	movs	r1, #0
 8007f50:	2027      	movs	r0, #39	; 0x27
 8007f52:	f000 fb2e 	bl	80085b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007f56:	2027      	movs	r0, #39	; 0x27
 8007f58:	f000 fb47 	bl	80085ea <HAL_NVIC_EnableIRQ>
}
 8007f5c:	bf00      	nop
 8007f5e:	3730      	adds	r7, #48	; 0x30
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40004400 	.word	0x40004400
 8007f68:	40023800 	.word	0x40023800
 8007f6c:	40020000 	.word	0x40020000
 8007f70:	40004800 	.word	0x40004800
 8007f74:	40020800 	.word	0x40020800

08007f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007f7c:	e7fe      	b.n	8007f7c <NMI_Handler+0x4>

08007f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007f82:	e7fe      	b.n	8007f82 <HardFault_Handler+0x4>

08007f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007f84:	b480      	push	{r7}
 8007f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007f88:	e7fe      	b.n	8007f88 <MemManage_Handler+0x4>

08007f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007f8e:	e7fe      	b.n	8007f8e <BusFault_Handler+0x4>

08007f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007f90:	b480      	push	{r7}
 8007f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007f94:	e7fe      	b.n	8007f94 <UsageFault_Handler+0x4>

08007f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007f96:	b480      	push	{r7}
 8007f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007f9a:	bf00      	nop
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007fa8:	bf00      	nop
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007fb6:	bf00      	nop
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007fc4:	f000 f9d6 	bl	8008374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(idleTime<TIME_LIMIT)idleTime++;
 8007fc8:	4b2b      	ldr	r3, [pc, #172]	; (8008078 <SysTick_Handler+0xb8>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f242 720f 	movw	r2, #9999	; 0x270f
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d804      	bhi.n	8007fde <SysTick_Handler+0x1e>
 8007fd4:	4b28      	ldr	r3, [pc, #160]	; (8008078 <SysTick_Handler+0xb8>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	4a27      	ldr	r2, [pc, #156]	; (8008078 <SysTick_Handler+0xb8>)
 8007fdc:	6013      	str	r3, [r2, #0]
#ifdef TIMEBOMB
  // Enable time bomb
  if(timeCount<HOUR2MILL(48)) timeCount++;	// please input number of hours to stop
 8007fde:	4b27      	ldr	r3, [pc, #156]	; (800807c <SysTick_Handler+0xbc>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a27      	ldr	r2, [pc, #156]	; (8008080 <SysTick_Handler+0xc0>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d20f      	bcs.n	8008008 <SysTick_Handler+0x48>
 8007fe8:	4b24      	ldr	r3, [pc, #144]	; (800807c <SysTick_Handler+0xbc>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3301      	adds	r3, #1
 8007fee:	4a23      	ldr	r2, [pc, #140]	; (800807c <SysTick_Handler+0xbc>)
 8007ff0:	6013      	str	r3, [r2, #0]
	  screen0x99();
	  while(1);
  }
#endif

  rxidlecnt++;
 8007ff2:	4b24      	ldr	r3, [pc, #144]	; (8008084 <SysTick_Handler+0xc4>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	4b22      	ldr	r3, [pc, #136]	; (8008084 <SysTick_Handler+0xc4>)
 8007ffc:	701a      	strb	r2, [r3, #0]
  if(rxidlecnt > 200)
 8007ffe:	4b21      	ldr	r3, [pc, #132]	; (8008084 <SysTick_Handler+0xc4>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2bc8      	cmp	r3, #200	; 0xc8
 8008004:	d913      	bls.n	800802e <SysTick_Handler+0x6e>
 8008006:	e002      	b.n	800800e <SysTick_Handler+0x4e>
	  screen0x99();
 8008008:	f7ff f95c 	bl	80072c4 <screen0x99>
	  while(1);
 800800c:	e7fe      	b.n	800800c <SysTick_Handler+0x4c>
  {
	  rxidlecnt = 0;
 800800e:	4b1d      	ldr	r3, [pc, #116]	; (8008084 <SysTick_Handler+0xc4>)
 8008010:	2200      	movs	r2, #0
 8008012:	701a      	strb	r2, [r3, #0]
	  HAL_UART_AbortReceive_IT(&huart3);
 8008014:	481c      	ldr	r0, [pc, #112]	; (8008088 <SysTick_Handler+0xc8>)
 8008016:	f002 f917 	bl	800a248 <HAL_UART_AbortReceive_IT>
	  if(HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 2) != HAL_OK)     // please see the length = 2
 800801a:	2202      	movs	r2, #2
 800801c:	491b      	ldr	r1, [pc, #108]	; (800808c <SysTick_Handler+0xcc>)
 800801e:	481a      	ldr	r0, [pc, #104]	; (8008088 <SysTick_Handler+0xc8>)
 8008020:	f002 f8ed 	bl	800a1fe <HAL_UART_Receive_IT>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <SysTick_Handler+0x6e>
	  	Error_Handler();
 800802a:	f7ff fea9 	bl	8007d80 <Error_Handler>
  }

	if (mtflag){
 800802e:	4b18      	ldr	r3, [pc, #96]	; (8008090 <SysTick_Handler+0xd0>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d01e      	beq.n	8008074 <SysTick_Handler+0xb4>
	  multiTime++;
 8008036:	4b17      	ldr	r3, [pc, #92]	; (8008094 <SysTick_Handler+0xd4>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3301      	adds	r3, #1
 800803c:	4a15      	ldr	r2, [pc, #84]	; (8008094 <SysTick_Handler+0xd4>)
 800803e:	6013      	str	r3, [r2, #0]
	  if(multiTime >= multiLength[currentIndex]){
 8008040:	4b15      	ldr	r3, [pc, #84]	; (8008098 <SysTick_Handler+0xd8>)
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	461a      	mov	r2, r3
 8008046:	4b15      	ldr	r3, [pc, #84]	; (800809c <SysTick_Handler+0xdc>)
 8008048:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800804c:	4b11      	ldr	r3, [pc, #68]	; (8008094 <SysTick_Handler+0xd4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	429a      	cmp	r2, r3
 8008052:	d80f      	bhi.n	8008074 <SysTick_Handler+0xb4>
		  multiTime = 0;
 8008054:	4b0f      	ldr	r3, [pc, #60]	; (8008094 <SysTick_Handler+0xd4>)
 8008056:	2200      	movs	r2, #0
 8008058:	601a      	str	r2, [r3, #0]
		  currentIndex = (currentIndex == 0?1:0);
 800805a:	4b0f      	ldr	r3, [pc, #60]	; (8008098 <SysTick_Handler+0xd8>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	bf0c      	ite	eq
 8008062:	2301      	moveq	r3, #1
 8008064:	2300      	movne	r3, #0
 8008066:	b2db      	uxtb	r3, r3
 8008068:	461a      	mov	r2, r3
 800806a:	4b0b      	ldr	r3, [pc, #44]	; (8008098 <SysTick_Handler+0xd8>)
 800806c:	701a      	strb	r2, [r3, #0]
		  currentTask = TASK_MULTI;
 800806e:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <SysTick_Handler+0xe0>)
 8008070:	2205      	movs	r2, #5
 8008072:	701a      	strb	r2, [r3, #0]
	  }
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8008074:	bf00      	nop
 8008076:	bd80      	pop	{r7, pc}
 8008078:	20000814 	.word	0x20000814
 800807c:	20000904 	.word	0x20000904
 8008080:	0a4cb800 	.word	0x0a4cb800
 8008084:	20000818 	.word	0x20000818
 8008088:	200008bc 	.word	0x200008bc
 800808c:	200000a0 	.word	0x200000a0
 8008090:	200007ff 	.word	0x200007ff
 8008094:	20000808 	.word	0x20000808
 8008098:	20000800 	.word	0x20000800
 800809c:	2000080c 	.word	0x2000080c
 80080a0:	200007fa 	.word	0x200007fa

080080a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	idleTime = 0;
 80080a8:	4b05      	ldr	r3, [pc, #20]	; (80080c0 <USART3_IRQHandler+0x1c>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	601a      	str	r2, [r3, #0]
	rxidlecnt = 0;
 80080ae:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <USART3_IRQHandler+0x20>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80080b4:	4804      	ldr	r0, [pc, #16]	; (80080c8 <USART3_IRQHandler+0x24>)
 80080b6:	f002 f979 	bl	800a3ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80080ba:	bf00      	nop
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20000814 	.word	0x20000814
 80080c4:	20000818 	.word	0x20000818
 80080c8:	200008bc 	.word	0x200008bc

080080cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80080cc:	b480      	push	{r7}
 80080ce:	af00      	add	r7, sp, #0
  return 1;
 80080d0:	2301      	movs	r3, #1
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <_kill>:

int _kill(int pid, int sig)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80080e6:	f003 fa41 	bl	800b56c <__errno>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2216      	movs	r2, #22
 80080ee:	601a      	str	r2, [r3, #0]
  return -1;
 80080f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <_exit>:

void _exit (int status)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008104:	f04f 31ff 	mov.w	r1, #4294967295
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff ffe7 	bl	80080dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800810e:	e7fe      	b.n	800810e <_exit+0x12>

08008110 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800811c:	2300      	movs	r3, #0
 800811e:	617b      	str	r3, [r7, #20]
 8008120:	e00a      	b.n	8008138 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008122:	f3af 8000 	nop.w
 8008126:	4601      	mov	r1, r0
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	60ba      	str	r2, [r7, #8]
 800812e:	b2ca      	uxtb	r2, r1
 8008130:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	3301      	adds	r3, #1
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	429a      	cmp	r2, r3
 800813e:	dbf0      	blt.n	8008122 <_read+0x12>
  }

  return len;
 8008140:	687b      	ldr	r3, [r7, #4]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b086      	sub	sp, #24
 800814e:	af00      	add	r7, sp, #0
 8008150:	60f8      	str	r0, [r7, #12]
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008156:	2300      	movs	r3, #0
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	e009      	b.n	8008170 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	60ba      	str	r2, [r7, #8]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	4618      	mov	r0, r3
 8008166:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	3301      	adds	r3, #1
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	429a      	cmp	r2, r3
 8008176:	dbf1      	blt.n	800815c <_write+0x12>
  }
  return len;
 8008178:	687b      	ldr	r3, [r7, #4]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <_close>:

int _close(int file)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800818a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800818e:	4618      	mov	r0, r3
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800819a:	b480      	push	{r7}
 800819c:	b083      	sub	sp, #12
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80081aa:	605a      	str	r2, [r3, #4]
  return 0;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <_isatty>:

int _isatty(int file)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80081c2:	2301      	movs	r3, #1
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
	...

080081ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80081f4:	4a14      	ldr	r2, [pc, #80]	; (8008248 <_sbrk+0x5c>)
 80081f6:	4b15      	ldr	r3, [pc, #84]	; (800824c <_sbrk+0x60>)
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008200:	4b13      	ldr	r3, [pc, #76]	; (8008250 <_sbrk+0x64>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d102      	bne.n	800820e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008208:	4b11      	ldr	r3, [pc, #68]	; (8008250 <_sbrk+0x64>)
 800820a:	4a12      	ldr	r2, [pc, #72]	; (8008254 <_sbrk+0x68>)
 800820c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800820e:	4b10      	ldr	r3, [pc, #64]	; (8008250 <_sbrk+0x64>)
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4413      	add	r3, r2
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	429a      	cmp	r2, r3
 800821a:	d207      	bcs.n	800822c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800821c:	f003 f9a6 	bl	800b56c <__errno>
 8008220:	4603      	mov	r3, r0
 8008222:	220c      	movs	r2, #12
 8008224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008226:	f04f 33ff 	mov.w	r3, #4294967295
 800822a:	e009      	b.n	8008240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800822c:	4b08      	ldr	r3, [pc, #32]	; (8008250 <_sbrk+0x64>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008232:	4b07      	ldr	r3, [pc, #28]	; (8008250 <_sbrk+0x64>)
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4413      	add	r3, r2
 800823a:	4a05      	ldr	r2, [pc, #20]	; (8008250 <_sbrk+0x64>)
 800823c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800823e:	68fb      	ldr	r3, [r7, #12]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	20020000 	.word	0x20020000
 800824c:	00000400 	.word	0x00000400
 8008250:	20000908 	.word	0x20000908
 8008254:	20000a60 	.word	0x20000a60

08008258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008258:	b480      	push	{r7}
 800825a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800825c:	4b06      	ldr	r3, [pc, #24]	; (8008278 <SystemInit+0x20>)
 800825e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008262:	4a05      	ldr	r2, [pc, #20]	; (8008278 <SystemInit+0x20>)
 8008264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800826c:	bf00      	nop
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	e000ed00 	.word	0xe000ed00

0800827c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 800827c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80082b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008280:	f7ff ffea 	bl	8008258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008284:	480c      	ldr	r0, [pc, #48]	; (80082b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008286:	490d      	ldr	r1, [pc, #52]	; (80082bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008288:	4a0d      	ldr	r2, [pc, #52]	; (80082c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800828a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800828c:	e002      	b.n	8008294 <LoopCopyDataInit>

0800828e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800828e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008292:	3304      	adds	r3, #4

08008294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008298:	d3f9      	bcc.n	800828e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800829a:	4a0a      	ldr	r2, [pc, #40]	; (80082c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800829c:	4c0a      	ldr	r4, [pc, #40]	; (80082c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800829e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80082a0:	e001      	b.n	80082a6 <LoopFillZerobss>

080082a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80082a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80082a4:	3204      	adds	r2, #4

080082a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80082a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80082a8:	d3fb      	bcc.n	80082a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80082aa:	f003 f965 	bl	800b578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80082ae:	f7ff fb6f 	bl	8007990 <main>
  bx  lr    
 80082b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80082b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80082b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80082bc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80082c0:	0806e52c 	.word	0x0806e52c
  ldr r2, =_sbss
 80082c4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80082c8:	20000a5c 	.word	0x20000a5c

080082cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80082cc:	e7fe      	b.n	80082cc <ADC_IRQHandler>
	...

080082d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80082d4:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <HAL_Init+0x40>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a0d      	ldr	r2, [pc, #52]	; (8008310 <HAL_Init+0x40>)
 80082da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80082e0:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <HAL_Init+0x40>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a0a      	ldr	r2, [pc, #40]	; (8008310 <HAL_Init+0x40>)
 80082e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80082ec:	4b08      	ldr	r3, [pc, #32]	; (8008310 <HAL_Init+0x40>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a07      	ldr	r2, [pc, #28]	; (8008310 <HAL_Init+0x40>)
 80082f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082f8:	2003      	movs	r0, #3
 80082fa:	f000 f94f 	bl	800859c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80082fe:	2000      	movs	r0, #0
 8008300:	f000 f808 	bl	8008314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008304:	f7ff fd42 	bl	8007d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	40023c00 	.word	0x40023c00

08008314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800831c:	4b12      	ldr	r3, [pc, #72]	; (8008368 <HAL_InitTick+0x54>)
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	4b12      	ldr	r3, [pc, #72]	; (800836c <HAL_InitTick+0x58>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	4619      	mov	r1, r3
 8008326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800832a:	fbb3 f3f1 	udiv	r3, r3, r1
 800832e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008332:	4618      	mov	r0, r3
 8008334:	f000 f967 	bl	8008606 <HAL_SYSTICK_Config>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e00e      	b.n	8008360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b0f      	cmp	r3, #15
 8008346:	d80a      	bhi.n	800835e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008348:	2200      	movs	r2, #0
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	f04f 30ff 	mov.w	r0, #4294967295
 8008350:	f000 f92f 	bl	80085b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008354:	4a06      	ldr	r2, [pc, #24]	; (8008370 <HAL_InitTick+0x5c>)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	e000      	b.n	8008360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
}
 8008360:	4618      	mov	r0, r3
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	2000001c 	.word	0x2000001c
 800836c:	20000024 	.word	0x20000024
 8008370:	20000020 	.word	0x20000020

08008374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008378:	4b06      	ldr	r3, [pc, #24]	; (8008394 <HAL_IncTick+0x20>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
 800837e:	4b06      	ldr	r3, [pc, #24]	; (8008398 <HAL_IncTick+0x24>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4413      	add	r3, r2
 8008384:	4a04      	ldr	r2, [pc, #16]	; (8008398 <HAL_IncTick+0x24>)
 8008386:	6013      	str	r3, [r2, #0]
}
 8008388:	bf00      	nop
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	20000024 	.word	0x20000024
 8008398:	2000090c 	.word	0x2000090c

0800839c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
  return uwTick;
 80083a0:	4b03      	ldr	r3, [pc, #12]	; (80083b0 <HAL_GetTick+0x14>)
 80083a2:	681b      	ldr	r3, [r3, #0]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	2000090c 	.word	0x2000090c

080083b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80083bc:	f7ff ffee 	bl	800839c <HAL_GetTick>
 80083c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083cc:	d005      	beq.n	80083da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80083ce:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <HAL_Delay+0x44>)
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4413      	add	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80083da:	bf00      	nop
 80083dc:	f7ff ffde 	bl	800839c <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d8f7      	bhi.n	80083dc <HAL_Delay+0x28>
  {
  }
}
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000024 	.word	0x20000024

080083fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800840c:	4b0c      	ldr	r3, [pc, #48]	; (8008440 <__NVIC_SetPriorityGrouping+0x44>)
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008418:	4013      	ands	r3, r2
 800841a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800842c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800842e:	4a04      	ldr	r2, [pc, #16]	; (8008440 <__NVIC_SetPriorityGrouping+0x44>)
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	60d3      	str	r3, [r2, #12]
}
 8008434:	bf00      	nop
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	e000ed00 	.word	0xe000ed00

08008444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008448:	4b04      	ldr	r3, [pc, #16]	; (800845c <__NVIC_GetPriorityGrouping+0x18>)
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	0a1b      	lsrs	r3, r3, #8
 800844e:	f003 0307 	and.w	r3, r3, #7
}
 8008452:	4618      	mov	r0, r3
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	e000ed00 	.word	0xe000ed00

08008460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800846a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800846e:	2b00      	cmp	r3, #0
 8008470:	db0b      	blt.n	800848a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008472:	79fb      	ldrb	r3, [r7, #7]
 8008474:	f003 021f 	and.w	r2, r3, #31
 8008478:	4907      	ldr	r1, [pc, #28]	; (8008498 <__NVIC_EnableIRQ+0x38>)
 800847a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800847e:	095b      	lsrs	r3, r3, #5
 8008480:	2001      	movs	r0, #1
 8008482:	fa00 f202 	lsl.w	r2, r0, r2
 8008486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800848a:	bf00      	nop
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	e000e100 	.word	0xe000e100

0800849c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	4603      	mov	r3, r0
 80084a4:	6039      	str	r1, [r7, #0]
 80084a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	db0a      	blt.n	80084c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	490c      	ldr	r1, [pc, #48]	; (80084e8 <__NVIC_SetPriority+0x4c>)
 80084b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084ba:	0112      	lsls	r2, r2, #4
 80084bc:	b2d2      	uxtb	r2, r2
 80084be:	440b      	add	r3, r1
 80084c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80084c4:	e00a      	b.n	80084dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	4908      	ldr	r1, [pc, #32]	; (80084ec <__NVIC_SetPriority+0x50>)
 80084cc:	79fb      	ldrb	r3, [r7, #7]
 80084ce:	f003 030f 	and.w	r3, r3, #15
 80084d2:	3b04      	subs	r3, #4
 80084d4:	0112      	lsls	r2, r2, #4
 80084d6:	b2d2      	uxtb	r2, r2
 80084d8:	440b      	add	r3, r1
 80084da:	761a      	strb	r2, [r3, #24]
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	e000e100 	.word	0xe000e100
 80084ec:	e000ed00 	.word	0xe000ed00

080084f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b089      	sub	sp, #36	; 0x24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f003 0307 	and.w	r3, r3, #7
 8008502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	f1c3 0307 	rsb	r3, r3, #7
 800850a:	2b04      	cmp	r3, #4
 800850c:	bf28      	it	cs
 800850e:	2304      	movcs	r3, #4
 8008510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	3304      	adds	r3, #4
 8008516:	2b06      	cmp	r3, #6
 8008518:	d902      	bls.n	8008520 <NVIC_EncodePriority+0x30>
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	3b03      	subs	r3, #3
 800851e:	e000      	b.n	8008522 <NVIC_EncodePriority+0x32>
 8008520:	2300      	movs	r3, #0
 8008522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008524:	f04f 32ff 	mov.w	r2, #4294967295
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	fa02 f303 	lsl.w	r3, r2, r3
 800852e:	43da      	mvns	r2, r3
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	401a      	ands	r2, r3
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008538:	f04f 31ff 	mov.w	r1, #4294967295
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	fa01 f303 	lsl.w	r3, r1, r3
 8008542:	43d9      	mvns	r1, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008548:	4313      	orrs	r3, r2
         );
}
 800854a:	4618      	mov	r0, r3
 800854c:	3724      	adds	r7, #36	; 0x24
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
	...

08008558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3b01      	subs	r3, #1
 8008564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008568:	d301      	bcc.n	800856e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800856a:	2301      	movs	r3, #1
 800856c:	e00f      	b.n	800858e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800856e:	4a0a      	ldr	r2, [pc, #40]	; (8008598 <SysTick_Config+0x40>)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3b01      	subs	r3, #1
 8008574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008576:	210f      	movs	r1, #15
 8008578:	f04f 30ff 	mov.w	r0, #4294967295
 800857c:	f7ff ff8e 	bl	800849c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008580:	4b05      	ldr	r3, [pc, #20]	; (8008598 <SysTick_Config+0x40>)
 8008582:	2200      	movs	r2, #0
 8008584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008586:	4b04      	ldr	r3, [pc, #16]	; (8008598 <SysTick_Config+0x40>)
 8008588:	2207      	movs	r2, #7
 800858a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	e000e010 	.word	0xe000e010

0800859c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7ff ff29 	bl	80083fc <__NVIC_SetPriorityGrouping>
}
 80085aa:	bf00      	nop
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b086      	sub	sp, #24
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	4603      	mov	r3, r0
 80085ba:	60b9      	str	r1, [r7, #8]
 80085bc:	607a      	str	r2, [r7, #4]
 80085be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80085c4:	f7ff ff3e 	bl	8008444 <__NVIC_GetPriorityGrouping>
 80085c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	6978      	ldr	r0, [r7, #20]
 80085d0:	f7ff ff8e 	bl	80084f0 <NVIC_EncodePriority>
 80085d4:	4602      	mov	r2, r0
 80085d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085da:	4611      	mov	r1, r2
 80085dc:	4618      	mov	r0, r3
 80085de:	f7ff ff5d 	bl	800849c <__NVIC_SetPriority>
}
 80085e2:	bf00      	nop
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	4603      	mov	r3, r0
 80085f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80085f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7ff ff31 	bl	8008460 <__NVIC_EnableIRQ>
}
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7ff ffa2 	bl	8008558 <SysTick_Config>
 8008614:	4603      	mov	r3, r0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800862a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800862c:	f7ff feb6 	bl	800839c <HAL_GetTick>
 8008630:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d008      	beq.n	8008650 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2280      	movs	r2, #128	; 0x80
 8008642:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e052      	b.n	80086f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f022 0216 	bic.w	r2, r2, #22
 800865e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	695a      	ldr	r2, [r3, #20]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800866e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	d103      	bne.n	8008680 <HAL_DMA_Abort+0x62>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800867c:	2b00      	cmp	r3, #0
 800867e:	d007      	beq.n	8008690 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0208 	bic.w	r2, r2, #8
 800868e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0201 	bic.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086a0:	e013      	b.n	80086ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80086a2:	f7ff fe7b 	bl	800839c <HAL_GetTick>
 80086a6:	4602      	mov	r2, r0
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	2b05      	cmp	r3, #5
 80086ae:	d90c      	bls.n	80086ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2220      	movs	r2, #32
 80086b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2203      	movs	r2, #3
 80086ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e015      	b.n	80086f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1e4      	bne.n	80086a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086dc:	223f      	movs	r2, #63	; 0x3f
 80086de:	409a      	lsls	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80086fe:	b480      	push	{r7}
 8008700:	b083      	sub	sp, #12
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b02      	cmp	r3, #2
 8008710:	d004      	beq.n	800871c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2280      	movs	r2, #128	; 0x80
 8008716:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e00c      	b.n	8008736 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2205      	movs	r2, #5
 8008720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0201 	bic.w	r2, r2, #1
 8008732:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
	...

08008744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008744:	b480      	push	{r7}
 8008746:	b089      	sub	sp, #36	; 0x24
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800874e:	2300      	movs	r3, #0
 8008750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008752:	2300      	movs	r3, #0
 8008754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008756:	2300      	movs	r3, #0
 8008758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800875a:	2300      	movs	r3, #0
 800875c:	61fb      	str	r3, [r7, #28]
 800875e:	e165      	b.n	8008a2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008760:	2201      	movs	r2, #1
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	fa02 f303 	lsl.w	r3, r2, r3
 8008768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	4013      	ands	r3, r2
 8008772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	429a      	cmp	r2, r3
 800877a:	f040 8154 	bne.w	8008a26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	2b01      	cmp	r3, #1
 8008788:	d005      	beq.n	8008796 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008792:	2b02      	cmp	r3, #2
 8008794:	d130      	bne.n	80087f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	005b      	lsls	r3, r3, #1
 80087a0:	2203      	movs	r2, #3
 80087a2:	fa02 f303 	lsl.w	r3, r2, r3
 80087a6:	43db      	mvns	r3, r3
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	4013      	ands	r3, r2
 80087ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68da      	ldr	r2, [r3, #12]
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	4313      	orrs	r3, r2
 80087be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80087cc:	2201      	movs	r2, #1
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	fa02 f303 	lsl.w	r3, r2, r3
 80087d4:	43db      	mvns	r3, r3
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	4013      	ands	r3, r2
 80087da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	091b      	lsrs	r3, r3, #4
 80087e2:	f003 0201 	and.w	r2, r3, #1
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	fa02 f303 	lsl.w	r3, r2, r3
 80087ec:	69ba      	ldr	r2, [r7, #24]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f003 0303 	and.w	r3, r3, #3
 8008800:	2b03      	cmp	r3, #3
 8008802:	d017      	beq.n	8008834 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	2203      	movs	r2, #3
 8008810:	fa02 f303 	lsl.w	r3, r2, r3
 8008814:	43db      	mvns	r3, r3
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	4013      	ands	r3, r2
 800881a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	689a      	ldr	r2, [r3, #8]
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	fa02 f303 	lsl.w	r3, r2, r3
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	4313      	orrs	r3, r2
 800882c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	2b02      	cmp	r3, #2
 800883e:	d123      	bne.n	8008888 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	08da      	lsrs	r2, r3, #3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3208      	adds	r2, #8
 8008848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	f003 0307 	and.w	r3, r3, #7
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	220f      	movs	r2, #15
 8008858:	fa02 f303 	lsl.w	r3, r2, r3
 800885c:	43db      	mvns	r3, r3
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	4013      	ands	r3, r2
 8008862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	691a      	ldr	r2, [r3, #16]
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	f003 0307 	and.w	r3, r3, #7
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	fa02 f303 	lsl.w	r3, r2, r3
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	4313      	orrs	r3, r2
 8008878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	08da      	lsrs	r2, r3, #3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	3208      	adds	r2, #8
 8008882:	69b9      	ldr	r1, [r7, #24]
 8008884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	2203      	movs	r2, #3
 8008894:	fa02 f303 	lsl.w	r3, r2, r3
 8008898:	43db      	mvns	r3, r3
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	4013      	ands	r3, r2
 800889e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	f003 0203 	and.w	r2, r3, #3
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	005b      	lsls	r3, r3, #1
 80088ac:	fa02 f303 	lsl.w	r3, r2, r3
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 80ae 	beq.w	8008a26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088ca:	2300      	movs	r3, #0
 80088cc:	60fb      	str	r3, [r7, #12]
 80088ce:	4b5d      	ldr	r3, [pc, #372]	; (8008a44 <HAL_GPIO_Init+0x300>)
 80088d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d2:	4a5c      	ldr	r2, [pc, #368]	; (8008a44 <HAL_GPIO_Init+0x300>)
 80088d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088d8:	6453      	str	r3, [r2, #68]	; 0x44
 80088da:	4b5a      	ldr	r3, [pc, #360]	; (8008a44 <HAL_GPIO_Init+0x300>)
 80088dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80088e6:	4a58      	ldr	r2, [pc, #352]	; (8008a48 <HAL_GPIO_Init+0x304>)
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	089b      	lsrs	r3, r3, #2
 80088ec:	3302      	adds	r3, #2
 80088ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	f003 0303 	and.w	r3, r3, #3
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	220f      	movs	r2, #15
 80088fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008902:	43db      	mvns	r3, r3
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	4013      	ands	r3, r2
 8008908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a4f      	ldr	r2, [pc, #316]	; (8008a4c <HAL_GPIO_Init+0x308>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d025      	beq.n	800895e <HAL_GPIO_Init+0x21a>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a4e      	ldr	r2, [pc, #312]	; (8008a50 <HAL_GPIO_Init+0x30c>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d01f      	beq.n	800895a <HAL_GPIO_Init+0x216>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a4d      	ldr	r2, [pc, #308]	; (8008a54 <HAL_GPIO_Init+0x310>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d019      	beq.n	8008956 <HAL_GPIO_Init+0x212>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a4c      	ldr	r2, [pc, #304]	; (8008a58 <HAL_GPIO_Init+0x314>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d013      	beq.n	8008952 <HAL_GPIO_Init+0x20e>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a4b      	ldr	r2, [pc, #300]	; (8008a5c <HAL_GPIO_Init+0x318>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d00d      	beq.n	800894e <HAL_GPIO_Init+0x20a>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a4a      	ldr	r2, [pc, #296]	; (8008a60 <HAL_GPIO_Init+0x31c>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d007      	beq.n	800894a <HAL_GPIO_Init+0x206>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a49      	ldr	r2, [pc, #292]	; (8008a64 <HAL_GPIO_Init+0x320>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d101      	bne.n	8008946 <HAL_GPIO_Init+0x202>
 8008942:	2306      	movs	r3, #6
 8008944:	e00c      	b.n	8008960 <HAL_GPIO_Init+0x21c>
 8008946:	2307      	movs	r3, #7
 8008948:	e00a      	b.n	8008960 <HAL_GPIO_Init+0x21c>
 800894a:	2305      	movs	r3, #5
 800894c:	e008      	b.n	8008960 <HAL_GPIO_Init+0x21c>
 800894e:	2304      	movs	r3, #4
 8008950:	e006      	b.n	8008960 <HAL_GPIO_Init+0x21c>
 8008952:	2303      	movs	r3, #3
 8008954:	e004      	b.n	8008960 <HAL_GPIO_Init+0x21c>
 8008956:	2302      	movs	r3, #2
 8008958:	e002      	b.n	8008960 <HAL_GPIO_Init+0x21c>
 800895a:	2301      	movs	r3, #1
 800895c:	e000      	b.n	8008960 <HAL_GPIO_Init+0x21c>
 800895e:	2300      	movs	r3, #0
 8008960:	69fa      	ldr	r2, [r7, #28]
 8008962:	f002 0203 	and.w	r2, r2, #3
 8008966:	0092      	lsls	r2, r2, #2
 8008968:	4093      	lsls	r3, r2
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	4313      	orrs	r3, r2
 800896e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008970:	4935      	ldr	r1, [pc, #212]	; (8008a48 <HAL_GPIO_Init+0x304>)
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	089b      	lsrs	r3, r3, #2
 8008976:	3302      	adds	r3, #2
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800897e:	4b3a      	ldr	r3, [pc, #232]	; (8008a68 <HAL_GPIO_Init+0x324>)
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	43db      	mvns	r3, r3
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	4013      	ands	r3, r2
 800898c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80089a2:	4a31      	ldr	r2, [pc, #196]	; (8008a68 <HAL_GPIO_Init+0x324>)
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80089a8:	4b2f      	ldr	r3, [pc, #188]	; (8008a68 <HAL_GPIO_Init+0x324>)
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	43db      	mvns	r3, r3
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	4013      	ands	r3, r2
 80089b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d003      	beq.n	80089cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80089cc:	4a26      	ldr	r2, [pc, #152]	; (8008a68 <HAL_GPIO_Init+0x324>)
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80089d2:	4b25      	ldr	r3, [pc, #148]	; (8008a68 <HAL_GPIO_Init+0x324>)
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	43db      	mvns	r3, r3
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	4013      	ands	r3, r2
 80089e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d003      	beq.n	80089f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80089f6:	4a1c      	ldr	r2, [pc, #112]	; (8008a68 <HAL_GPIO_Init+0x324>)
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80089fc:	4b1a      	ldr	r3, [pc, #104]	; (8008a68 <HAL_GPIO_Init+0x324>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	43db      	mvns	r3, r3
 8008a06:	69ba      	ldr	r2, [r7, #24]
 8008a08:	4013      	ands	r3, r2
 8008a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008a20:	4a11      	ldr	r2, [pc, #68]	; (8008a68 <HAL_GPIO_Init+0x324>)
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	61fb      	str	r3, [r7, #28]
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	2b0f      	cmp	r3, #15
 8008a30:	f67f ae96 	bls.w	8008760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop
 8008a38:	3724      	adds	r7, #36	; 0x24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	40023800 	.word	0x40023800
 8008a48:	40013800 	.word	0x40013800
 8008a4c:	40020000 	.word	0x40020000
 8008a50:	40020400 	.word	0x40020400
 8008a54:	40020800 	.word	0x40020800
 8008a58:	40020c00 	.word	0x40020c00
 8008a5c:	40021000 	.word	0x40021000
 8008a60:	40021400 	.word	0x40021400
 8008a64:	40021800 	.word	0x40021800
 8008a68:	40013c00 	.word	0x40013c00

08008a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	691a      	ldr	r2, [r3, #16]
 8008a7c:	887b      	ldrh	r3, [r7, #2]
 8008a7e:	4013      	ands	r3, r2
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008a84:	2301      	movs	r3, #1
 8008a86:	73fb      	strb	r3, [r7, #15]
 8008a88:	e001      	b.n	8008a8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	807b      	strh	r3, [r7, #2]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008aac:	787b      	ldrb	r3, [r7, #1]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ab2:	887a      	ldrh	r2, [r7, #2]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008ab8:	e003      	b.n	8008ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008aba:	887b      	ldrh	r3, [r7, #2]
 8008abc:	041a      	lsls	r2, r3, #16
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	619a      	str	r2, [r3, #24]
}
 8008ac2:	bf00      	nop
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
	...

08008ad0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008ada:	2300      	movs	r3, #0
 8008adc:	603b      	str	r3, [r7, #0]
 8008ade:	4b20      	ldr	r3, [pc, #128]	; (8008b60 <HAL_PWREx_EnableOverDrive+0x90>)
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae2:	4a1f      	ldr	r2, [pc, #124]	; (8008b60 <HAL_PWREx_EnableOverDrive+0x90>)
 8008ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8008aea:	4b1d      	ldr	r3, [pc, #116]	; (8008b60 <HAL_PWREx_EnableOverDrive+0x90>)
 8008aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008af2:	603b      	str	r3, [r7, #0]
 8008af4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008af6:	4b1b      	ldr	r3, [pc, #108]	; (8008b64 <HAL_PWREx_EnableOverDrive+0x94>)
 8008af8:	2201      	movs	r2, #1
 8008afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008afc:	f7ff fc4e 	bl	800839c <HAL_GetTick>
 8008b00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008b02:	e009      	b.n	8008b18 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008b04:	f7ff fc4a 	bl	800839c <HAL_GetTick>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b12:	d901      	bls.n	8008b18 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e01f      	b.n	8008b58 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008b18:	4b13      	ldr	r3, [pc, #76]	; (8008b68 <HAL_PWREx_EnableOverDrive+0x98>)
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b24:	d1ee      	bne.n	8008b04 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008b26:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b28:	2201      	movs	r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b2c:	f7ff fc36 	bl	800839c <HAL_GetTick>
 8008b30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008b32:	e009      	b.n	8008b48 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008b34:	f7ff fc32 	bl	800839c <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b42:	d901      	bls.n	8008b48 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e007      	b.n	8008b58 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008b48:	4b07      	ldr	r3, [pc, #28]	; (8008b68 <HAL_PWREx_EnableOverDrive+0x98>)
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b54:	d1ee      	bne.n	8008b34 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	40023800 	.word	0x40023800
 8008b64:	420e0040 	.word	0x420e0040
 8008b68:	40007000 	.word	0x40007000
 8008b6c:	420e0044 	.word	0x420e0044

08008b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e0cc      	b.n	8008d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b84:	4b68      	ldr	r3, [pc, #416]	; (8008d28 <HAL_RCC_ClockConfig+0x1b8>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 030f 	and.w	r3, r3, #15
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d90c      	bls.n	8008bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b92:	4b65      	ldr	r3, [pc, #404]	; (8008d28 <HAL_RCC_ClockConfig+0x1b8>)
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	b2d2      	uxtb	r2, r2
 8008b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b9a:	4b63      	ldr	r3, [pc, #396]	; (8008d28 <HAL_RCC_ClockConfig+0x1b8>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 030f 	and.w	r3, r3, #15
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d001      	beq.n	8008bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e0b8      	b.n	8008d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0302 	and.w	r3, r3, #2
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d020      	beq.n	8008bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 0304 	and.w	r3, r3, #4
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d005      	beq.n	8008bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bc4:	4b59      	ldr	r3, [pc, #356]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	4a58      	ldr	r2, [pc, #352]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0308 	and.w	r3, r3, #8
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d005      	beq.n	8008be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008bdc:	4b53      	ldr	r3, [pc, #332]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	4a52      	ldr	r2, [pc, #328]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008be8:	4b50      	ldr	r3, [pc, #320]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	494d      	ldr	r1, [pc, #308]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d044      	beq.n	8008c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d107      	bne.n	8008c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c0e:	4b47      	ldr	r3, [pc, #284]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d119      	bne.n	8008c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e07f      	b.n	8008d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d003      	beq.n	8008c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d107      	bne.n	8008c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c2e:	4b3f      	ldr	r3, [pc, #252]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d109      	bne.n	8008c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e06f      	b.n	8008d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c3e:	4b3b      	ldr	r3, [pc, #236]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0302 	and.w	r3, r3, #2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e067      	b.n	8008d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c4e:	4b37      	ldr	r3, [pc, #220]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f023 0203 	bic.w	r2, r3, #3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	4934      	ldr	r1, [pc, #208]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c60:	f7ff fb9c 	bl	800839c <HAL_GetTick>
 8008c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c66:	e00a      	b.n	8008c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c68:	f7ff fb98 	bl	800839c <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d901      	bls.n	8008c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	e04f      	b.n	8008d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c7e:	4b2b      	ldr	r3, [pc, #172]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f003 020c 	and.w	r2, r3, #12
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d1eb      	bne.n	8008c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c90:	4b25      	ldr	r3, [pc, #148]	; (8008d28 <HAL_RCC_ClockConfig+0x1b8>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 030f 	and.w	r3, r3, #15
 8008c98:	683a      	ldr	r2, [r7, #0]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d20c      	bcs.n	8008cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c9e:	4b22      	ldr	r3, [pc, #136]	; (8008d28 <HAL_RCC_ClockConfig+0x1b8>)
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	b2d2      	uxtb	r2, r2
 8008ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ca6:	4b20      	ldr	r3, [pc, #128]	; (8008d28 <HAL_RCC_ClockConfig+0x1b8>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d001      	beq.n	8008cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e032      	b.n	8008d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d008      	beq.n	8008cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cc4:	4b19      	ldr	r3, [pc, #100]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	4916      	ldr	r1, [pc, #88]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0308 	and.w	r3, r3, #8
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d009      	beq.n	8008cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ce2:	4b12      	ldr	r3, [pc, #72]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	490e      	ldr	r1, [pc, #56]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008cf6:	f000 f855 	bl	8008da4 <HAL_RCC_GetSysClockFreq>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	4b0b      	ldr	r3, [pc, #44]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	091b      	lsrs	r3, r3, #4
 8008d02:	f003 030f 	and.w	r3, r3, #15
 8008d06:	490a      	ldr	r1, [pc, #40]	; (8008d30 <HAL_RCC_ClockConfig+0x1c0>)
 8008d08:	5ccb      	ldrb	r3, [r1, r3]
 8008d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d0e:	4a09      	ldr	r2, [pc, #36]	; (8008d34 <HAL_RCC_ClockConfig+0x1c4>)
 8008d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d12:	4b09      	ldr	r3, [pc, #36]	; (8008d38 <HAL_RCC_ClockConfig+0x1c8>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff fafc 	bl	8008314 <HAL_InitTick>

  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	40023c00 	.word	0x40023c00
 8008d2c:	40023800 	.word	0x40023800
 8008d30:	0806e424 	.word	0x0806e424
 8008d34:	2000001c 	.word	0x2000001c
 8008d38:	20000020 	.word	0x20000020

08008d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d40:	4b03      	ldr	r3, [pc, #12]	; (8008d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d42:	681b      	ldr	r3, [r3, #0]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	2000001c 	.word	0x2000001c

08008d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d58:	f7ff fff0 	bl	8008d3c <HAL_RCC_GetHCLKFreq>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	0a9b      	lsrs	r3, r3, #10
 8008d64:	f003 0307 	and.w	r3, r3, #7
 8008d68:	4903      	ldr	r1, [pc, #12]	; (8008d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d6a:	5ccb      	ldrb	r3, [r1, r3]
 8008d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	40023800 	.word	0x40023800
 8008d78:	0806e434 	.word	0x0806e434

08008d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d80:	f7ff ffdc 	bl	8008d3c <HAL_RCC_GetHCLKFreq>
 8008d84:	4602      	mov	r2, r0
 8008d86:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	0b5b      	lsrs	r3, r3, #13
 8008d8c:	f003 0307 	and.w	r3, r3, #7
 8008d90:	4903      	ldr	r1, [pc, #12]	; (8008da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d92:	5ccb      	ldrb	r3, [r1, r3]
 8008d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	40023800 	.word	0x40023800
 8008da0:	0806e434 	.word	0x0806e434

08008da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008da8:	b0ae      	sub	sp, #184	; 0xb8
 8008daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8008db8:	2300      	movs	r3, #0
 8008dba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008dca:	4bcb      	ldr	r3, [pc, #812]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f003 030c 	and.w	r3, r3, #12
 8008dd2:	2b0c      	cmp	r3, #12
 8008dd4:	f200 8206 	bhi.w	80091e4 <HAL_RCC_GetSysClockFreq+0x440>
 8008dd8:	a201      	add	r2, pc, #4	; (adr r2, 8008de0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dde:	bf00      	nop
 8008de0:	08008e15 	.word	0x08008e15
 8008de4:	080091e5 	.word	0x080091e5
 8008de8:	080091e5 	.word	0x080091e5
 8008dec:	080091e5 	.word	0x080091e5
 8008df0:	08008e1d 	.word	0x08008e1d
 8008df4:	080091e5 	.word	0x080091e5
 8008df8:	080091e5 	.word	0x080091e5
 8008dfc:	080091e5 	.word	0x080091e5
 8008e00:	08008e25 	.word	0x08008e25
 8008e04:	080091e5 	.word	0x080091e5
 8008e08:	080091e5 	.word	0x080091e5
 8008e0c:	080091e5 	.word	0x080091e5
 8008e10:	08009015 	.word	0x08009015
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e14:	4bb9      	ldr	r3, [pc, #740]	; (80090fc <HAL_RCC_GetSysClockFreq+0x358>)
 8008e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008e1a:	e1e7      	b.n	80091ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e1c:	4bb8      	ldr	r3, [pc, #736]	; (8009100 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008e22:	e1e3      	b.n	80091ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e24:	4bb4      	ldr	r3, [pc, #720]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e30:	4bb1      	ldr	r3, [pc, #708]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d071      	beq.n	8008f20 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e3c:	4bae      	ldr	r3, [pc, #696]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	099b      	lsrs	r3, r3, #6
 8008e42:	2200      	movs	r2, #0
 8008e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e48:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e62:	4622      	mov	r2, r4
 8008e64:	462b      	mov	r3, r5
 8008e66:	f04f 0000 	mov.w	r0, #0
 8008e6a:	f04f 0100 	mov.w	r1, #0
 8008e6e:	0159      	lsls	r1, r3, #5
 8008e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e74:	0150      	lsls	r0, r2, #5
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	1a51      	subs	r1, r2, r1
 8008e7e:	6439      	str	r1, [r7, #64]	; 0x40
 8008e80:	4629      	mov	r1, r5
 8008e82:	eb63 0301 	sbc.w	r3, r3, r1
 8008e86:	647b      	str	r3, [r7, #68]	; 0x44
 8008e88:	f04f 0200 	mov.w	r2, #0
 8008e8c:	f04f 0300 	mov.w	r3, #0
 8008e90:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008e94:	4649      	mov	r1, r9
 8008e96:	018b      	lsls	r3, r1, #6
 8008e98:	4641      	mov	r1, r8
 8008e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008e9e:	4641      	mov	r1, r8
 8008ea0:	018a      	lsls	r2, r1, #6
 8008ea2:	4641      	mov	r1, r8
 8008ea4:	1a51      	subs	r1, r2, r1
 8008ea6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	00cb      	lsls	r3, r1, #3
 8008ec0:	4641      	mov	r1, r8
 8008ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ec6:	4641      	mov	r1, r8
 8008ec8:	00ca      	lsls	r2, r1, #3
 8008eca:	4610      	mov	r0, r2
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4603      	mov	r3, r0
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	189b      	adds	r3, r3, r2
 8008ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ed6:	462b      	mov	r3, r5
 8008ed8:	460a      	mov	r2, r1
 8008eda:	eb42 0303 	adc.w	r3, r2, r3
 8008ede:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee0:	f04f 0200 	mov.w	r2, #0
 8008ee4:	f04f 0300 	mov.w	r3, #0
 8008ee8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008eec:	4629      	mov	r1, r5
 8008eee:	024b      	lsls	r3, r1, #9
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	024a      	lsls	r2, r1, #9
 8008efa:	4610      	mov	r0, r2
 8008efc:	4619      	mov	r1, r3
 8008efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f02:	2200      	movs	r2, #0
 8008f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008f10:	f7f7 f9ce 	bl	80002b0 <__aeabi_uldivmod>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4613      	mov	r3, r2
 8008f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f1e:	e067      	b.n	8008ff0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f20:	4b75      	ldr	r3, [pc, #468]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	099b      	lsrs	r3, r3, #6
 8008f26:	2200      	movs	r2, #0
 8008f28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f2c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008f30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f38:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f3e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008f42:	4622      	mov	r2, r4
 8008f44:	462b      	mov	r3, r5
 8008f46:	f04f 0000 	mov.w	r0, #0
 8008f4a:	f04f 0100 	mov.w	r1, #0
 8008f4e:	0159      	lsls	r1, r3, #5
 8008f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f54:	0150      	lsls	r0, r2, #5
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	1a51      	subs	r1, r2, r1
 8008f5e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008f60:	4629      	mov	r1, r5
 8008f62:	eb63 0301 	sbc.w	r3, r3, r1
 8008f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f68:	f04f 0200 	mov.w	r2, #0
 8008f6c:	f04f 0300 	mov.w	r3, #0
 8008f70:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008f74:	4649      	mov	r1, r9
 8008f76:	018b      	lsls	r3, r1, #6
 8008f78:	4641      	mov	r1, r8
 8008f7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008f7e:	4641      	mov	r1, r8
 8008f80:	018a      	lsls	r2, r1, #6
 8008f82:	4641      	mov	r1, r8
 8008f84:	ebb2 0a01 	subs.w	sl, r2, r1
 8008f88:	4649      	mov	r1, r9
 8008f8a:	eb63 0b01 	sbc.w	fp, r3, r1
 8008f8e:	f04f 0200 	mov.w	r2, #0
 8008f92:	f04f 0300 	mov.w	r3, #0
 8008f96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f9a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fa2:	4692      	mov	sl, r2
 8008fa4:	469b      	mov	fp, r3
 8008fa6:	4623      	mov	r3, r4
 8008fa8:	eb1a 0303 	adds.w	r3, sl, r3
 8008fac:	623b      	str	r3, [r7, #32]
 8008fae:	462b      	mov	r3, r5
 8008fb0:	eb4b 0303 	adc.w	r3, fp, r3
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb6:	f04f 0200 	mov.w	r2, #0
 8008fba:	f04f 0300 	mov.w	r3, #0
 8008fbe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	028b      	lsls	r3, r1, #10
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008fcc:	4621      	mov	r1, r4
 8008fce:	028a      	lsls	r2, r1, #10
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fd8:	2200      	movs	r2, #0
 8008fda:	673b      	str	r3, [r7, #112]	; 0x70
 8008fdc:	677a      	str	r2, [r7, #116]	; 0x74
 8008fde:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008fe2:	f7f7 f965 	bl	80002b0 <__aeabi_uldivmod>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4613      	mov	r3, r2
 8008fec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ff0:	4b41      	ldr	r3, [pc, #260]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	0c1b      	lsrs	r3, r3, #16
 8008ff6:	f003 0303 	and.w	r3, r3, #3
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8009002:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800900a:	fbb2 f3f3 	udiv	r3, r2, r3
 800900e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009012:	e0eb      	b.n	80091ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009014:	4b38      	ldr	r3, [pc, #224]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800901c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009020:	4b35      	ldr	r3, [pc, #212]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d06b      	beq.n	8009104 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800902c:	4b32      	ldr	r3, [pc, #200]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	099b      	lsrs	r3, r3, #6
 8009032:	2200      	movs	r2, #0
 8009034:	66bb      	str	r3, [r7, #104]	; 0x68
 8009036:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800903a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800903e:	663b      	str	r3, [r7, #96]	; 0x60
 8009040:	2300      	movs	r3, #0
 8009042:	667b      	str	r3, [r7, #100]	; 0x64
 8009044:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8009048:	4622      	mov	r2, r4
 800904a:	462b      	mov	r3, r5
 800904c:	f04f 0000 	mov.w	r0, #0
 8009050:	f04f 0100 	mov.w	r1, #0
 8009054:	0159      	lsls	r1, r3, #5
 8009056:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800905a:	0150      	lsls	r0, r2, #5
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	4621      	mov	r1, r4
 8009062:	1a51      	subs	r1, r2, r1
 8009064:	61b9      	str	r1, [r7, #24]
 8009066:	4629      	mov	r1, r5
 8009068:	eb63 0301 	sbc.w	r3, r3, r1
 800906c:	61fb      	str	r3, [r7, #28]
 800906e:	f04f 0200 	mov.w	r2, #0
 8009072:	f04f 0300 	mov.w	r3, #0
 8009076:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800907a:	4659      	mov	r1, fp
 800907c:	018b      	lsls	r3, r1, #6
 800907e:	4651      	mov	r1, sl
 8009080:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009084:	4651      	mov	r1, sl
 8009086:	018a      	lsls	r2, r1, #6
 8009088:	4651      	mov	r1, sl
 800908a:	ebb2 0801 	subs.w	r8, r2, r1
 800908e:	4659      	mov	r1, fp
 8009090:	eb63 0901 	sbc.w	r9, r3, r1
 8009094:	f04f 0200 	mov.w	r2, #0
 8009098:	f04f 0300 	mov.w	r3, #0
 800909c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090a8:	4690      	mov	r8, r2
 80090aa:	4699      	mov	r9, r3
 80090ac:	4623      	mov	r3, r4
 80090ae:	eb18 0303 	adds.w	r3, r8, r3
 80090b2:	613b      	str	r3, [r7, #16]
 80090b4:	462b      	mov	r3, r5
 80090b6:	eb49 0303 	adc.w	r3, r9, r3
 80090ba:	617b      	str	r3, [r7, #20]
 80090bc:	f04f 0200 	mov.w	r2, #0
 80090c0:	f04f 0300 	mov.w	r3, #0
 80090c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80090c8:	4629      	mov	r1, r5
 80090ca:	024b      	lsls	r3, r1, #9
 80090cc:	4621      	mov	r1, r4
 80090ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80090d2:	4621      	mov	r1, r4
 80090d4:	024a      	lsls	r2, r1, #9
 80090d6:	4610      	mov	r0, r2
 80090d8:	4619      	mov	r1, r3
 80090da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090de:	2200      	movs	r2, #0
 80090e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80090e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80090e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80090e8:	f7f7 f8e2 	bl	80002b0 <__aeabi_uldivmod>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4613      	mov	r3, r2
 80090f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090f6:	e065      	b.n	80091c4 <HAL_RCC_GetSysClockFreq+0x420>
 80090f8:	40023800 	.word	0x40023800
 80090fc:	00f42400 	.word	0x00f42400
 8009100:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009104:	4b3d      	ldr	r3, [pc, #244]	; (80091fc <HAL_RCC_GetSysClockFreq+0x458>)
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	099b      	lsrs	r3, r3, #6
 800910a:	2200      	movs	r2, #0
 800910c:	4618      	mov	r0, r3
 800910e:	4611      	mov	r1, r2
 8009110:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009114:	653b      	str	r3, [r7, #80]	; 0x50
 8009116:	2300      	movs	r3, #0
 8009118:	657b      	str	r3, [r7, #84]	; 0x54
 800911a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800911e:	4642      	mov	r2, r8
 8009120:	464b      	mov	r3, r9
 8009122:	f04f 0000 	mov.w	r0, #0
 8009126:	f04f 0100 	mov.w	r1, #0
 800912a:	0159      	lsls	r1, r3, #5
 800912c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009130:	0150      	lsls	r0, r2, #5
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4641      	mov	r1, r8
 8009138:	1a51      	subs	r1, r2, r1
 800913a:	60b9      	str	r1, [r7, #8]
 800913c:	4649      	mov	r1, r9
 800913e:	eb63 0301 	sbc.w	r3, r3, r1
 8009142:	60fb      	str	r3, [r7, #12]
 8009144:	f04f 0200 	mov.w	r2, #0
 8009148:	f04f 0300 	mov.w	r3, #0
 800914c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009150:	4659      	mov	r1, fp
 8009152:	018b      	lsls	r3, r1, #6
 8009154:	4651      	mov	r1, sl
 8009156:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800915a:	4651      	mov	r1, sl
 800915c:	018a      	lsls	r2, r1, #6
 800915e:	4651      	mov	r1, sl
 8009160:	1a54      	subs	r4, r2, r1
 8009162:	4659      	mov	r1, fp
 8009164:	eb63 0501 	sbc.w	r5, r3, r1
 8009168:	f04f 0200 	mov.w	r2, #0
 800916c:	f04f 0300 	mov.w	r3, #0
 8009170:	00eb      	lsls	r3, r5, #3
 8009172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009176:	00e2      	lsls	r2, r4, #3
 8009178:	4614      	mov	r4, r2
 800917a:	461d      	mov	r5, r3
 800917c:	4643      	mov	r3, r8
 800917e:	18e3      	adds	r3, r4, r3
 8009180:	603b      	str	r3, [r7, #0]
 8009182:	464b      	mov	r3, r9
 8009184:	eb45 0303 	adc.w	r3, r5, r3
 8009188:	607b      	str	r3, [r7, #4]
 800918a:	f04f 0200 	mov.w	r2, #0
 800918e:	f04f 0300 	mov.w	r3, #0
 8009192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009196:	4629      	mov	r1, r5
 8009198:	028b      	lsls	r3, r1, #10
 800919a:	4621      	mov	r1, r4
 800919c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80091a0:	4621      	mov	r1, r4
 80091a2:	028a      	lsls	r2, r1, #10
 80091a4:	4610      	mov	r0, r2
 80091a6:	4619      	mov	r1, r3
 80091a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091ac:	2200      	movs	r2, #0
 80091ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80091b0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80091b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80091b6:	f7f7 f87b 	bl	80002b0 <__aeabi_uldivmod>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	4613      	mov	r3, r2
 80091c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80091c4:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <HAL_RCC_GetSysClockFreq+0x458>)
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	0f1b      	lsrs	r3, r3, #28
 80091ca:	f003 0307 	and.w	r3, r3, #7
 80091ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80091d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80091d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091da:	fbb2 f3f3 	udiv	r3, r2, r3
 80091de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80091e2:	e003      	b.n	80091ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80091e4:	4b06      	ldr	r3, [pc, #24]	; (8009200 <HAL_RCC_GetSysClockFreq+0x45c>)
 80091e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80091ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80091ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	37b8      	adds	r7, #184	; 0xb8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091fa:	bf00      	nop
 80091fc:	40023800 	.word	0x40023800
 8009200:	00f42400 	.word	0x00f42400

08009204 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d101      	bne.n	8009216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e28d      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 8083 	beq.w	800932a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009224:	4b94      	ldr	r3, [pc, #592]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f003 030c 	and.w	r3, r3, #12
 800922c:	2b04      	cmp	r3, #4
 800922e:	d019      	beq.n	8009264 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009230:	4b91      	ldr	r3, [pc, #580]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009238:	2b08      	cmp	r3, #8
 800923a:	d106      	bne.n	800924a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800923c:	4b8e      	ldr	r3, [pc, #568]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009248:	d00c      	beq.n	8009264 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800924a:	4b8b      	ldr	r3, [pc, #556]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009252:	2b0c      	cmp	r3, #12
 8009254:	d112      	bne.n	800927c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009256:	4b88      	ldr	r3, [pc, #544]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800925e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009262:	d10b      	bne.n	800927c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009264:	4b84      	ldr	r3, [pc, #528]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d05b      	beq.n	8009328 <HAL_RCC_OscConfig+0x124>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d157      	bne.n	8009328 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e25a      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009284:	d106      	bne.n	8009294 <HAL_RCC_OscConfig+0x90>
 8009286:	4b7c      	ldr	r3, [pc, #496]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a7b      	ldr	r2, [pc, #492]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 800928c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	e01d      	b.n	80092d0 <HAL_RCC_OscConfig+0xcc>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800929c:	d10c      	bne.n	80092b8 <HAL_RCC_OscConfig+0xb4>
 800929e:	4b76      	ldr	r3, [pc, #472]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a75      	ldr	r2, [pc, #468]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 80092a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092a8:	6013      	str	r3, [r2, #0]
 80092aa:	4b73      	ldr	r3, [pc, #460]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a72      	ldr	r2, [pc, #456]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 80092b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	e00b      	b.n	80092d0 <HAL_RCC_OscConfig+0xcc>
 80092b8:	4b6f      	ldr	r3, [pc, #444]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a6e      	ldr	r2, [pc, #440]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 80092be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092c2:	6013      	str	r3, [r2, #0]
 80092c4:	4b6c      	ldr	r3, [pc, #432]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a6b      	ldr	r2, [pc, #428]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 80092ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d013      	beq.n	8009300 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d8:	f7ff f860 	bl	800839c <HAL_GetTick>
 80092dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092de:	e008      	b.n	80092f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092e0:	f7ff f85c 	bl	800839c <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	2b64      	cmp	r3, #100	; 0x64
 80092ec:	d901      	bls.n	80092f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e21f      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092f2:	4b61      	ldr	r3, [pc, #388]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0f0      	beq.n	80092e0 <HAL_RCC_OscConfig+0xdc>
 80092fe:	e014      	b.n	800932a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009300:	f7ff f84c 	bl	800839c <HAL_GetTick>
 8009304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009306:	e008      	b.n	800931a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009308:	f7ff f848 	bl	800839c <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	2b64      	cmp	r3, #100	; 0x64
 8009314:	d901      	bls.n	800931a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e20b      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800931a:	4b57      	ldr	r3, [pc, #348]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1f0      	bne.n	8009308 <HAL_RCC_OscConfig+0x104>
 8009326:	e000      	b.n	800932a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0302 	and.w	r3, r3, #2
 8009332:	2b00      	cmp	r3, #0
 8009334:	d06f      	beq.n	8009416 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009336:	4b50      	ldr	r3, [pc, #320]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f003 030c 	and.w	r3, r3, #12
 800933e:	2b00      	cmp	r3, #0
 8009340:	d017      	beq.n	8009372 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009342:	4b4d      	ldr	r3, [pc, #308]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800934a:	2b08      	cmp	r3, #8
 800934c:	d105      	bne.n	800935a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800934e:	4b4a      	ldr	r3, [pc, #296]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00b      	beq.n	8009372 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800935a:	4b47      	ldr	r3, [pc, #284]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009362:	2b0c      	cmp	r3, #12
 8009364:	d11c      	bne.n	80093a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009366:	4b44      	ldr	r3, [pc, #272]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d116      	bne.n	80093a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009372:	4b41      	ldr	r3, [pc, #260]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0302 	and.w	r3, r3, #2
 800937a:	2b00      	cmp	r3, #0
 800937c:	d005      	beq.n	800938a <HAL_RCC_OscConfig+0x186>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d001      	beq.n	800938a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e1d3      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800938a:	4b3b      	ldr	r3, [pc, #236]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	4937      	ldr	r1, [pc, #220]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 800939a:	4313      	orrs	r3, r2
 800939c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800939e:	e03a      	b.n	8009416 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d020      	beq.n	80093ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093a8:	4b34      	ldr	r3, [pc, #208]	; (800947c <HAL_RCC_OscConfig+0x278>)
 80093aa:	2201      	movs	r2, #1
 80093ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ae:	f7fe fff5 	bl	800839c <HAL_GetTick>
 80093b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093b4:	e008      	b.n	80093c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093b6:	f7fe fff1 	bl	800839c <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d901      	bls.n	80093c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e1b4      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093c8:	4b2b      	ldr	r3, [pc, #172]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0f0      	beq.n	80093b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093d4:	4b28      	ldr	r3, [pc, #160]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	00db      	lsls	r3, r3, #3
 80093e2:	4925      	ldr	r1, [pc, #148]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	600b      	str	r3, [r1, #0]
 80093e8:	e015      	b.n	8009416 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093ea:	4b24      	ldr	r3, [pc, #144]	; (800947c <HAL_RCC_OscConfig+0x278>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f0:	f7fe ffd4 	bl	800839c <HAL_GetTick>
 80093f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093f6:	e008      	b.n	800940a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093f8:	f7fe ffd0 	bl	800839c <HAL_GetTick>
 80093fc:	4602      	mov	r2, r0
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	2b02      	cmp	r3, #2
 8009404:	d901      	bls.n	800940a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e193      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800940a:	4b1b      	ldr	r3, [pc, #108]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0302 	and.w	r3, r3, #2
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1f0      	bne.n	80093f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0308 	and.w	r3, r3, #8
 800941e:	2b00      	cmp	r3, #0
 8009420:	d036      	beq.n	8009490 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d016      	beq.n	8009458 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800942a:	4b15      	ldr	r3, [pc, #84]	; (8009480 <HAL_RCC_OscConfig+0x27c>)
 800942c:	2201      	movs	r2, #1
 800942e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009430:	f7fe ffb4 	bl	800839c <HAL_GetTick>
 8009434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009436:	e008      	b.n	800944a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009438:	f7fe ffb0 	bl	800839c <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2b02      	cmp	r3, #2
 8009444:	d901      	bls.n	800944a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e173      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800944a:	4b0b      	ldr	r3, [pc, #44]	; (8009478 <HAL_RCC_OscConfig+0x274>)
 800944c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0f0      	beq.n	8009438 <HAL_RCC_OscConfig+0x234>
 8009456:	e01b      	b.n	8009490 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009458:	4b09      	ldr	r3, [pc, #36]	; (8009480 <HAL_RCC_OscConfig+0x27c>)
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800945e:	f7fe ff9d 	bl	800839c <HAL_GetTick>
 8009462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009464:	e00e      	b.n	8009484 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009466:	f7fe ff99 	bl	800839c <HAL_GetTick>
 800946a:	4602      	mov	r2, r0
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	2b02      	cmp	r3, #2
 8009472:	d907      	bls.n	8009484 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	e15c      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
 8009478:	40023800 	.word	0x40023800
 800947c:	42470000 	.word	0x42470000
 8009480:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009484:	4b8a      	ldr	r3, [pc, #552]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 8009486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1ea      	bne.n	8009466 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 0304 	and.w	r3, r3, #4
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 8097 	beq.w	80095cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800949e:	2300      	movs	r3, #0
 80094a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094a2:	4b83      	ldr	r3, [pc, #524]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 80094a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d10f      	bne.n	80094ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094ae:	2300      	movs	r3, #0
 80094b0:	60bb      	str	r3, [r7, #8]
 80094b2:	4b7f      	ldr	r3, [pc, #508]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 80094b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b6:	4a7e      	ldr	r2, [pc, #504]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 80094b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094bc:	6413      	str	r3, [r2, #64]	; 0x40
 80094be:	4b7c      	ldr	r3, [pc, #496]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 80094c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094c6:	60bb      	str	r3, [r7, #8]
 80094c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094ca:	2301      	movs	r3, #1
 80094cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094ce:	4b79      	ldr	r3, [pc, #484]	; (80096b4 <HAL_RCC_OscConfig+0x4b0>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d118      	bne.n	800950c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094da:	4b76      	ldr	r3, [pc, #472]	; (80096b4 <HAL_RCC_OscConfig+0x4b0>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a75      	ldr	r2, [pc, #468]	; (80096b4 <HAL_RCC_OscConfig+0x4b0>)
 80094e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094e6:	f7fe ff59 	bl	800839c <HAL_GetTick>
 80094ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094ec:	e008      	b.n	8009500 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094ee:	f7fe ff55 	bl	800839c <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d901      	bls.n	8009500 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	e118      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009500:	4b6c      	ldr	r3, [pc, #432]	; (80096b4 <HAL_RCC_OscConfig+0x4b0>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009508:	2b00      	cmp	r3, #0
 800950a:	d0f0      	beq.n	80094ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d106      	bne.n	8009522 <HAL_RCC_OscConfig+0x31e>
 8009514:	4b66      	ldr	r3, [pc, #408]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 8009516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009518:	4a65      	ldr	r2, [pc, #404]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 800951a:	f043 0301 	orr.w	r3, r3, #1
 800951e:	6713      	str	r3, [r2, #112]	; 0x70
 8009520:	e01c      	b.n	800955c <HAL_RCC_OscConfig+0x358>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	2b05      	cmp	r3, #5
 8009528:	d10c      	bne.n	8009544 <HAL_RCC_OscConfig+0x340>
 800952a:	4b61      	ldr	r3, [pc, #388]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 800952c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952e:	4a60      	ldr	r2, [pc, #384]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 8009530:	f043 0304 	orr.w	r3, r3, #4
 8009534:	6713      	str	r3, [r2, #112]	; 0x70
 8009536:	4b5e      	ldr	r3, [pc, #376]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 8009538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953a:	4a5d      	ldr	r2, [pc, #372]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 800953c:	f043 0301 	orr.w	r3, r3, #1
 8009540:	6713      	str	r3, [r2, #112]	; 0x70
 8009542:	e00b      	b.n	800955c <HAL_RCC_OscConfig+0x358>
 8009544:	4b5a      	ldr	r3, [pc, #360]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 8009546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009548:	4a59      	ldr	r2, [pc, #356]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 800954a:	f023 0301 	bic.w	r3, r3, #1
 800954e:	6713      	str	r3, [r2, #112]	; 0x70
 8009550:	4b57      	ldr	r3, [pc, #348]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 8009552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009554:	4a56      	ldr	r2, [pc, #344]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 8009556:	f023 0304 	bic.w	r3, r3, #4
 800955a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d015      	beq.n	8009590 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009564:	f7fe ff1a 	bl	800839c <HAL_GetTick>
 8009568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800956a:	e00a      	b.n	8009582 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800956c:	f7fe ff16 	bl	800839c <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	f241 3288 	movw	r2, #5000	; 0x1388
 800957a:	4293      	cmp	r3, r2
 800957c:	d901      	bls.n	8009582 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e0d7      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009582:	4b4b      	ldr	r3, [pc, #300]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 8009584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009586:	f003 0302 	and.w	r3, r3, #2
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0ee      	beq.n	800956c <HAL_RCC_OscConfig+0x368>
 800958e:	e014      	b.n	80095ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009590:	f7fe ff04 	bl	800839c <HAL_GetTick>
 8009594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009596:	e00a      	b.n	80095ae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009598:	f7fe ff00 	bl	800839c <HAL_GetTick>
 800959c:	4602      	mov	r2, r0
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d901      	bls.n	80095ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e0c1      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095ae:	4b40      	ldr	r3, [pc, #256]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 80095b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b2:	f003 0302 	and.w	r3, r3, #2
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1ee      	bne.n	8009598 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d105      	bne.n	80095cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095c0:	4b3b      	ldr	r3, [pc, #236]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 80095c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c4:	4a3a      	ldr	r2, [pc, #232]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 80095c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 80ad 	beq.w	8009730 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80095d6:	4b36      	ldr	r3, [pc, #216]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f003 030c 	and.w	r3, r3, #12
 80095de:	2b08      	cmp	r3, #8
 80095e0:	d060      	beq.n	80096a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d145      	bne.n	8009676 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095ea:	4b33      	ldr	r3, [pc, #204]	; (80096b8 <HAL_RCC_OscConfig+0x4b4>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f0:	f7fe fed4 	bl	800839c <HAL_GetTick>
 80095f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095f6:	e008      	b.n	800960a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095f8:	f7fe fed0 	bl	800839c <HAL_GetTick>
 80095fc:	4602      	mov	r2, r0
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	2b02      	cmp	r3, #2
 8009604:	d901      	bls.n	800960a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e093      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800960a:	4b29      	ldr	r3, [pc, #164]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1f0      	bne.n	80095f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	69da      	ldr	r2, [r3, #28]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	431a      	orrs	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009624:	019b      	lsls	r3, r3, #6
 8009626:	431a      	orrs	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962c:	085b      	lsrs	r3, r3, #1
 800962e:	3b01      	subs	r3, #1
 8009630:	041b      	lsls	r3, r3, #16
 8009632:	431a      	orrs	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009638:	061b      	lsls	r3, r3, #24
 800963a:	431a      	orrs	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009640:	071b      	lsls	r3, r3, #28
 8009642:	491b      	ldr	r1, [pc, #108]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 8009644:	4313      	orrs	r3, r2
 8009646:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009648:	4b1b      	ldr	r3, [pc, #108]	; (80096b8 <HAL_RCC_OscConfig+0x4b4>)
 800964a:	2201      	movs	r2, #1
 800964c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800964e:	f7fe fea5 	bl	800839c <HAL_GetTick>
 8009652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009654:	e008      	b.n	8009668 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009656:	f7fe fea1 	bl	800839c <HAL_GetTick>
 800965a:	4602      	mov	r2, r0
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	2b02      	cmp	r3, #2
 8009662:	d901      	bls.n	8009668 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e064      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009668:	4b11      	ldr	r3, [pc, #68]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d0f0      	beq.n	8009656 <HAL_RCC_OscConfig+0x452>
 8009674:	e05c      	b.n	8009730 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009676:	4b10      	ldr	r3, [pc, #64]	; (80096b8 <HAL_RCC_OscConfig+0x4b4>)
 8009678:	2200      	movs	r2, #0
 800967a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800967c:	f7fe fe8e 	bl	800839c <HAL_GetTick>
 8009680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009682:	e008      	b.n	8009696 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009684:	f7fe fe8a 	bl	800839c <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	2b02      	cmp	r3, #2
 8009690:	d901      	bls.n	8009696 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e04d      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009696:	4b06      	ldr	r3, [pc, #24]	; (80096b0 <HAL_RCC_OscConfig+0x4ac>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1f0      	bne.n	8009684 <HAL_RCC_OscConfig+0x480>
 80096a2:	e045      	b.n	8009730 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d107      	bne.n	80096bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e040      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
 80096b0:	40023800 	.word	0x40023800
 80096b4:	40007000 	.word	0x40007000
 80096b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80096bc:	4b1f      	ldr	r3, [pc, #124]	; (800973c <HAL_RCC_OscConfig+0x538>)
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d030      	beq.n	800972c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d129      	bne.n	800972c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d122      	bne.n	800972c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80096ec:	4013      	ands	r3, r2
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80096f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d119      	bne.n	800972c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009702:	085b      	lsrs	r3, r3, #1
 8009704:	3b01      	subs	r3, #1
 8009706:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009708:	429a      	cmp	r2, r3
 800970a:	d10f      	bne.n	800972c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009718:	429a      	cmp	r2, r3
 800971a:	d107      	bne.n	800972c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009726:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009728:	429a      	cmp	r2, r3
 800972a:	d001      	beq.n	8009730 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e000      	b.n	8009732 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	40023800 	.word	0x40023800

08009740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e07b      	b.n	800984a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	2b00      	cmp	r3, #0
 8009758:	d108      	bne.n	800976c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009762:	d009      	beq.n	8009778 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	61da      	str	r2, [r3, #28]
 800976a:	e005      	b.n	8009778 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d106      	bne.n	8009798 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7fe fb22 	bl	8007ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2202      	movs	r2, #2
 800979c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80097c0:	431a      	orrs	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097ca:	431a      	orrs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	431a      	orrs	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	431a      	orrs	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097e8:	431a      	orrs	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097f2:	431a      	orrs	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a1b      	ldr	r3, [r3, #32]
 80097f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097fc:	ea42 0103 	orr.w	r1, r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009804:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	430a      	orrs	r2, r1
 800980e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	0c1b      	lsrs	r3, r3, #16
 8009816:	f003 0104 	and.w	r1, r3, #4
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981e:	f003 0210 	and.w	r2, r3, #16
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	69da      	ldr	r2, [r3, #28]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009838:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b088      	sub	sp, #32
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	603b      	str	r3, [r7, #0]
 800985e:	4613      	mov	r3, r2
 8009860:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800986c:	2b01      	cmp	r3, #1
 800986e:	d101      	bne.n	8009874 <HAL_SPI_Transmit+0x22>
 8009870:	2302      	movs	r3, #2
 8009872:	e12d      	b.n	8009ad0 <HAL_SPI_Transmit+0x27e>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800987c:	f7fe fd8e 	bl	800839c <HAL_GetTick>
 8009880:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009882:	88fb      	ldrh	r3, [r7, #6]
 8009884:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b01      	cmp	r3, #1
 8009890:	d002      	beq.n	8009898 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009892:	2302      	movs	r3, #2
 8009894:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009896:	e116      	b.n	8009ac6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d002      	beq.n	80098a4 <HAL_SPI_Transmit+0x52>
 800989e:	88fb      	ldrh	r3, [r7, #6]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d102      	bne.n	80098aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80098a8:	e10d      	b.n	8009ac6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2203      	movs	r2, #3
 80098ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	88fa      	ldrh	r2, [r7, #6]
 80098c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	88fa      	ldrh	r2, [r7, #6]
 80098c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098f0:	d10f      	bne.n	8009912 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009900:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009910:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991c:	2b40      	cmp	r3, #64	; 0x40
 800991e:	d007      	beq.n	8009930 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800992e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009938:	d14f      	bne.n	80099da <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <HAL_SPI_Transmit+0xf6>
 8009942:	8afb      	ldrh	r3, [r7, #22]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d142      	bne.n	80099ce <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994c:	881a      	ldrh	r2, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009958:	1c9a      	adds	r2, r3, #2
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009962:	b29b      	uxth	r3, r3
 8009964:	3b01      	subs	r3, #1
 8009966:	b29a      	uxth	r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800996c:	e02f      	b.n	80099ce <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	f003 0302 	and.w	r3, r3, #2
 8009978:	2b02      	cmp	r3, #2
 800997a:	d112      	bne.n	80099a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009980:	881a      	ldrh	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998c:	1c9a      	adds	r2, r3, #2
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009996:	b29b      	uxth	r3, r3
 8009998:	3b01      	subs	r3, #1
 800999a:	b29a      	uxth	r2, r3
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	86da      	strh	r2, [r3, #54]	; 0x36
 80099a0:	e015      	b.n	80099ce <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099a2:	f7fe fcfb 	bl	800839c <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d803      	bhi.n	80099ba <HAL_SPI_Transmit+0x168>
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b8:	d102      	bne.n	80099c0 <HAL_SPI_Transmit+0x16e>
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d106      	bne.n	80099ce <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80099cc:	e07b      	b.n	8009ac6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1ca      	bne.n	800996e <HAL_SPI_Transmit+0x11c>
 80099d8:	e050      	b.n	8009a7c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d002      	beq.n	80099e8 <HAL_SPI_Transmit+0x196>
 80099e2:	8afb      	ldrh	r3, [r7, #22]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d144      	bne.n	8009a72 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	330c      	adds	r3, #12
 80099f2:	7812      	ldrb	r2, [r2, #0]
 80099f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fa:	1c5a      	adds	r2, r3, #1
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	3b01      	subs	r3, #1
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009a0e:	e030      	b.n	8009a72 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f003 0302 	and.w	r3, r3, #2
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d113      	bne.n	8009a46 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	330c      	adds	r3, #12
 8009a28:	7812      	ldrb	r2, [r2, #0]
 8009a2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	86da      	strh	r2, [r3, #54]	; 0x36
 8009a44:	e015      	b.n	8009a72 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a46:	f7fe fca9 	bl	800839c <HAL_GetTick>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	683a      	ldr	r2, [r7, #0]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d803      	bhi.n	8009a5e <HAL_SPI_Transmit+0x20c>
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5c:	d102      	bne.n	8009a64 <HAL_SPI_Transmit+0x212>
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d106      	bne.n	8009a72 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009a70:	e029      	b.n	8009ac6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1c9      	bne.n	8009a10 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f000 fa6f 	bl	8009f64 <SPI_EndRxTxTransaction>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2220      	movs	r2, #32
 8009a90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10a      	bne.n	8009ab0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	613b      	str	r3, [r7, #16]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	613b      	str	r3, [r7, #16]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	613b      	str	r3, [r7, #16]
 8009aae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	77fb      	strb	r3, [r7, #31]
 8009abc:	e003      	b.n	8009ac6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009ace:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3720      	adds	r7, #32
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b08c      	sub	sp, #48	; 0x30
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
 8009ae4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d101      	bne.n	8009afe <HAL_SPI_TransmitReceive+0x26>
 8009afa:	2302      	movs	r3, #2
 8009afc:	e198      	b.n	8009e30 <HAL_SPI_TransmitReceive+0x358>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b06:	f7fe fc49 	bl	800839c <HAL_GetTick>
 8009b0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009b1c:	887b      	ldrh	r3, [r7, #2]
 8009b1e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009b20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d00f      	beq.n	8009b48 <HAL_SPI_TransmitReceive+0x70>
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b2e:	d107      	bne.n	8009b40 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d103      	bne.n	8009b40 <HAL_SPI_TransmitReceive+0x68>
 8009b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d003      	beq.n	8009b48 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009b40:	2302      	movs	r3, #2
 8009b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009b46:	e16d      	b.n	8009e24 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d005      	beq.n	8009b5a <HAL_SPI_TransmitReceive+0x82>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <HAL_SPI_TransmitReceive+0x82>
 8009b54:	887b      	ldrh	r3, [r7, #2]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d103      	bne.n	8009b62 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009b60:	e160      	b.n	8009e24 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b04      	cmp	r3, #4
 8009b6c:	d003      	beq.n	8009b76 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2205      	movs	r2, #5
 8009b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	887a      	ldrh	r2, [r7, #2]
 8009b86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	887a      	ldrh	r2, [r7, #2]
 8009b8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	887a      	ldrh	r2, [r7, #2]
 8009b98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	887a      	ldrh	r2, [r7, #2]
 8009b9e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb6:	2b40      	cmp	r3, #64	; 0x40
 8009bb8:	d007      	beq.n	8009bca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bd2:	d17c      	bne.n	8009cce <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <HAL_SPI_TransmitReceive+0x10a>
 8009bdc:	8b7b      	ldrh	r3, [r7, #26]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d16a      	bne.n	8009cb8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be6:	881a      	ldrh	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf2:	1c9a      	adds	r2, r3, #2
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c06:	e057      	b.n	8009cb8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d11b      	bne.n	8009c4e <HAL_SPI_TransmitReceive+0x176>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d016      	beq.n	8009c4e <HAL_SPI_TransmitReceive+0x176>
 8009c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d113      	bne.n	8009c4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c2a:	881a      	ldrh	r2, [r3, #0]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c36:	1c9a      	adds	r2, r3, #2
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	3b01      	subs	r3, #1
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f003 0301 	and.w	r3, r3, #1
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d119      	bne.n	8009c90 <HAL_SPI_TransmitReceive+0x1b8>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d014      	beq.n	8009c90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68da      	ldr	r2, [r3, #12]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c70:	b292      	uxth	r2, r2
 8009c72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c78:	1c9a      	adds	r2, r3, #2
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	3b01      	subs	r3, #1
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009c90:	f7fe fb84 	bl	800839c <HAL_GetTick>
 8009c94:	4602      	mov	r2, r0
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d80b      	bhi.n	8009cb8 <HAL_SPI_TransmitReceive+0x1e0>
 8009ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca6:	d007      	beq.n	8009cb8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8009cb6:	e0b5      	b.n	8009e24 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1a2      	bne.n	8009c08 <HAL_SPI_TransmitReceive+0x130>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d19d      	bne.n	8009c08 <HAL_SPI_TransmitReceive+0x130>
 8009ccc:	e080      	b.n	8009dd0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <HAL_SPI_TransmitReceive+0x204>
 8009cd6:	8b7b      	ldrh	r3, [r7, #26]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d16f      	bne.n	8009dbc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	330c      	adds	r3, #12
 8009ce6:	7812      	ldrb	r2, [r2, #0]
 8009ce8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d02:	e05b      	b.n	8009dbc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f003 0302 	and.w	r3, r3, #2
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d11c      	bne.n	8009d4c <HAL_SPI_TransmitReceive+0x274>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d017      	beq.n	8009d4c <HAL_SPI_TransmitReceive+0x274>
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d114      	bne.n	8009d4c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	330c      	adds	r3, #12
 8009d2c:	7812      	ldrb	r2, [r2, #0]
 8009d2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	3b01      	subs	r3, #1
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d119      	bne.n	8009d8e <HAL_SPI_TransmitReceive+0x2b6>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d014      	beq.n	8009d8e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68da      	ldr	r2, [r3, #12]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6e:	b2d2      	uxtb	r2, r2
 8009d70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d76:	1c5a      	adds	r2, r3, #1
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	3b01      	subs	r3, #1
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009d8e:	f7fe fb05 	bl	800839c <HAL_GetTick>
 8009d92:	4602      	mov	r2, r0
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d803      	bhi.n	8009da6 <HAL_SPI_TransmitReceive+0x2ce>
 8009d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da4:	d102      	bne.n	8009dac <HAL_SPI_TransmitReceive+0x2d4>
 8009da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d107      	bne.n	8009dbc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8009dba:	e033      	b.n	8009e24 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d19e      	bne.n	8009d04 <HAL_SPI_TransmitReceive+0x22c>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d199      	bne.n	8009d04 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f000 f8c5 	bl	8009f64 <SPI_EndRxTxTransaction>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d006      	beq.n	8009dee <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2220      	movs	r2, #32
 8009dea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009dec:	e01a      	b.n	8009e24 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009df6:	2300      	movs	r3, #0
 8009df8:	617b      	str	r3, [r7, #20]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	617b      	str	r3, [r7, #20]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	617b      	str	r3, [r7, #20]
 8009e0a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e1a:	e003      	b.n	8009e24 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3730      	adds	r7, #48	; 0x30
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e46:	b2db      	uxtb	r3, r3
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b088      	sub	sp, #32
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	603b      	str	r3, [r7, #0]
 8009e60:	4613      	mov	r3, r2
 8009e62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009e64:	f7fe fa9a 	bl	800839c <HAL_GetTick>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	1a9b      	subs	r3, r3, r2
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	4413      	add	r3, r2
 8009e72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e74:	f7fe fa92 	bl	800839c <HAL_GetTick>
 8009e78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009e7a:	4b39      	ldr	r3, [pc, #228]	; (8009f60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	015b      	lsls	r3, r3, #5
 8009e80:	0d1b      	lsrs	r3, r3, #20
 8009e82:	69fa      	ldr	r2, [r7, #28]
 8009e84:	fb02 f303 	mul.w	r3, r2, r3
 8009e88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e8a:	e054      	b.n	8009f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e92:	d050      	beq.n	8009f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e94:	f7fe fa82 	bl	800839c <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	69fa      	ldr	r2, [r7, #28]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d902      	bls.n	8009eaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d13d      	bne.n	8009f26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009eb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ec2:	d111      	bne.n	8009ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ecc:	d004      	beq.n	8009ed8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ed6:	d107      	bne.n	8009ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ef0:	d10f      	bne.n	8009f12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009f22:	2303      	movs	r3, #3
 8009f24:	e017      	b.n	8009f56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d101      	bne.n	8009f30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	689a      	ldr	r2, [r3, #8]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	4013      	ands	r3, r2
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	bf0c      	ite	eq
 8009f46:	2301      	moveq	r3, #1
 8009f48:	2300      	movne	r3, #0
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	79fb      	ldrb	r3, [r7, #7]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d19b      	bne.n	8009e8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3720      	adds	r7, #32
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	2000001c 	.word	0x2000001c

08009f64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af02      	add	r7, sp, #8
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2201      	movs	r2, #1
 8009f78:	2102      	movs	r1, #2
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f7ff ff6a 	bl	8009e54 <SPI_WaitFlagStateUntilTimeout>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d007      	beq.n	8009f96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f8a:	f043 0220 	orr.w	r2, r3, #32
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e032      	b.n	8009ffc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009f96:	4b1b      	ldr	r3, [pc, #108]	; (800a004 <SPI_EndRxTxTransaction+0xa0>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a1b      	ldr	r2, [pc, #108]	; (800a008 <SPI_EndRxTxTransaction+0xa4>)
 8009f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa0:	0d5b      	lsrs	r3, r3, #21
 8009fa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009fa6:	fb02 f303 	mul.w	r3, r2, r3
 8009faa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fb4:	d112      	bne.n	8009fdc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2180      	movs	r1, #128	; 0x80
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f7ff ff47 	bl	8009e54 <SPI_WaitFlagStateUntilTimeout>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d016      	beq.n	8009ffa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd0:	f043 0220 	orr.w	r2, r3, #32
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	e00f      	b.n	8009ffc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00a      	beq.n	8009ff8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ff2:	2b80      	cmp	r3, #128	; 0x80
 8009ff4:	d0f2      	beq.n	8009fdc <SPI_EndRxTxTransaction+0x78>
 8009ff6:	e000      	b.n	8009ffa <SPI_EndRxTxTransaction+0x96>
        break;
 8009ff8:	bf00      	nop
  }

  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3718      	adds	r7, #24
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	2000001c 	.word	0x2000001c
 800a008:	165e9f81 	.word	0x165e9f81

0800a00c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e042      	b.n	800a0a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	d106      	bne.n	800a038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7fd ff1a 	bl	8007e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2224      	movs	r2, #36	; 0x24
 800a03c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68da      	ldr	r2, [r3, #12]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a04e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fe57 	bl	800ad04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	691a      	ldr	r2, [r3, #16]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	695a      	ldr	r2, [r3, #20]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68da      	ldr	r2, [r3, #12]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2220      	movs	r2, #32
 800a090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2220      	movs	r2, #32
 800a098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	607a      	str	r2, [r7, #4]
 800a0b8:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e062      	b.n	800a18a <HAL_MultiProcessor_Init+0xde>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d106      	bne.n	800a0de <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f7fd fec7 	bl	8007e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2224      	movs	r2, #36	; 0x24
 800a0e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	68da      	ldr	r2, [r3, #12]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 fe04 	bl	800ad04 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	691a      	ldr	r2, [r3, #16]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a10a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	695a      	ldr	r2, [r3, #20]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a11a:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	691a      	ldr	r2, [r3, #16]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f022 020f 	bic.w	r2, r2, #15
 800a12a:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6919      	ldr	r1, [r3, #16]
 800a132:	7afa      	ldrb	r2, [r7, #11]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	430a      	orrs	r2, r1
 800a13a:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68da      	ldr	r2, [r3, #12]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a14a:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68d9      	ldr	r1, [r3, #12]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	430a      	orrs	r2, r1
 800a15a:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68da      	ldr	r2, [r3, #12]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a16a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2220      	movs	r2, #32
 800a176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2220      	movs	r2, #32
 800a17e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a192:	b480      	push	{r7}
 800a194:	b085      	sub	sp, #20
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	4613      	mov	r3, r2
 800a19e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b20      	cmp	r3, #32
 800a1aa:	d121      	bne.n	800a1f0 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <HAL_UART_Transmit_IT+0x26>
 800a1b2:	88fb      	ldrh	r3, [r7, #6]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e01a      	b.n	800a1f2 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	88fa      	ldrh	r2, [r7, #6]
 800a1c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	88fa      	ldrh	r2, [r7, #6]
 800a1cc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2221      	movs	r2, #33	; 0x21
 800a1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68da      	ldr	r2, [r3, #12]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a1ea:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	e000      	b.n	800a1f2 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a1f0:	2302      	movs	r3, #2
  }
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	4613      	mov	r3, r2
 800a20a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a212:	b2db      	uxtb	r3, r3
 800a214:	2b20      	cmp	r3, #32
 800a216:	d112      	bne.n	800a23e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d002      	beq.n	800a224 <HAL_UART_Receive_IT+0x26>
 800a21e:	88fb      	ldrh	r3, [r7, #6]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e00b      	b.n	800a240 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a22e:	88fb      	ldrh	r3, [r7, #6]
 800a230:	461a      	mov	r2, r3
 800a232:	68b9      	ldr	r1, [r7, #8]
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 fb75 	bl	800a924 <UART_Start_Receive_IT>
 800a23a:	4603      	mov	r3, r0
 800a23c:	e000      	b.n	800a240 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a23e:	2302      	movs	r3, #2
  }
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b09a      	sub	sp, #104	; 0x68
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	330c      	adds	r3, #12
 800a256:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a25a:	e853 3f00 	ldrex	r3, [r3]
 800a25e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a262:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a266:	667b      	str	r3, [r7, #100]	; 0x64
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	330c      	adds	r3, #12
 800a26e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a270:	657a      	str	r2, [r7, #84]	; 0x54
 800a272:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a274:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a276:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a278:	e841 2300 	strex	r3, r2, [r1]
 800a27c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a27e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1e5      	bne.n	800a250 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	3314      	adds	r3, #20
 800a28a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a28e:	e853 3f00 	ldrex	r3, [r3]
 800a292:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a296:	f023 0301 	bic.w	r3, r3, #1
 800a29a:	663b      	str	r3, [r7, #96]	; 0x60
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	3314      	adds	r3, #20
 800a2a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a2a4:	643a      	str	r2, [r7, #64]	; 0x40
 800a2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2ac:	e841 2300 	strex	r3, r2, [r1]
 800a2b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1e5      	bne.n	800a284 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d119      	bne.n	800a2f4 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	330c      	adds	r3, #12
 800a2c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c8:	6a3b      	ldr	r3, [r7, #32]
 800a2ca:	e853 3f00 	ldrex	r3, [r3]
 800a2ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	f023 0310 	bic.w	r3, r3, #16
 800a2d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	330c      	adds	r3, #12
 800a2de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a2e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2e8:	e841 2300 	strex	r3, r2, [r1]
 800a2ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1e5      	bne.n	800a2c0 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2fe:	2b40      	cmp	r3, #64	; 0x40
 800a300:	d13f      	bne.n	800a382 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	3314      	adds	r3, #20
 800a308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	e853 3f00 	ldrex	r3, [r3]
 800a310:	60bb      	str	r3, [r7, #8]
   return(result);
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a318:	65bb      	str	r3, [r7, #88]	; 0x58
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	3314      	adds	r3, #20
 800a320:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a322:	61ba      	str	r2, [r7, #24]
 800a324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a326:	6979      	ldr	r1, [r7, #20]
 800a328:	69ba      	ldr	r2, [r7, #24]
 800a32a:	e841 2300 	strex	r3, r2, [r1]
 800a32e:	613b      	str	r3, [r7, #16]
   return(result);
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1e5      	bne.n	800a302 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d013      	beq.n	800a366 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a342:	4a19      	ldr	r2, [pc, #100]	; (800a3a8 <HAL_UART_AbortReceive_IT+0x160>)
 800a344:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7fe f9d7 	bl	80086fe <HAL_DMA_Abort_IT>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d022      	beq.n	800a39c <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a360:	4610      	mov	r0, r2
 800a362:	4798      	blx	r3
 800a364:	e01a      	b.n	800a39c <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2220      	movs	r2, #32
 800a370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fabc 	bl	800a8f8 <HAL_UART_AbortReceiveCpltCallback>
 800a380:	e00c      	b.n	800a39c <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2220      	movs	r2, #32
 800a38c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 faae 	bl	800a8f8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3768      	adds	r7, #104	; 0x68
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	0800aa87 	.word	0x0800aa87

0800a3ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b0ba      	sub	sp, #232	; 0xe8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	695b      	ldr	r3, [r3, #20]
 800a3ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a3de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3e2:	f003 030f 	and.w	r3, r3, #15
 800a3e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a3ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10f      	bne.n	800a412 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3f6:	f003 0320 	and.w	r3, r3, #32
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d009      	beq.n	800a412 <HAL_UART_IRQHandler+0x66>
 800a3fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fbbb 	bl	800ab86 <UART_Receive_IT>
      return;
 800a410:	e25b      	b.n	800a8ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 80de 	beq.w	800a5d8 <HAL_UART_IRQHandler+0x22c>
 800a41c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a420:	f003 0301 	and.w	r3, r3, #1
 800a424:	2b00      	cmp	r3, #0
 800a426:	d106      	bne.n	800a436 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a42c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a430:	2b00      	cmp	r3, #0
 800a432:	f000 80d1 	beq.w	800a5d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00b      	beq.n	800a45a <HAL_UART_IRQHandler+0xae>
 800a442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d005      	beq.n	800a45a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a452:	f043 0201 	orr.w	r2, r3, #1
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a45a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a45e:	f003 0304 	and.w	r3, r3, #4
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00b      	beq.n	800a47e <HAL_UART_IRQHandler+0xd2>
 800a466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a46a:	f003 0301 	and.w	r3, r3, #1
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d005      	beq.n	800a47e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a476:	f043 0202 	orr.w	r2, r3, #2
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a47e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a482:	f003 0302 	and.w	r3, r3, #2
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00b      	beq.n	800a4a2 <HAL_UART_IRQHandler+0xf6>
 800a48a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a48e:	f003 0301 	and.w	r3, r3, #1
 800a492:	2b00      	cmp	r3, #0
 800a494:	d005      	beq.n	800a4a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a49a:	f043 0204 	orr.w	r2, r3, #4
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a4a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4a6:	f003 0308 	and.w	r3, r3, #8
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d011      	beq.n	800a4d2 <HAL_UART_IRQHandler+0x126>
 800a4ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4b2:	f003 0320 	and.w	r3, r3, #32
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d105      	bne.n	800a4c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a4ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d005      	beq.n	800a4d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ca:	f043 0208 	orr.w	r2, r3, #8
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f000 81f2 	beq.w	800a8c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4e0:	f003 0320 	and.w	r3, r3, #32
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d008      	beq.n	800a4fa <HAL_UART_IRQHandler+0x14e>
 800a4e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4ec:	f003 0320 	and.w	r3, r3, #32
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fb46 	bl	800ab86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a504:	2b40      	cmp	r3, #64	; 0x40
 800a506:	bf0c      	ite	eq
 800a508:	2301      	moveq	r3, #1
 800a50a:	2300      	movne	r3, #0
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a516:	f003 0308 	and.w	r3, r3, #8
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d103      	bne.n	800a526 <HAL_UART_IRQHandler+0x17a>
 800a51e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a522:	2b00      	cmp	r3, #0
 800a524:	d04f      	beq.n	800a5c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fa36 	bl	800a998 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a536:	2b40      	cmp	r3, #64	; 0x40
 800a538:	d141      	bne.n	800a5be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3314      	adds	r3, #20
 800a540:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a544:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a548:	e853 3f00 	ldrex	r3, [r3]
 800a54c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3314      	adds	r3, #20
 800a562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a566:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a56a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a576:	e841 2300 	strex	r3, r2, [r1]
 800a57a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a57e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1d9      	bne.n	800a53a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d013      	beq.n	800a5b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a592:	4a7e      	ldr	r2, [pc, #504]	; (800a78c <HAL_UART_IRQHandler+0x3e0>)
 800a594:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fe f8af 	bl	80086fe <HAL_DMA_Abort_IT>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d016      	beq.n	800a5d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a5b0:	4610      	mov	r0, r2
 800a5b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5b4:	e00e      	b.n	800a5d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f994 	bl	800a8e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5bc:	e00a      	b.n	800a5d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f990 	bl	800a8e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c4:	e006      	b.n	800a5d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 f98c 	bl	800a8e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800a5d2:	e175      	b.n	800a8c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5d4:	bf00      	nop
    return;
 800a5d6:	e173      	b.n	800a8c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	f040 814f 	bne.w	800a880 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a5e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5e6:	f003 0310 	and.w	r3, r3, #16
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f000 8148 	beq.w	800a880 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a5f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5f4:	f003 0310 	and.w	r3, r3, #16
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f000 8141 	beq.w	800a880 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a5fe:	2300      	movs	r3, #0
 800a600:	60bb      	str	r3, [r7, #8]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	60bb      	str	r3, [r7, #8]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	60bb      	str	r3, [r7, #8]
 800a612:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a61e:	2b40      	cmp	r3, #64	; 0x40
 800a620:	f040 80b6 	bne.w	800a790 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a630:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 8145 	beq.w	800a8c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a63e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a642:	429a      	cmp	r2, r3
 800a644:	f080 813e 	bcs.w	800a8c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a64e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a654:	69db      	ldr	r3, [r3, #28]
 800a656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a65a:	f000 8088 	beq.w	800a76e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	330c      	adds	r3, #12
 800a664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a668:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a66c:	e853 3f00 	ldrex	r3, [r3]
 800a670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a67c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	330c      	adds	r3, #12
 800a686:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a68a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a68e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a692:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a696:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a6a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1d9      	bne.n	800a65e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	3314      	adds	r3, #20
 800a6b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6b4:	e853 3f00 	ldrex	r3, [r3]
 800a6b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a6ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6bc:	f023 0301 	bic.w	r3, r3, #1
 800a6c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3314      	adds	r3, #20
 800a6ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a6ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a6d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a6d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a6da:	e841 2300 	strex	r3, r2, [r1]
 800a6de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a6e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1e1      	bne.n	800a6aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	3314      	adds	r3, #20
 800a6ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6f0:	e853 3f00 	ldrex	r3, [r3]
 800a6f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a6f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	3314      	adds	r3, #20
 800a706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a70a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a70c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a710:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a712:	e841 2300 	strex	r3, r2, [r1]
 800a716:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1e3      	bne.n	800a6e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2220      	movs	r2, #32
 800a722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	330c      	adds	r3, #12
 800a732:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a736:	e853 3f00 	ldrex	r3, [r3]
 800a73a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a73c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a73e:	f023 0310 	bic.w	r3, r3, #16
 800a742:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	330c      	adds	r3, #12
 800a74c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a750:	65ba      	str	r2, [r7, #88]	; 0x58
 800a752:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a754:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a756:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a758:	e841 2300 	strex	r3, r2, [r1]
 800a75c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a75e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1e3      	bne.n	800a72c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fd ff58 	bl	800861e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2202      	movs	r2, #2
 800a772:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	b29b      	uxth	r3, r3
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f8c1 	bl	800a90c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a78a:	e09b      	b.n	800a8c4 <HAL_UART_IRQHandler+0x518>
 800a78c:	0800aa5f 	.word	0x0800aa5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a798:	b29b      	uxth	r3, r3
 800a79a:	1ad3      	subs	r3, r2, r3
 800a79c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f000 808e 	beq.w	800a8c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a7ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 8089 	beq.w	800a8c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	330c      	adds	r3, #12
 800a7bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c0:	e853 3f00 	ldrex	r3, [r3]
 800a7c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	330c      	adds	r3, #12
 800a7d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a7da:	647a      	str	r2, [r7, #68]	; 0x44
 800a7dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7e2:	e841 2300 	strex	r3, r2, [r1]
 800a7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1e3      	bne.n	800a7b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3314      	adds	r3, #20
 800a7f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f8:	e853 3f00 	ldrex	r3, [r3]
 800a7fc:	623b      	str	r3, [r7, #32]
   return(result);
 800a7fe:	6a3b      	ldr	r3, [r7, #32]
 800a800:	f023 0301 	bic.w	r3, r3, #1
 800a804:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	3314      	adds	r3, #20
 800a80e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a812:	633a      	str	r2, [r7, #48]	; 0x30
 800a814:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a81a:	e841 2300 	strex	r3, r2, [r1]
 800a81e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1e3      	bne.n	800a7ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2220      	movs	r2, #32
 800a82a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	330c      	adds	r3, #12
 800a83a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	e853 3f00 	ldrex	r3, [r3]
 800a842:	60fb      	str	r3, [r7, #12]
   return(result);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f023 0310 	bic.w	r3, r3, #16
 800a84a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	330c      	adds	r3, #12
 800a854:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a858:	61fa      	str	r2, [r7, #28]
 800a85a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85c:	69b9      	ldr	r1, [r7, #24]
 800a85e:	69fa      	ldr	r2, [r7, #28]
 800a860:	e841 2300 	strex	r3, r2, [r1]
 800a864:	617b      	str	r3, [r7, #20]
   return(result);
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1e3      	bne.n	800a834 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2202      	movs	r2, #2
 800a870:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a872:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f847 	bl	800a90c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a87e:	e023      	b.n	800a8c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d009      	beq.n	800a8a0 <HAL_UART_IRQHandler+0x4f4>
 800a88c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a894:	2b00      	cmp	r3, #0
 800a896:	d003      	beq.n	800a8a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f90c 	bl	800aab6 <UART_Transmit_IT>
    return;
 800a89e:	e014      	b.n	800a8ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00e      	beq.n	800a8ca <HAL_UART_IRQHandler+0x51e>
 800a8ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d008      	beq.n	800a8ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f94c 	bl	800ab56 <UART_EndTransmit_IT>
    return;
 800a8be:	e004      	b.n	800a8ca <HAL_UART_IRQHandler+0x51e>
    return;
 800a8c0:	bf00      	nop
 800a8c2:	e002      	b.n	800a8ca <HAL_UART_IRQHandler+0x51e>
      return;
 800a8c4:	bf00      	nop
 800a8c6:	e000      	b.n	800a8ca <HAL_UART_IRQHandler+0x51e>
      return;
 800a8c8:	bf00      	nop
  }
}
 800a8ca:	37e8      	adds	r7, #232	; 0xe8
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	460b      	mov	r3, r1
 800a916:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a918:	bf00      	nop
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	4613      	mov	r3, r2
 800a930:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	88fa      	ldrh	r2, [r7, #6]
 800a93c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	88fa      	ldrh	r2, [r7, #6]
 800a942:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2222      	movs	r2, #34	; 0x22
 800a94e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d007      	beq.n	800a96a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68da      	ldr	r2, [r3, #12]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a968:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	695a      	ldr	r2, [r3, #20]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f042 0201 	orr.w	r2, r2, #1
 800a978:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68da      	ldr	r2, [r3, #12]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f042 0220 	orr.w	r2, r2, #32
 800a988:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3714      	adds	r7, #20
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a998:	b480      	push	{r7}
 800a99a:	b095      	sub	sp, #84	; 0x54
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	330c      	adds	r3, #12
 800a9a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9aa:	e853 3f00 	ldrex	r3, [r3]
 800a9ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	330c      	adds	r3, #12
 800a9be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a9c0:	643a      	str	r2, [r7, #64]	; 0x40
 800a9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9c8:	e841 2300 	strex	r3, r2, [r1]
 800a9cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1e5      	bne.n	800a9a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	3314      	adds	r3, #20
 800a9da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	e853 3f00 	ldrex	r3, [r3]
 800a9e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	f023 0301 	bic.w	r3, r3, #1
 800a9ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3314      	adds	r3, #20
 800a9f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a9f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9fc:	e841 2300 	strex	r3, r2, [r1]
 800aa00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1e5      	bne.n	800a9d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d119      	bne.n	800aa44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	330c      	adds	r3, #12
 800aa16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	e853 3f00 	ldrex	r3, [r3]
 800aa1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	f023 0310 	bic.w	r3, r3, #16
 800aa26:	647b      	str	r3, [r7, #68]	; 0x44
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	330c      	adds	r3, #12
 800aa2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa30:	61ba      	str	r2, [r7, #24]
 800aa32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa34:	6979      	ldr	r1, [r7, #20]
 800aa36:	69ba      	ldr	r2, [r7, #24]
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e5      	bne.n	800aa10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2220      	movs	r2, #32
 800aa48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aa52:	bf00      	nop
 800aa54:	3754      	adds	r7, #84	; 0x54
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr

0800aa5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b084      	sub	sp, #16
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f7ff ff33 	bl	800a8e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa7e:	bf00      	nop
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b084      	sub	sp, #16
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa92:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2220      	movs	r2, #32
 800aa9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f7ff ff25 	bl	800a8f8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaae:	bf00      	nop
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b085      	sub	sp, #20
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b21      	cmp	r3, #33	; 0x21
 800aac8:	d13e      	bne.n	800ab48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad2:	d114      	bne.n	800aafe <UART_Transmit_IT+0x48>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d110      	bne.n	800aafe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a1b      	ldr	r3, [r3, #32]
 800aae0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	881b      	ldrh	r3, [r3, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aaf0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a1b      	ldr	r3, [r3, #32]
 800aaf6:	1c9a      	adds	r2, r3, #2
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	621a      	str	r2, [r3, #32]
 800aafc:	e008      	b.n	800ab10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a1b      	ldr	r3, [r3, #32]
 800ab02:	1c59      	adds	r1, r3, #1
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	6211      	str	r1, [r2, #32]
 800ab08:	781a      	ldrb	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	3b01      	subs	r3, #1
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10f      	bne.n	800ab44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68da      	ldr	r2, [r3, #12]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	e000      	b.n	800ab4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ab48:	2302      	movs	r3, #2
  }
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3714      	adds	r7, #20
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b082      	sub	sp, #8
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68da      	ldr	r2, [r3, #12]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2220      	movs	r2, #32
 800ab72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7ff feaa 	bl	800a8d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b08c      	sub	sp, #48	; 0x30
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b22      	cmp	r3, #34	; 0x22
 800ab98:	f040 80ae 	bne.w	800acf8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aba4:	d117      	bne.n	800abd6 <UART_Receive_IT+0x50>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d113      	bne.n	800abd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800abae:	2300      	movs	r3, #0
 800abb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abce:	1c9a      	adds	r2, r3, #2
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	629a      	str	r2, [r3, #40]	; 0x28
 800abd4:	e026      	b.n	800ac24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800abdc:	2300      	movs	r3, #0
 800abde:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abe8:	d007      	beq.n	800abfa <UART_Receive_IT+0x74>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10a      	bne.n	800ac08 <UART_Receive_IT+0x82>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d106      	bne.n	800ac08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	b2da      	uxtb	r2, r3
 800ac02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac04:	701a      	strb	r2, [r3, #0]
 800ac06:	e008      	b.n	800ac1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac1e:	1c5a      	adds	r2, r3, #1
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	4619      	mov	r1, r3
 800ac32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d15d      	bne.n	800acf4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68da      	ldr	r2, [r3, #12]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f022 0220 	bic.w	r2, r2, #32
 800ac46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	68da      	ldr	r2, [r3, #12]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	695a      	ldr	r2, [r3, #20]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f022 0201 	bic.w	r2, r2, #1
 800ac66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2220      	movs	r2, #32
 800ac6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d135      	bne.n	800acea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	330c      	adds	r3, #12
 800ac8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	e853 3f00 	ldrex	r3, [r3]
 800ac92:	613b      	str	r3, [r7, #16]
   return(result);
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	f023 0310 	bic.w	r3, r3, #16
 800ac9a:	627b      	str	r3, [r7, #36]	; 0x24
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	330c      	adds	r3, #12
 800aca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aca4:	623a      	str	r2, [r7, #32]
 800aca6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca8:	69f9      	ldr	r1, [r7, #28]
 800acaa:	6a3a      	ldr	r2, [r7, #32]
 800acac:	e841 2300 	strex	r3, r2, [r1]
 800acb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1e5      	bne.n	800ac84 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0310 	and.w	r3, r3, #16
 800acc2:	2b10      	cmp	r3, #16
 800acc4:	d10a      	bne.n	800acdc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800acc6:	2300      	movs	r3, #0
 800acc8:	60fb      	str	r3, [r7, #12]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	60fb      	str	r3, [r7, #12]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	60fb      	str	r3, [r7, #12]
 800acda:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ace0:	4619      	mov	r1, r3
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7ff fe12 	bl	800a90c <HAL_UARTEx_RxEventCallback>
 800ace8:	e002      	b.n	800acf0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7fd f83e 	bl	8007d6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800acf0:	2300      	movs	r3, #0
 800acf2:	e002      	b.n	800acfa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	e000      	b.n	800acfa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800acf8:	2302      	movs	r3, #2
  }
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3730      	adds	r7, #48	; 0x30
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
	...

0800ad04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad08:	b0c0      	sub	sp, #256	; 0x100
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ad1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad20:	68d9      	ldr	r1, [r3, #12]
 800ad22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	ea40 0301 	orr.w	r3, r0, r1
 800ad2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ad2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad32:	689a      	ldr	r2, [r3, #8]
 800ad34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	431a      	orrs	r2, r3
 800ad3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad40:	695b      	ldr	r3, [r3, #20]
 800ad42:	431a      	orrs	r2, r3
 800ad44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad48:	69db      	ldr	r3, [r3, #28]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ad50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ad5c:	f021 010c 	bic.w	r1, r1, #12
 800ad60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ad6a:	430b      	orrs	r3, r1
 800ad6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	695b      	ldr	r3, [r3, #20]
 800ad76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ad7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad7e:	6999      	ldr	r1, [r3, #24]
 800ad80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	ea40 0301 	orr.w	r3, r0, r1
 800ad8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ad8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	4b8f      	ldr	r3, [pc, #572]	; (800afd0 <UART_SetConfig+0x2cc>)
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d005      	beq.n	800ada4 <UART_SetConfig+0xa0>
 800ad98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	4b8d      	ldr	r3, [pc, #564]	; (800afd4 <UART_SetConfig+0x2d0>)
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d104      	bne.n	800adae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ada4:	f7fd ffea 	bl	8008d7c <HAL_RCC_GetPCLK2Freq>
 800ada8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800adac:	e003      	b.n	800adb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800adae:	f7fd ffd1 	bl	8008d54 <HAL_RCC_GetPCLK1Freq>
 800adb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adba:	69db      	ldr	r3, [r3, #28]
 800adbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adc0:	f040 810c 	bne.w	800afdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800adc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adc8:	2200      	movs	r2, #0
 800adca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800adce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800add2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800add6:	4622      	mov	r2, r4
 800add8:	462b      	mov	r3, r5
 800adda:	1891      	adds	r1, r2, r2
 800addc:	65b9      	str	r1, [r7, #88]	; 0x58
 800adde:	415b      	adcs	r3, r3
 800ade0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ade2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ade6:	4621      	mov	r1, r4
 800ade8:	eb12 0801 	adds.w	r8, r2, r1
 800adec:	4629      	mov	r1, r5
 800adee:	eb43 0901 	adc.w	r9, r3, r1
 800adf2:	f04f 0200 	mov.w	r2, #0
 800adf6:	f04f 0300 	mov.w	r3, #0
 800adfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800adfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ae02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ae06:	4690      	mov	r8, r2
 800ae08:	4699      	mov	r9, r3
 800ae0a:	4623      	mov	r3, r4
 800ae0c:	eb18 0303 	adds.w	r3, r8, r3
 800ae10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae14:	462b      	mov	r3, r5
 800ae16:	eb49 0303 	adc.w	r3, r9, r3
 800ae1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ae2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ae32:	460b      	mov	r3, r1
 800ae34:	18db      	adds	r3, r3, r3
 800ae36:	653b      	str	r3, [r7, #80]	; 0x50
 800ae38:	4613      	mov	r3, r2
 800ae3a:	eb42 0303 	adc.w	r3, r2, r3
 800ae3e:	657b      	str	r3, [r7, #84]	; 0x54
 800ae40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ae44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ae48:	f7f5 fa32 	bl	80002b0 <__aeabi_uldivmod>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	460b      	mov	r3, r1
 800ae50:	4b61      	ldr	r3, [pc, #388]	; (800afd8 <UART_SetConfig+0x2d4>)
 800ae52:	fba3 2302 	umull	r2, r3, r3, r2
 800ae56:	095b      	lsrs	r3, r3, #5
 800ae58:	011c      	lsls	r4, r3, #4
 800ae5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ae68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ae6c:	4642      	mov	r2, r8
 800ae6e:	464b      	mov	r3, r9
 800ae70:	1891      	adds	r1, r2, r2
 800ae72:	64b9      	str	r1, [r7, #72]	; 0x48
 800ae74:	415b      	adcs	r3, r3
 800ae76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ae7c:	4641      	mov	r1, r8
 800ae7e:	eb12 0a01 	adds.w	sl, r2, r1
 800ae82:	4649      	mov	r1, r9
 800ae84:	eb43 0b01 	adc.w	fp, r3, r1
 800ae88:	f04f 0200 	mov.w	r2, #0
 800ae8c:	f04f 0300 	mov.w	r3, #0
 800ae90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ae94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ae98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae9c:	4692      	mov	sl, r2
 800ae9e:	469b      	mov	fp, r3
 800aea0:	4643      	mov	r3, r8
 800aea2:	eb1a 0303 	adds.w	r3, sl, r3
 800aea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aeaa:	464b      	mov	r3, r9
 800aeac:	eb4b 0303 	adc.w	r3, fp, r3
 800aeb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aeb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aec0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800aec4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aec8:	460b      	mov	r3, r1
 800aeca:	18db      	adds	r3, r3, r3
 800aecc:	643b      	str	r3, [r7, #64]	; 0x40
 800aece:	4613      	mov	r3, r2
 800aed0:	eb42 0303 	adc.w	r3, r2, r3
 800aed4:	647b      	str	r3, [r7, #68]	; 0x44
 800aed6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aeda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800aede:	f7f5 f9e7 	bl	80002b0 <__aeabi_uldivmod>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	4611      	mov	r1, r2
 800aee8:	4b3b      	ldr	r3, [pc, #236]	; (800afd8 <UART_SetConfig+0x2d4>)
 800aeea:	fba3 2301 	umull	r2, r3, r3, r1
 800aeee:	095b      	lsrs	r3, r3, #5
 800aef0:	2264      	movs	r2, #100	; 0x64
 800aef2:	fb02 f303 	mul.w	r3, r2, r3
 800aef6:	1acb      	subs	r3, r1, r3
 800aef8:	00db      	lsls	r3, r3, #3
 800aefa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aefe:	4b36      	ldr	r3, [pc, #216]	; (800afd8 <UART_SetConfig+0x2d4>)
 800af00:	fba3 2302 	umull	r2, r3, r3, r2
 800af04:	095b      	lsrs	r3, r3, #5
 800af06:	005b      	lsls	r3, r3, #1
 800af08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800af0c:	441c      	add	r4, r3
 800af0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af12:	2200      	movs	r2, #0
 800af14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800af1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800af20:	4642      	mov	r2, r8
 800af22:	464b      	mov	r3, r9
 800af24:	1891      	adds	r1, r2, r2
 800af26:	63b9      	str	r1, [r7, #56]	; 0x38
 800af28:	415b      	adcs	r3, r3
 800af2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800af30:	4641      	mov	r1, r8
 800af32:	1851      	adds	r1, r2, r1
 800af34:	6339      	str	r1, [r7, #48]	; 0x30
 800af36:	4649      	mov	r1, r9
 800af38:	414b      	adcs	r3, r1
 800af3a:	637b      	str	r3, [r7, #52]	; 0x34
 800af3c:	f04f 0200 	mov.w	r2, #0
 800af40:	f04f 0300 	mov.w	r3, #0
 800af44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800af48:	4659      	mov	r1, fp
 800af4a:	00cb      	lsls	r3, r1, #3
 800af4c:	4651      	mov	r1, sl
 800af4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af52:	4651      	mov	r1, sl
 800af54:	00ca      	lsls	r2, r1, #3
 800af56:	4610      	mov	r0, r2
 800af58:	4619      	mov	r1, r3
 800af5a:	4603      	mov	r3, r0
 800af5c:	4642      	mov	r2, r8
 800af5e:	189b      	adds	r3, r3, r2
 800af60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af64:	464b      	mov	r3, r9
 800af66:	460a      	mov	r2, r1
 800af68:	eb42 0303 	adc.w	r3, r2, r3
 800af6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800af7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800af80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800af84:	460b      	mov	r3, r1
 800af86:	18db      	adds	r3, r3, r3
 800af88:	62bb      	str	r3, [r7, #40]	; 0x28
 800af8a:	4613      	mov	r3, r2
 800af8c:	eb42 0303 	adc.w	r3, r2, r3
 800af90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800af96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800af9a:	f7f5 f989 	bl	80002b0 <__aeabi_uldivmod>
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	4b0d      	ldr	r3, [pc, #52]	; (800afd8 <UART_SetConfig+0x2d4>)
 800afa4:	fba3 1302 	umull	r1, r3, r3, r2
 800afa8:	095b      	lsrs	r3, r3, #5
 800afaa:	2164      	movs	r1, #100	; 0x64
 800afac:	fb01 f303 	mul.w	r3, r1, r3
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	00db      	lsls	r3, r3, #3
 800afb4:	3332      	adds	r3, #50	; 0x32
 800afb6:	4a08      	ldr	r2, [pc, #32]	; (800afd8 <UART_SetConfig+0x2d4>)
 800afb8:	fba2 2303 	umull	r2, r3, r2, r3
 800afbc:	095b      	lsrs	r3, r3, #5
 800afbe:	f003 0207 	and.w	r2, r3, #7
 800afc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4422      	add	r2, r4
 800afca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800afcc:	e106      	b.n	800b1dc <UART_SetConfig+0x4d8>
 800afce:	bf00      	nop
 800afd0:	40011000 	.word	0x40011000
 800afd4:	40011400 	.word	0x40011400
 800afd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800afdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afe0:	2200      	movs	r2, #0
 800afe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800afe6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800afea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800afee:	4642      	mov	r2, r8
 800aff0:	464b      	mov	r3, r9
 800aff2:	1891      	adds	r1, r2, r2
 800aff4:	6239      	str	r1, [r7, #32]
 800aff6:	415b      	adcs	r3, r3
 800aff8:	627b      	str	r3, [r7, #36]	; 0x24
 800affa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800affe:	4641      	mov	r1, r8
 800b000:	1854      	adds	r4, r2, r1
 800b002:	4649      	mov	r1, r9
 800b004:	eb43 0501 	adc.w	r5, r3, r1
 800b008:	f04f 0200 	mov.w	r2, #0
 800b00c:	f04f 0300 	mov.w	r3, #0
 800b010:	00eb      	lsls	r3, r5, #3
 800b012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b016:	00e2      	lsls	r2, r4, #3
 800b018:	4614      	mov	r4, r2
 800b01a:	461d      	mov	r5, r3
 800b01c:	4643      	mov	r3, r8
 800b01e:	18e3      	adds	r3, r4, r3
 800b020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b024:	464b      	mov	r3, r9
 800b026:	eb45 0303 	adc.w	r3, r5, r3
 800b02a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b02e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b03a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b03e:	f04f 0200 	mov.w	r2, #0
 800b042:	f04f 0300 	mov.w	r3, #0
 800b046:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b04a:	4629      	mov	r1, r5
 800b04c:	008b      	lsls	r3, r1, #2
 800b04e:	4621      	mov	r1, r4
 800b050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b054:	4621      	mov	r1, r4
 800b056:	008a      	lsls	r2, r1, #2
 800b058:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b05c:	f7f5 f928 	bl	80002b0 <__aeabi_uldivmod>
 800b060:	4602      	mov	r2, r0
 800b062:	460b      	mov	r3, r1
 800b064:	4b60      	ldr	r3, [pc, #384]	; (800b1e8 <UART_SetConfig+0x4e4>)
 800b066:	fba3 2302 	umull	r2, r3, r3, r2
 800b06a:	095b      	lsrs	r3, r3, #5
 800b06c:	011c      	lsls	r4, r3, #4
 800b06e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b072:	2200      	movs	r2, #0
 800b074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b078:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b07c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b080:	4642      	mov	r2, r8
 800b082:	464b      	mov	r3, r9
 800b084:	1891      	adds	r1, r2, r2
 800b086:	61b9      	str	r1, [r7, #24]
 800b088:	415b      	adcs	r3, r3
 800b08a:	61fb      	str	r3, [r7, #28]
 800b08c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b090:	4641      	mov	r1, r8
 800b092:	1851      	adds	r1, r2, r1
 800b094:	6139      	str	r1, [r7, #16]
 800b096:	4649      	mov	r1, r9
 800b098:	414b      	adcs	r3, r1
 800b09a:	617b      	str	r3, [r7, #20]
 800b09c:	f04f 0200 	mov.w	r2, #0
 800b0a0:	f04f 0300 	mov.w	r3, #0
 800b0a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b0a8:	4659      	mov	r1, fp
 800b0aa:	00cb      	lsls	r3, r1, #3
 800b0ac:	4651      	mov	r1, sl
 800b0ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0b2:	4651      	mov	r1, sl
 800b0b4:	00ca      	lsls	r2, r1, #3
 800b0b6:	4610      	mov	r0, r2
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	4642      	mov	r2, r8
 800b0be:	189b      	adds	r3, r3, r2
 800b0c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b0c4:	464b      	mov	r3, r9
 800b0c6:	460a      	mov	r2, r1
 800b0c8:	eb42 0303 	adc.w	r3, r2, r3
 800b0cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b0d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b0da:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b0dc:	f04f 0200 	mov.w	r2, #0
 800b0e0:	f04f 0300 	mov.w	r3, #0
 800b0e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	008b      	lsls	r3, r1, #2
 800b0ec:	4641      	mov	r1, r8
 800b0ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0f2:	4641      	mov	r1, r8
 800b0f4:	008a      	lsls	r2, r1, #2
 800b0f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b0fa:	f7f5 f8d9 	bl	80002b0 <__aeabi_uldivmod>
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	4611      	mov	r1, r2
 800b104:	4b38      	ldr	r3, [pc, #224]	; (800b1e8 <UART_SetConfig+0x4e4>)
 800b106:	fba3 2301 	umull	r2, r3, r3, r1
 800b10a:	095b      	lsrs	r3, r3, #5
 800b10c:	2264      	movs	r2, #100	; 0x64
 800b10e:	fb02 f303 	mul.w	r3, r2, r3
 800b112:	1acb      	subs	r3, r1, r3
 800b114:	011b      	lsls	r3, r3, #4
 800b116:	3332      	adds	r3, #50	; 0x32
 800b118:	4a33      	ldr	r2, [pc, #204]	; (800b1e8 <UART_SetConfig+0x4e4>)
 800b11a:	fba2 2303 	umull	r2, r3, r2, r3
 800b11e:	095b      	lsrs	r3, r3, #5
 800b120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b124:	441c      	add	r4, r3
 800b126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b12a:	2200      	movs	r2, #0
 800b12c:	673b      	str	r3, [r7, #112]	; 0x70
 800b12e:	677a      	str	r2, [r7, #116]	; 0x74
 800b130:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b134:	4642      	mov	r2, r8
 800b136:	464b      	mov	r3, r9
 800b138:	1891      	adds	r1, r2, r2
 800b13a:	60b9      	str	r1, [r7, #8]
 800b13c:	415b      	adcs	r3, r3
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b144:	4641      	mov	r1, r8
 800b146:	1851      	adds	r1, r2, r1
 800b148:	6039      	str	r1, [r7, #0]
 800b14a:	4649      	mov	r1, r9
 800b14c:	414b      	adcs	r3, r1
 800b14e:	607b      	str	r3, [r7, #4]
 800b150:	f04f 0200 	mov.w	r2, #0
 800b154:	f04f 0300 	mov.w	r3, #0
 800b158:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b15c:	4659      	mov	r1, fp
 800b15e:	00cb      	lsls	r3, r1, #3
 800b160:	4651      	mov	r1, sl
 800b162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b166:	4651      	mov	r1, sl
 800b168:	00ca      	lsls	r2, r1, #3
 800b16a:	4610      	mov	r0, r2
 800b16c:	4619      	mov	r1, r3
 800b16e:	4603      	mov	r3, r0
 800b170:	4642      	mov	r2, r8
 800b172:	189b      	adds	r3, r3, r2
 800b174:	66bb      	str	r3, [r7, #104]	; 0x68
 800b176:	464b      	mov	r3, r9
 800b178:	460a      	mov	r2, r1
 800b17a:	eb42 0303 	adc.w	r3, r2, r3
 800b17e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	663b      	str	r3, [r7, #96]	; 0x60
 800b18a:	667a      	str	r2, [r7, #100]	; 0x64
 800b18c:	f04f 0200 	mov.w	r2, #0
 800b190:	f04f 0300 	mov.w	r3, #0
 800b194:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b198:	4649      	mov	r1, r9
 800b19a:	008b      	lsls	r3, r1, #2
 800b19c:	4641      	mov	r1, r8
 800b19e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1a2:	4641      	mov	r1, r8
 800b1a4:	008a      	lsls	r2, r1, #2
 800b1a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b1aa:	f7f5 f881 	bl	80002b0 <__aeabi_uldivmod>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	4b0d      	ldr	r3, [pc, #52]	; (800b1e8 <UART_SetConfig+0x4e4>)
 800b1b4:	fba3 1302 	umull	r1, r3, r3, r2
 800b1b8:	095b      	lsrs	r3, r3, #5
 800b1ba:	2164      	movs	r1, #100	; 0x64
 800b1bc:	fb01 f303 	mul.w	r3, r1, r3
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	011b      	lsls	r3, r3, #4
 800b1c4:	3332      	adds	r3, #50	; 0x32
 800b1c6:	4a08      	ldr	r2, [pc, #32]	; (800b1e8 <UART_SetConfig+0x4e4>)
 800b1c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1cc:	095b      	lsrs	r3, r3, #5
 800b1ce:	f003 020f 	and.w	r2, r3, #15
 800b1d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4422      	add	r2, r4
 800b1da:	609a      	str	r2, [r3, #8]
}
 800b1dc:	bf00      	nop
 800b1de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1e8:	51eb851f 	.word	0x51eb851f

0800b1ec <srand>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4b10      	ldr	r3, [pc, #64]	; (800b230 <srand+0x44>)
 800b1f0:	681d      	ldr	r5, [r3, #0]
 800b1f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	b9b3      	cbnz	r3, 800b226 <srand+0x3a>
 800b1f8:	2018      	movs	r0, #24
 800b1fa:	f000 fa5d 	bl	800b6b8 <malloc>
 800b1fe:	4602      	mov	r2, r0
 800b200:	6328      	str	r0, [r5, #48]	; 0x30
 800b202:	b920      	cbnz	r0, 800b20e <srand+0x22>
 800b204:	4b0b      	ldr	r3, [pc, #44]	; (800b234 <srand+0x48>)
 800b206:	480c      	ldr	r0, [pc, #48]	; (800b238 <srand+0x4c>)
 800b208:	2146      	movs	r1, #70	; 0x46
 800b20a:	f000 f9eb 	bl	800b5e4 <__assert_func>
 800b20e:	490b      	ldr	r1, [pc, #44]	; (800b23c <srand+0x50>)
 800b210:	4b0b      	ldr	r3, [pc, #44]	; (800b240 <srand+0x54>)
 800b212:	e9c0 1300 	strd	r1, r3, [r0]
 800b216:	4b0b      	ldr	r3, [pc, #44]	; (800b244 <srand+0x58>)
 800b218:	6083      	str	r3, [r0, #8]
 800b21a:	230b      	movs	r3, #11
 800b21c:	8183      	strh	r3, [r0, #12]
 800b21e:	2100      	movs	r1, #0
 800b220:	2001      	movs	r0, #1
 800b222:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b226:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b228:	2200      	movs	r2, #0
 800b22a:	611c      	str	r4, [r3, #16]
 800b22c:	615a      	str	r2, [r3, #20]
 800b22e:	bd38      	pop	{r3, r4, r5, pc}
 800b230:	20000080 	.word	0x20000080
 800b234:	0806e43c 	.word	0x0806e43c
 800b238:	0806e453 	.word	0x0806e453
 800b23c:	abcd330e 	.word	0xabcd330e
 800b240:	e66d1234 	.word	0xe66d1234
 800b244:	0005deec 	.word	0x0005deec

0800b248 <rand>:
 800b248:	4b16      	ldr	r3, [pc, #88]	; (800b2a4 <rand+0x5c>)
 800b24a:	b510      	push	{r4, lr}
 800b24c:	681c      	ldr	r4, [r3, #0]
 800b24e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b250:	b9b3      	cbnz	r3, 800b280 <rand+0x38>
 800b252:	2018      	movs	r0, #24
 800b254:	f000 fa30 	bl	800b6b8 <malloc>
 800b258:	4602      	mov	r2, r0
 800b25a:	6320      	str	r0, [r4, #48]	; 0x30
 800b25c:	b920      	cbnz	r0, 800b268 <rand+0x20>
 800b25e:	4b12      	ldr	r3, [pc, #72]	; (800b2a8 <rand+0x60>)
 800b260:	4812      	ldr	r0, [pc, #72]	; (800b2ac <rand+0x64>)
 800b262:	2152      	movs	r1, #82	; 0x52
 800b264:	f000 f9be 	bl	800b5e4 <__assert_func>
 800b268:	4911      	ldr	r1, [pc, #68]	; (800b2b0 <rand+0x68>)
 800b26a:	4b12      	ldr	r3, [pc, #72]	; (800b2b4 <rand+0x6c>)
 800b26c:	e9c0 1300 	strd	r1, r3, [r0]
 800b270:	4b11      	ldr	r3, [pc, #68]	; (800b2b8 <rand+0x70>)
 800b272:	6083      	str	r3, [r0, #8]
 800b274:	230b      	movs	r3, #11
 800b276:	8183      	strh	r3, [r0, #12]
 800b278:	2100      	movs	r1, #0
 800b27a:	2001      	movs	r0, #1
 800b27c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b280:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b282:	480e      	ldr	r0, [pc, #56]	; (800b2bc <rand+0x74>)
 800b284:	690b      	ldr	r3, [r1, #16]
 800b286:	694c      	ldr	r4, [r1, #20]
 800b288:	4a0d      	ldr	r2, [pc, #52]	; (800b2c0 <rand+0x78>)
 800b28a:	4358      	muls	r0, r3
 800b28c:	fb02 0004 	mla	r0, r2, r4, r0
 800b290:	fba3 3202 	umull	r3, r2, r3, r2
 800b294:	3301      	adds	r3, #1
 800b296:	eb40 0002 	adc.w	r0, r0, r2
 800b29a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b29e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b2a2:	bd10      	pop	{r4, pc}
 800b2a4:	20000080 	.word	0x20000080
 800b2a8:	0806e43c 	.word	0x0806e43c
 800b2ac:	0806e453 	.word	0x0806e453
 800b2b0:	abcd330e 	.word	0xabcd330e
 800b2b4:	e66d1234 	.word	0xe66d1234
 800b2b8:	0005deec 	.word	0x0005deec
 800b2bc:	5851f42d 	.word	0x5851f42d
 800b2c0:	4c957f2d 	.word	0x4c957f2d

0800b2c4 <std>:
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	b510      	push	{r4, lr}
 800b2c8:	4604      	mov	r4, r0
 800b2ca:	e9c0 3300 	strd	r3, r3, [r0]
 800b2ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2d2:	6083      	str	r3, [r0, #8]
 800b2d4:	8181      	strh	r1, [r0, #12]
 800b2d6:	6643      	str	r3, [r0, #100]	; 0x64
 800b2d8:	81c2      	strh	r2, [r0, #14]
 800b2da:	6183      	str	r3, [r0, #24]
 800b2dc:	4619      	mov	r1, r3
 800b2de:	2208      	movs	r2, #8
 800b2e0:	305c      	adds	r0, #92	; 0x5c
 800b2e2:	f000 f8f4 	bl	800b4ce <memset>
 800b2e6:	4b0d      	ldr	r3, [pc, #52]	; (800b31c <std+0x58>)
 800b2e8:	6263      	str	r3, [r4, #36]	; 0x24
 800b2ea:	4b0d      	ldr	r3, [pc, #52]	; (800b320 <std+0x5c>)
 800b2ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2ee:	4b0d      	ldr	r3, [pc, #52]	; (800b324 <std+0x60>)
 800b2f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2f2:	4b0d      	ldr	r3, [pc, #52]	; (800b328 <std+0x64>)
 800b2f4:	6323      	str	r3, [r4, #48]	; 0x30
 800b2f6:	4b0d      	ldr	r3, [pc, #52]	; (800b32c <std+0x68>)
 800b2f8:	6224      	str	r4, [r4, #32]
 800b2fa:	429c      	cmp	r4, r3
 800b2fc:	d006      	beq.n	800b30c <std+0x48>
 800b2fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b302:	4294      	cmp	r4, r2
 800b304:	d002      	beq.n	800b30c <std+0x48>
 800b306:	33d0      	adds	r3, #208	; 0xd0
 800b308:	429c      	cmp	r4, r3
 800b30a:	d105      	bne.n	800b318 <std+0x54>
 800b30c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b314:	f000 b954 	b.w	800b5c0 <__retarget_lock_init_recursive>
 800b318:	bd10      	pop	{r4, pc}
 800b31a:	bf00      	nop
 800b31c:	0800b449 	.word	0x0800b449
 800b320:	0800b46b 	.word	0x0800b46b
 800b324:	0800b4a3 	.word	0x0800b4a3
 800b328:	0800b4c7 	.word	0x0800b4c7
 800b32c:	20000910 	.word	0x20000910

0800b330 <stdio_exit_handler>:
 800b330:	4a02      	ldr	r2, [pc, #8]	; (800b33c <stdio_exit_handler+0xc>)
 800b332:	4903      	ldr	r1, [pc, #12]	; (800b340 <stdio_exit_handler+0x10>)
 800b334:	4803      	ldr	r0, [pc, #12]	; (800b344 <stdio_exit_handler+0x14>)
 800b336:	f000 b869 	b.w	800b40c <_fwalk_sglue>
 800b33a:	bf00      	nop
 800b33c:	20000028 	.word	0x20000028
 800b340:	0800bc4d 	.word	0x0800bc4d
 800b344:	20000034 	.word	0x20000034

0800b348 <cleanup_stdio>:
 800b348:	6841      	ldr	r1, [r0, #4]
 800b34a:	4b0c      	ldr	r3, [pc, #48]	; (800b37c <cleanup_stdio+0x34>)
 800b34c:	4299      	cmp	r1, r3
 800b34e:	b510      	push	{r4, lr}
 800b350:	4604      	mov	r4, r0
 800b352:	d001      	beq.n	800b358 <cleanup_stdio+0x10>
 800b354:	f000 fc7a 	bl	800bc4c <_fflush_r>
 800b358:	68a1      	ldr	r1, [r4, #8]
 800b35a:	4b09      	ldr	r3, [pc, #36]	; (800b380 <cleanup_stdio+0x38>)
 800b35c:	4299      	cmp	r1, r3
 800b35e:	d002      	beq.n	800b366 <cleanup_stdio+0x1e>
 800b360:	4620      	mov	r0, r4
 800b362:	f000 fc73 	bl	800bc4c <_fflush_r>
 800b366:	68e1      	ldr	r1, [r4, #12]
 800b368:	4b06      	ldr	r3, [pc, #24]	; (800b384 <cleanup_stdio+0x3c>)
 800b36a:	4299      	cmp	r1, r3
 800b36c:	d004      	beq.n	800b378 <cleanup_stdio+0x30>
 800b36e:	4620      	mov	r0, r4
 800b370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b374:	f000 bc6a 	b.w	800bc4c <_fflush_r>
 800b378:	bd10      	pop	{r4, pc}
 800b37a:	bf00      	nop
 800b37c:	20000910 	.word	0x20000910
 800b380:	20000978 	.word	0x20000978
 800b384:	200009e0 	.word	0x200009e0

0800b388 <global_stdio_init.part.0>:
 800b388:	b510      	push	{r4, lr}
 800b38a:	4b0b      	ldr	r3, [pc, #44]	; (800b3b8 <global_stdio_init.part.0+0x30>)
 800b38c:	4c0b      	ldr	r4, [pc, #44]	; (800b3bc <global_stdio_init.part.0+0x34>)
 800b38e:	4a0c      	ldr	r2, [pc, #48]	; (800b3c0 <global_stdio_init.part.0+0x38>)
 800b390:	601a      	str	r2, [r3, #0]
 800b392:	4620      	mov	r0, r4
 800b394:	2200      	movs	r2, #0
 800b396:	2104      	movs	r1, #4
 800b398:	f7ff ff94 	bl	800b2c4 <std>
 800b39c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	2109      	movs	r1, #9
 800b3a4:	f7ff ff8e 	bl	800b2c4 <std>
 800b3a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b3ac:	2202      	movs	r2, #2
 800b3ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3b2:	2112      	movs	r1, #18
 800b3b4:	f7ff bf86 	b.w	800b2c4 <std>
 800b3b8:	20000a48 	.word	0x20000a48
 800b3bc:	20000910 	.word	0x20000910
 800b3c0:	0800b331 	.word	0x0800b331

0800b3c4 <__sfp_lock_acquire>:
 800b3c4:	4801      	ldr	r0, [pc, #4]	; (800b3cc <__sfp_lock_acquire+0x8>)
 800b3c6:	f000 b8fc 	b.w	800b5c2 <__retarget_lock_acquire_recursive>
 800b3ca:	bf00      	nop
 800b3cc:	20000a51 	.word	0x20000a51

0800b3d0 <__sfp_lock_release>:
 800b3d0:	4801      	ldr	r0, [pc, #4]	; (800b3d8 <__sfp_lock_release+0x8>)
 800b3d2:	f000 b8f7 	b.w	800b5c4 <__retarget_lock_release_recursive>
 800b3d6:	bf00      	nop
 800b3d8:	20000a51 	.word	0x20000a51

0800b3dc <__sinit>:
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	4604      	mov	r4, r0
 800b3e0:	f7ff fff0 	bl	800b3c4 <__sfp_lock_acquire>
 800b3e4:	6a23      	ldr	r3, [r4, #32]
 800b3e6:	b11b      	cbz	r3, 800b3f0 <__sinit+0x14>
 800b3e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3ec:	f7ff bff0 	b.w	800b3d0 <__sfp_lock_release>
 800b3f0:	4b04      	ldr	r3, [pc, #16]	; (800b404 <__sinit+0x28>)
 800b3f2:	6223      	str	r3, [r4, #32]
 800b3f4:	4b04      	ldr	r3, [pc, #16]	; (800b408 <__sinit+0x2c>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1f5      	bne.n	800b3e8 <__sinit+0xc>
 800b3fc:	f7ff ffc4 	bl	800b388 <global_stdio_init.part.0>
 800b400:	e7f2      	b.n	800b3e8 <__sinit+0xc>
 800b402:	bf00      	nop
 800b404:	0800b349 	.word	0x0800b349
 800b408:	20000a48 	.word	0x20000a48

0800b40c <_fwalk_sglue>:
 800b40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b410:	4607      	mov	r7, r0
 800b412:	4688      	mov	r8, r1
 800b414:	4614      	mov	r4, r2
 800b416:	2600      	movs	r6, #0
 800b418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b41c:	f1b9 0901 	subs.w	r9, r9, #1
 800b420:	d505      	bpl.n	800b42e <_fwalk_sglue+0x22>
 800b422:	6824      	ldr	r4, [r4, #0]
 800b424:	2c00      	cmp	r4, #0
 800b426:	d1f7      	bne.n	800b418 <_fwalk_sglue+0xc>
 800b428:	4630      	mov	r0, r6
 800b42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b42e:	89ab      	ldrh	r3, [r5, #12]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d907      	bls.n	800b444 <_fwalk_sglue+0x38>
 800b434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b438:	3301      	adds	r3, #1
 800b43a:	d003      	beq.n	800b444 <_fwalk_sglue+0x38>
 800b43c:	4629      	mov	r1, r5
 800b43e:	4638      	mov	r0, r7
 800b440:	47c0      	blx	r8
 800b442:	4306      	orrs	r6, r0
 800b444:	3568      	adds	r5, #104	; 0x68
 800b446:	e7e9      	b.n	800b41c <_fwalk_sglue+0x10>

0800b448 <__sread>:
 800b448:	b510      	push	{r4, lr}
 800b44a:	460c      	mov	r4, r1
 800b44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b450:	f000 f868 	bl	800b524 <_read_r>
 800b454:	2800      	cmp	r0, #0
 800b456:	bfab      	itete	ge
 800b458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b45a:	89a3      	ldrhlt	r3, [r4, #12]
 800b45c:	181b      	addge	r3, r3, r0
 800b45e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b462:	bfac      	ite	ge
 800b464:	6563      	strge	r3, [r4, #84]	; 0x54
 800b466:	81a3      	strhlt	r3, [r4, #12]
 800b468:	bd10      	pop	{r4, pc}

0800b46a <__swrite>:
 800b46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b46e:	461f      	mov	r7, r3
 800b470:	898b      	ldrh	r3, [r1, #12]
 800b472:	05db      	lsls	r3, r3, #23
 800b474:	4605      	mov	r5, r0
 800b476:	460c      	mov	r4, r1
 800b478:	4616      	mov	r6, r2
 800b47a:	d505      	bpl.n	800b488 <__swrite+0x1e>
 800b47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b480:	2302      	movs	r3, #2
 800b482:	2200      	movs	r2, #0
 800b484:	f000 f83c 	bl	800b500 <_lseek_r>
 800b488:	89a3      	ldrh	r3, [r4, #12]
 800b48a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b48e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b492:	81a3      	strh	r3, [r4, #12]
 800b494:	4632      	mov	r2, r6
 800b496:	463b      	mov	r3, r7
 800b498:	4628      	mov	r0, r5
 800b49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b49e:	f000 b853 	b.w	800b548 <_write_r>

0800b4a2 <__sseek>:
 800b4a2:	b510      	push	{r4, lr}
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4aa:	f000 f829 	bl	800b500 <_lseek_r>
 800b4ae:	1c43      	adds	r3, r0, #1
 800b4b0:	89a3      	ldrh	r3, [r4, #12]
 800b4b2:	bf15      	itete	ne
 800b4b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4be:	81a3      	strheq	r3, [r4, #12]
 800b4c0:	bf18      	it	ne
 800b4c2:	81a3      	strhne	r3, [r4, #12]
 800b4c4:	bd10      	pop	{r4, pc}

0800b4c6 <__sclose>:
 800b4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ca:	f000 b809 	b.w	800b4e0 <_close_r>

0800b4ce <memset>:
 800b4ce:	4402      	add	r2, r0
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d100      	bne.n	800b4d8 <memset+0xa>
 800b4d6:	4770      	bx	lr
 800b4d8:	f803 1b01 	strb.w	r1, [r3], #1
 800b4dc:	e7f9      	b.n	800b4d2 <memset+0x4>
	...

0800b4e0 <_close_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4d06      	ldr	r5, [pc, #24]	; (800b4fc <_close_r+0x1c>)
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	4608      	mov	r0, r1
 800b4ea:	602b      	str	r3, [r5, #0]
 800b4ec:	f7fc fe49 	bl	8008182 <_close>
 800b4f0:	1c43      	adds	r3, r0, #1
 800b4f2:	d102      	bne.n	800b4fa <_close_r+0x1a>
 800b4f4:	682b      	ldr	r3, [r5, #0]
 800b4f6:	b103      	cbz	r3, 800b4fa <_close_r+0x1a>
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	bd38      	pop	{r3, r4, r5, pc}
 800b4fc:	20000a4c 	.word	0x20000a4c

0800b500 <_lseek_r>:
 800b500:	b538      	push	{r3, r4, r5, lr}
 800b502:	4d07      	ldr	r5, [pc, #28]	; (800b520 <_lseek_r+0x20>)
 800b504:	4604      	mov	r4, r0
 800b506:	4608      	mov	r0, r1
 800b508:	4611      	mov	r1, r2
 800b50a:	2200      	movs	r2, #0
 800b50c:	602a      	str	r2, [r5, #0]
 800b50e:	461a      	mov	r2, r3
 800b510:	f7fc fe5e 	bl	80081d0 <_lseek>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	d102      	bne.n	800b51e <_lseek_r+0x1e>
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	b103      	cbz	r3, 800b51e <_lseek_r+0x1e>
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	20000a4c 	.word	0x20000a4c

0800b524 <_read_r>:
 800b524:	b538      	push	{r3, r4, r5, lr}
 800b526:	4d07      	ldr	r5, [pc, #28]	; (800b544 <_read_r+0x20>)
 800b528:	4604      	mov	r4, r0
 800b52a:	4608      	mov	r0, r1
 800b52c:	4611      	mov	r1, r2
 800b52e:	2200      	movs	r2, #0
 800b530:	602a      	str	r2, [r5, #0]
 800b532:	461a      	mov	r2, r3
 800b534:	f7fc fdec 	bl	8008110 <_read>
 800b538:	1c43      	adds	r3, r0, #1
 800b53a:	d102      	bne.n	800b542 <_read_r+0x1e>
 800b53c:	682b      	ldr	r3, [r5, #0]
 800b53e:	b103      	cbz	r3, 800b542 <_read_r+0x1e>
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	bd38      	pop	{r3, r4, r5, pc}
 800b544:	20000a4c 	.word	0x20000a4c

0800b548 <_write_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	4d07      	ldr	r5, [pc, #28]	; (800b568 <_write_r+0x20>)
 800b54c:	4604      	mov	r4, r0
 800b54e:	4608      	mov	r0, r1
 800b550:	4611      	mov	r1, r2
 800b552:	2200      	movs	r2, #0
 800b554:	602a      	str	r2, [r5, #0]
 800b556:	461a      	mov	r2, r3
 800b558:	f7fc fdf7 	bl	800814a <_write>
 800b55c:	1c43      	adds	r3, r0, #1
 800b55e:	d102      	bne.n	800b566 <_write_r+0x1e>
 800b560:	682b      	ldr	r3, [r5, #0]
 800b562:	b103      	cbz	r3, 800b566 <_write_r+0x1e>
 800b564:	6023      	str	r3, [r4, #0]
 800b566:	bd38      	pop	{r3, r4, r5, pc}
 800b568:	20000a4c 	.word	0x20000a4c

0800b56c <__errno>:
 800b56c:	4b01      	ldr	r3, [pc, #4]	; (800b574 <__errno+0x8>)
 800b56e:	6818      	ldr	r0, [r3, #0]
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	20000080 	.word	0x20000080

0800b578 <__libc_init_array>:
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	4d0d      	ldr	r5, [pc, #52]	; (800b5b0 <__libc_init_array+0x38>)
 800b57c:	4c0d      	ldr	r4, [pc, #52]	; (800b5b4 <__libc_init_array+0x3c>)
 800b57e:	1b64      	subs	r4, r4, r5
 800b580:	10a4      	asrs	r4, r4, #2
 800b582:	2600      	movs	r6, #0
 800b584:	42a6      	cmp	r6, r4
 800b586:	d109      	bne.n	800b59c <__libc_init_array+0x24>
 800b588:	4d0b      	ldr	r5, [pc, #44]	; (800b5b8 <__libc_init_array+0x40>)
 800b58a:	4c0c      	ldr	r4, [pc, #48]	; (800b5bc <__libc_init_array+0x44>)
 800b58c:	f000 fe50 	bl	800c230 <_init>
 800b590:	1b64      	subs	r4, r4, r5
 800b592:	10a4      	asrs	r4, r4, #2
 800b594:	2600      	movs	r6, #0
 800b596:	42a6      	cmp	r6, r4
 800b598:	d105      	bne.n	800b5a6 <__libc_init_array+0x2e>
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5a0:	4798      	blx	r3
 800b5a2:	3601      	adds	r6, #1
 800b5a4:	e7ee      	b.n	800b584 <__libc_init_array+0xc>
 800b5a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5aa:	4798      	blx	r3
 800b5ac:	3601      	adds	r6, #1
 800b5ae:	e7f2      	b.n	800b596 <__libc_init_array+0x1e>
 800b5b0:	0806e524 	.word	0x0806e524
 800b5b4:	0806e524 	.word	0x0806e524
 800b5b8:	0806e524 	.word	0x0806e524
 800b5bc:	0806e528 	.word	0x0806e528

0800b5c0 <__retarget_lock_init_recursive>:
 800b5c0:	4770      	bx	lr

0800b5c2 <__retarget_lock_acquire_recursive>:
 800b5c2:	4770      	bx	lr

0800b5c4 <__retarget_lock_release_recursive>:
 800b5c4:	4770      	bx	lr

0800b5c6 <memcpy>:
 800b5c6:	440a      	add	r2, r1
 800b5c8:	4291      	cmp	r1, r2
 800b5ca:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5ce:	d100      	bne.n	800b5d2 <memcpy+0xc>
 800b5d0:	4770      	bx	lr
 800b5d2:	b510      	push	{r4, lr}
 800b5d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5dc:	4291      	cmp	r1, r2
 800b5de:	d1f9      	bne.n	800b5d4 <memcpy+0xe>
 800b5e0:	bd10      	pop	{r4, pc}
	...

0800b5e4 <__assert_func>:
 800b5e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5e6:	4614      	mov	r4, r2
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	4b09      	ldr	r3, [pc, #36]	; (800b610 <__assert_func+0x2c>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	68d8      	ldr	r0, [r3, #12]
 800b5f2:	b14c      	cbz	r4, 800b608 <__assert_func+0x24>
 800b5f4:	4b07      	ldr	r3, [pc, #28]	; (800b614 <__assert_func+0x30>)
 800b5f6:	9100      	str	r1, [sp, #0]
 800b5f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5fc:	4906      	ldr	r1, [pc, #24]	; (800b618 <__assert_func+0x34>)
 800b5fe:	462b      	mov	r3, r5
 800b600:	f000 fb4c 	bl	800bc9c <fiprintf>
 800b604:	f000 fb6c 	bl	800bce0 <abort>
 800b608:	4b04      	ldr	r3, [pc, #16]	; (800b61c <__assert_func+0x38>)
 800b60a:	461c      	mov	r4, r3
 800b60c:	e7f3      	b.n	800b5f6 <__assert_func+0x12>
 800b60e:	bf00      	nop
 800b610:	20000080 	.word	0x20000080
 800b614:	0806e4ab 	.word	0x0806e4ab
 800b618:	0806e4b8 	.word	0x0806e4b8
 800b61c:	0806e4e6 	.word	0x0806e4e6

0800b620 <_free_r>:
 800b620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b622:	2900      	cmp	r1, #0
 800b624:	d044      	beq.n	800b6b0 <_free_r+0x90>
 800b626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b62a:	9001      	str	r0, [sp, #4]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f1a1 0404 	sub.w	r4, r1, #4
 800b632:	bfb8      	it	lt
 800b634:	18e4      	addlt	r4, r4, r3
 800b636:	f000 f8e7 	bl	800b808 <__malloc_lock>
 800b63a:	4a1e      	ldr	r2, [pc, #120]	; (800b6b4 <_free_r+0x94>)
 800b63c:	9801      	ldr	r0, [sp, #4]
 800b63e:	6813      	ldr	r3, [r2, #0]
 800b640:	b933      	cbnz	r3, 800b650 <_free_r+0x30>
 800b642:	6063      	str	r3, [r4, #4]
 800b644:	6014      	str	r4, [r2, #0]
 800b646:	b003      	add	sp, #12
 800b648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b64c:	f000 b8e2 	b.w	800b814 <__malloc_unlock>
 800b650:	42a3      	cmp	r3, r4
 800b652:	d908      	bls.n	800b666 <_free_r+0x46>
 800b654:	6825      	ldr	r5, [r4, #0]
 800b656:	1961      	adds	r1, r4, r5
 800b658:	428b      	cmp	r3, r1
 800b65a:	bf01      	itttt	eq
 800b65c:	6819      	ldreq	r1, [r3, #0]
 800b65e:	685b      	ldreq	r3, [r3, #4]
 800b660:	1949      	addeq	r1, r1, r5
 800b662:	6021      	streq	r1, [r4, #0]
 800b664:	e7ed      	b.n	800b642 <_free_r+0x22>
 800b666:	461a      	mov	r2, r3
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	b10b      	cbz	r3, 800b670 <_free_r+0x50>
 800b66c:	42a3      	cmp	r3, r4
 800b66e:	d9fa      	bls.n	800b666 <_free_r+0x46>
 800b670:	6811      	ldr	r1, [r2, #0]
 800b672:	1855      	adds	r5, r2, r1
 800b674:	42a5      	cmp	r5, r4
 800b676:	d10b      	bne.n	800b690 <_free_r+0x70>
 800b678:	6824      	ldr	r4, [r4, #0]
 800b67a:	4421      	add	r1, r4
 800b67c:	1854      	adds	r4, r2, r1
 800b67e:	42a3      	cmp	r3, r4
 800b680:	6011      	str	r1, [r2, #0]
 800b682:	d1e0      	bne.n	800b646 <_free_r+0x26>
 800b684:	681c      	ldr	r4, [r3, #0]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	6053      	str	r3, [r2, #4]
 800b68a:	440c      	add	r4, r1
 800b68c:	6014      	str	r4, [r2, #0]
 800b68e:	e7da      	b.n	800b646 <_free_r+0x26>
 800b690:	d902      	bls.n	800b698 <_free_r+0x78>
 800b692:	230c      	movs	r3, #12
 800b694:	6003      	str	r3, [r0, #0]
 800b696:	e7d6      	b.n	800b646 <_free_r+0x26>
 800b698:	6825      	ldr	r5, [r4, #0]
 800b69a:	1961      	adds	r1, r4, r5
 800b69c:	428b      	cmp	r3, r1
 800b69e:	bf04      	itt	eq
 800b6a0:	6819      	ldreq	r1, [r3, #0]
 800b6a2:	685b      	ldreq	r3, [r3, #4]
 800b6a4:	6063      	str	r3, [r4, #4]
 800b6a6:	bf04      	itt	eq
 800b6a8:	1949      	addeq	r1, r1, r5
 800b6aa:	6021      	streq	r1, [r4, #0]
 800b6ac:	6054      	str	r4, [r2, #4]
 800b6ae:	e7ca      	b.n	800b646 <_free_r+0x26>
 800b6b0:	b003      	add	sp, #12
 800b6b2:	bd30      	pop	{r4, r5, pc}
 800b6b4:	20000a54 	.word	0x20000a54

0800b6b8 <malloc>:
 800b6b8:	4b02      	ldr	r3, [pc, #8]	; (800b6c4 <malloc+0xc>)
 800b6ba:	4601      	mov	r1, r0
 800b6bc:	6818      	ldr	r0, [r3, #0]
 800b6be:	f000 b823 	b.w	800b708 <_malloc_r>
 800b6c2:	bf00      	nop
 800b6c4:	20000080 	.word	0x20000080

0800b6c8 <sbrk_aligned>:
 800b6c8:	b570      	push	{r4, r5, r6, lr}
 800b6ca:	4e0e      	ldr	r6, [pc, #56]	; (800b704 <sbrk_aligned+0x3c>)
 800b6cc:	460c      	mov	r4, r1
 800b6ce:	6831      	ldr	r1, [r6, #0]
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	b911      	cbnz	r1, 800b6da <sbrk_aligned+0x12>
 800b6d4:	f000 faf4 	bl	800bcc0 <_sbrk_r>
 800b6d8:	6030      	str	r0, [r6, #0]
 800b6da:	4621      	mov	r1, r4
 800b6dc:	4628      	mov	r0, r5
 800b6de:	f000 faef 	bl	800bcc0 <_sbrk_r>
 800b6e2:	1c43      	adds	r3, r0, #1
 800b6e4:	d00a      	beq.n	800b6fc <sbrk_aligned+0x34>
 800b6e6:	1cc4      	adds	r4, r0, #3
 800b6e8:	f024 0403 	bic.w	r4, r4, #3
 800b6ec:	42a0      	cmp	r0, r4
 800b6ee:	d007      	beq.n	800b700 <sbrk_aligned+0x38>
 800b6f0:	1a21      	subs	r1, r4, r0
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	f000 fae4 	bl	800bcc0 <_sbrk_r>
 800b6f8:	3001      	adds	r0, #1
 800b6fa:	d101      	bne.n	800b700 <sbrk_aligned+0x38>
 800b6fc:	f04f 34ff 	mov.w	r4, #4294967295
 800b700:	4620      	mov	r0, r4
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	20000a58 	.word	0x20000a58

0800b708 <_malloc_r>:
 800b708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b70c:	1ccd      	adds	r5, r1, #3
 800b70e:	f025 0503 	bic.w	r5, r5, #3
 800b712:	3508      	adds	r5, #8
 800b714:	2d0c      	cmp	r5, #12
 800b716:	bf38      	it	cc
 800b718:	250c      	movcc	r5, #12
 800b71a:	2d00      	cmp	r5, #0
 800b71c:	4607      	mov	r7, r0
 800b71e:	db01      	blt.n	800b724 <_malloc_r+0x1c>
 800b720:	42a9      	cmp	r1, r5
 800b722:	d905      	bls.n	800b730 <_malloc_r+0x28>
 800b724:	230c      	movs	r3, #12
 800b726:	603b      	str	r3, [r7, #0]
 800b728:	2600      	movs	r6, #0
 800b72a:	4630      	mov	r0, r6
 800b72c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b730:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b804 <_malloc_r+0xfc>
 800b734:	f000 f868 	bl	800b808 <__malloc_lock>
 800b738:	f8d8 3000 	ldr.w	r3, [r8]
 800b73c:	461c      	mov	r4, r3
 800b73e:	bb5c      	cbnz	r4, 800b798 <_malloc_r+0x90>
 800b740:	4629      	mov	r1, r5
 800b742:	4638      	mov	r0, r7
 800b744:	f7ff ffc0 	bl	800b6c8 <sbrk_aligned>
 800b748:	1c43      	adds	r3, r0, #1
 800b74a:	4604      	mov	r4, r0
 800b74c:	d155      	bne.n	800b7fa <_malloc_r+0xf2>
 800b74e:	f8d8 4000 	ldr.w	r4, [r8]
 800b752:	4626      	mov	r6, r4
 800b754:	2e00      	cmp	r6, #0
 800b756:	d145      	bne.n	800b7e4 <_malloc_r+0xdc>
 800b758:	2c00      	cmp	r4, #0
 800b75a:	d048      	beq.n	800b7ee <_malloc_r+0xe6>
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	4631      	mov	r1, r6
 800b760:	4638      	mov	r0, r7
 800b762:	eb04 0903 	add.w	r9, r4, r3
 800b766:	f000 faab 	bl	800bcc0 <_sbrk_r>
 800b76a:	4581      	cmp	r9, r0
 800b76c:	d13f      	bne.n	800b7ee <_malloc_r+0xe6>
 800b76e:	6821      	ldr	r1, [r4, #0]
 800b770:	1a6d      	subs	r5, r5, r1
 800b772:	4629      	mov	r1, r5
 800b774:	4638      	mov	r0, r7
 800b776:	f7ff ffa7 	bl	800b6c8 <sbrk_aligned>
 800b77a:	3001      	adds	r0, #1
 800b77c:	d037      	beq.n	800b7ee <_malloc_r+0xe6>
 800b77e:	6823      	ldr	r3, [r4, #0]
 800b780:	442b      	add	r3, r5
 800b782:	6023      	str	r3, [r4, #0]
 800b784:	f8d8 3000 	ldr.w	r3, [r8]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d038      	beq.n	800b7fe <_malloc_r+0xf6>
 800b78c:	685a      	ldr	r2, [r3, #4]
 800b78e:	42a2      	cmp	r2, r4
 800b790:	d12b      	bne.n	800b7ea <_malloc_r+0xe2>
 800b792:	2200      	movs	r2, #0
 800b794:	605a      	str	r2, [r3, #4]
 800b796:	e00f      	b.n	800b7b8 <_malloc_r+0xb0>
 800b798:	6822      	ldr	r2, [r4, #0]
 800b79a:	1b52      	subs	r2, r2, r5
 800b79c:	d41f      	bmi.n	800b7de <_malloc_r+0xd6>
 800b79e:	2a0b      	cmp	r2, #11
 800b7a0:	d917      	bls.n	800b7d2 <_malloc_r+0xca>
 800b7a2:	1961      	adds	r1, r4, r5
 800b7a4:	42a3      	cmp	r3, r4
 800b7a6:	6025      	str	r5, [r4, #0]
 800b7a8:	bf18      	it	ne
 800b7aa:	6059      	strne	r1, [r3, #4]
 800b7ac:	6863      	ldr	r3, [r4, #4]
 800b7ae:	bf08      	it	eq
 800b7b0:	f8c8 1000 	streq.w	r1, [r8]
 800b7b4:	5162      	str	r2, [r4, r5]
 800b7b6:	604b      	str	r3, [r1, #4]
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	f104 060b 	add.w	r6, r4, #11
 800b7be:	f000 f829 	bl	800b814 <__malloc_unlock>
 800b7c2:	f026 0607 	bic.w	r6, r6, #7
 800b7c6:	1d23      	adds	r3, r4, #4
 800b7c8:	1af2      	subs	r2, r6, r3
 800b7ca:	d0ae      	beq.n	800b72a <_malloc_r+0x22>
 800b7cc:	1b9b      	subs	r3, r3, r6
 800b7ce:	50a3      	str	r3, [r4, r2]
 800b7d0:	e7ab      	b.n	800b72a <_malloc_r+0x22>
 800b7d2:	42a3      	cmp	r3, r4
 800b7d4:	6862      	ldr	r2, [r4, #4]
 800b7d6:	d1dd      	bne.n	800b794 <_malloc_r+0x8c>
 800b7d8:	f8c8 2000 	str.w	r2, [r8]
 800b7dc:	e7ec      	b.n	800b7b8 <_malloc_r+0xb0>
 800b7de:	4623      	mov	r3, r4
 800b7e0:	6864      	ldr	r4, [r4, #4]
 800b7e2:	e7ac      	b.n	800b73e <_malloc_r+0x36>
 800b7e4:	4634      	mov	r4, r6
 800b7e6:	6876      	ldr	r6, [r6, #4]
 800b7e8:	e7b4      	b.n	800b754 <_malloc_r+0x4c>
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	e7cc      	b.n	800b788 <_malloc_r+0x80>
 800b7ee:	230c      	movs	r3, #12
 800b7f0:	603b      	str	r3, [r7, #0]
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	f000 f80e 	bl	800b814 <__malloc_unlock>
 800b7f8:	e797      	b.n	800b72a <_malloc_r+0x22>
 800b7fa:	6025      	str	r5, [r4, #0]
 800b7fc:	e7dc      	b.n	800b7b8 <_malloc_r+0xb0>
 800b7fe:	605b      	str	r3, [r3, #4]
 800b800:	deff      	udf	#255	; 0xff
 800b802:	bf00      	nop
 800b804:	20000a54 	.word	0x20000a54

0800b808 <__malloc_lock>:
 800b808:	4801      	ldr	r0, [pc, #4]	; (800b810 <__malloc_lock+0x8>)
 800b80a:	f7ff beda 	b.w	800b5c2 <__retarget_lock_acquire_recursive>
 800b80e:	bf00      	nop
 800b810:	20000a50 	.word	0x20000a50

0800b814 <__malloc_unlock>:
 800b814:	4801      	ldr	r0, [pc, #4]	; (800b81c <__malloc_unlock+0x8>)
 800b816:	f7ff bed5 	b.w	800b5c4 <__retarget_lock_release_recursive>
 800b81a:	bf00      	nop
 800b81c:	20000a50 	.word	0x20000a50

0800b820 <_printf_common>:
 800b820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b824:	4616      	mov	r6, r2
 800b826:	4699      	mov	r9, r3
 800b828:	688a      	ldr	r2, [r1, #8]
 800b82a:	690b      	ldr	r3, [r1, #16]
 800b82c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b830:	4293      	cmp	r3, r2
 800b832:	bfb8      	it	lt
 800b834:	4613      	movlt	r3, r2
 800b836:	6033      	str	r3, [r6, #0]
 800b838:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b83c:	4607      	mov	r7, r0
 800b83e:	460c      	mov	r4, r1
 800b840:	b10a      	cbz	r2, 800b846 <_printf_common+0x26>
 800b842:	3301      	adds	r3, #1
 800b844:	6033      	str	r3, [r6, #0]
 800b846:	6823      	ldr	r3, [r4, #0]
 800b848:	0699      	lsls	r1, r3, #26
 800b84a:	bf42      	ittt	mi
 800b84c:	6833      	ldrmi	r3, [r6, #0]
 800b84e:	3302      	addmi	r3, #2
 800b850:	6033      	strmi	r3, [r6, #0]
 800b852:	6825      	ldr	r5, [r4, #0]
 800b854:	f015 0506 	ands.w	r5, r5, #6
 800b858:	d106      	bne.n	800b868 <_printf_common+0x48>
 800b85a:	f104 0a19 	add.w	sl, r4, #25
 800b85e:	68e3      	ldr	r3, [r4, #12]
 800b860:	6832      	ldr	r2, [r6, #0]
 800b862:	1a9b      	subs	r3, r3, r2
 800b864:	42ab      	cmp	r3, r5
 800b866:	dc26      	bgt.n	800b8b6 <_printf_common+0x96>
 800b868:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b86c:	1e13      	subs	r3, r2, #0
 800b86e:	6822      	ldr	r2, [r4, #0]
 800b870:	bf18      	it	ne
 800b872:	2301      	movne	r3, #1
 800b874:	0692      	lsls	r2, r2, #26
 800b876:	d42b      	bmi.n	800b8d0 <_printf_common+0xb0>
 800b878:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b87c:	4649      	mov	r1, r9
 800b87e:	4638      	mov	r0, r7
 800b880:	47c0      	blx	r8
 800b882:	3001      	adds	r0, #1
 800b884:	d01e      	beq.n	800b8c4 <_printf_common+0xa4>
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	6922      	ldr	r2, [r4, #16]
 800b88a:	f003 0306 	and.w	r3, r3, #6
 800b88e:	2b04      	cmp	r3, #4
 800b890:	bf02      	ittt	eq
 800b892:	68e5      	ldreq	r5, [r4, #12]
 800b894:	6833      	ldreq	r3, [r6, #0]
 800b896:	1aed      	subeq	r5, r5, r3
 800b898:	68a3      	ldr	r3, [r4, #8]
 800b89a:	bf0c      	ite	eq
 800b89c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8a0:	2500      	movne	r5, #0
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	bfc4      	itt	gt
 800b8a6:	1a9b      	subgt	r3, r3, r2
 800b8a8:	18ed      	addgt	r5, r5, r3
 800b8aa:	2600      	movs	r6, #0
 800b8ac:	341a      	adds	r4, #26
 800b8ae:	42b5      	cmp	r5, r6
 800b8b0:	d11a      	bne.n	800b8e8 <_printf_common+0xc8>
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	e008      	b.n	800b8c8 <_printf_common+0xa8>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	4652      	mov	r2, sl
 800b8ba:	4649      	mov	r1, r9
 800b8bc:	4638      	mov	r0, r7
 800b8be:	47c0      	blx	r8
 800b8c0:	3001      	adds	r0, #1
 800b8c2:	d103      	bne.n	800b8cc <_printf_common+0xac>
 800b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8cc:	3501      	adds	r5, #1
 800b8ce:	e7c6      	b.n	800b85e <_printf_common+0x3e>
 800b8d0:	18e1      	adds	r1, r4, r3
 800b8d2:	1c5a      	adds	r2, r3, #1
 800b8d4:	2030      	movs	r0, #48	; 0x30
 800b8d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b8da:	4422      	add	r2, r4
 800b8dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b8e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b8e4:	3302      	adds	r3, #2
 800b8e6:	e7c7      	b.n	800b878 <_printf_common+0x58>
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	4622      	mov	r2, r4
 800b8ec:	4649      	mov	r1, r9
 800b8ee:	4638      	mov	r0, r7
 800b8f0:	47c0      	blx	r8
 800b8f2:	3001      	adds	r0, #1
 800b8f4:	d0e6      	beq.n	800b8c4 <_printf_common+0xa4>
 800b8f6:	3601      	adds	r6, #1
 800b8f8:	e7d9      	b.n	800b8ae <_printf_common+0x8e>
	...

0800b8fc <_printf_i>:
 800b8fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b900:	7e0f      	ldrb	r7, [r1, #24]
 800b902:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b904:	2f78      	cmp	r7, #120	; 0x78
 800b906:	4691      	mov	r9, r2
 800b908:	4680      	mov	r8, r0
 800b90a:	460c      	mov	r4, r1
 800b90c:	469a      	mov	sl, r3
 800b90e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b912:	d807      	bhi.n	800b924 <_printf_i+0x28>
 800b914:	2f62      	cmp	r7, #98	; 0x62
 800b916:	d80a      	bhi.n	800b92e <_printf_i+0x32>
 800b918:	2f00      	cmp	r7, #0
 800b91a:	f000 80d4 	beq.w	800bac6 <_printf_i+0x1ca>
 800b91e:	2f58      	cmp	r7, #88	; 0x58
 800b920:	f000 80c0 	beq.w	800baa4 <_printf_i+0x1a8>
 800b924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b928:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b92c:	e03a      	b.n	800b9a4 <_printf_i+0xa8>
 800b92e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b932:	2b15      	cmp	r3, #21
 800b934:	d8f6      	bhi.n	800b924 <_printf_i+0x28>
 800b936:	a101      	add	r1, pc, #4	; (adr r1, 800b93c <_printf_i+0x40>)
 800b938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b93c:	0800b995 	.word	0x0800b995
 800b940:	0800b9a9 	.word	0x0800b9a9
 800b944:	0800b925 	.word	0x0800b925
 800b948:	0800b925 	.word	0x0800b925
 800b94c:	0800b925 	.word	0x0800b925
 800b950:	0800b925 	.word	0x0800b925
 800b954:	0800b9a9 	.word	0x0800b9a9
 800b958:	0800b925 	.word	0x0800b925
 800b95c:	0800b925 	.word	0x0800b925
 800b960:	0800b925 	.word	0x0800b925
 800b964:	0800b925 	.word	0x0800b925
 800b968:	0800baad 	.word	0x0800baad
 800b96c:	0800b9d5 	.word	0x0800b9d5
 800b970:	0800ba67 	.word	0x0800ba67
 800b974:	0800b925 	.word	0x0800b925
 800b978:	0800b925 	.word	0x0800b925
 800b97c:	0800bacf 	.word	0x0800bacf
 800b980:	0800b925 	.word	0x0800b925
 800b984:	0800b9d5 	.word	0x0800b9d5
 800b988:	0800b925 	.word	0x0800b925
 800b98c:	0800b925 	.word	0x0800b925
 800b990:	0800ba6f 	.word	0x0800ba6f
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	1d1a      	adds	r2, r3, #4
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	602a      	str	r2, [r5, #0]
 800b99c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e09f      	b.n	800bae8 <_printf_i+0x1ec>
 800b9a8:	6820      	ldr	r0, [r4, #0]
 800b9aa:	682b      	ldr	r3, [r5, #0]
 800b9ac:	0607      	lsls	r7, r0, #24
 800b9ae:	f103 0104 	add.w	r1, r3, #4
 800b9b2:	6029      	str	r1, [r5, #0]
 800b9b4:	d501      	bpl.n	800b9ba <_printf_i+0xbe>
 800b9b6:	681e      	ldr	r6, [r3, #0]
 800b9b8:	e003      	b.n	800b9c2 <_printf_i+0xc6>
 800b9ba:	0646      	lsls	r6, r0, #25
 800b9bc:	d5fb      	bpl.n	800b9b6 <_printf_i+0xba>
 800b9be:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b9c2:	2e00      	cmp	r6, #0
 800b9c4:	da03      	bge.n	800b9ce <_printf_i+0xd2>
 800b9c6:	232d      	movs	r3, #45	; 0x2d
 800b9c8:	4276      	negs	r6, r6
 800b9ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9ce:	485a      	ldr	r0, [pc, #360]	; (800bb38 <_printf_i+0x23c>)
 800b9d0:	230a      	movs	r3, #10
 800b9d2:	e012      	b.n	800b9fa <_printf_i+0xfe>
 800b9d4:	682b      	ldr	r3, [r5, #0]
 800b9d6:	6820      	ldr	r0, [r4, #0]
 800b9d8:	1d19      	adds	r1, r3, #4
 800b9da:	6029      	str	r1, [r5, #0]
 800b9dc:	0605      	lsls	r5, r0, #24
 800b9de:	d501      	bpl.n	800b9e4 <_printf_i+0xe8>
 800b9e0:	681e      	ldr	r6, [r3, #0]
 800b9e2:	e002      	b.n	800b9ea <_printf_i+0xee>
 800b9e4:	0641      	lsls	r1, r0, #25
 800b9e6:	d5fb      	bpl.n	800b9e0 <_printf_i+0xe4>
 800b9e8:	881e      	ldrh	r6, [r3, #0]
 800b9ea:	4853      	ldr	r0, [pc, #332]	; (800bb38 <_printf_i+0x23c>)
 800b9ec:	2f6f      	cmp	r7, #111	; 0x6f
 800b9ee:	bf0c      	ite	eq
 800b9f0:	2308      	moveq	r3, #8
 800b9f2:	230a      	movne	r3, #10
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b9fa:	6865      	ldr	r5, [r4, #4]
 800b9fc:	60a5      	str	r5, [r4, #8]
 800b9fe:	2d00      	cmp	r5, #0
 800ba00:	bfa2      	ittt	ge
 800ba02:	6821      	ldrge	r1, [r4, #0]
 800ba04:	f021 0104 	bicge.w	r1, r1, #4
 800ba08:	6021      	strge	r1, [r4, #0]
 800ba0a:	b90e      	cbnz	r6, 800ba10 <_printf_i+0x114>
 800ba0c:	2d00      	cmp	r5, #0
 800ba0e:	d04b      	beq.n	800baa8 <_printf_i+0x1ac>
 800ba10:	4615      	mov	r5, r2
 800ba12:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba16:	fb03 6711 	mls	r7, r3, r1, r6
 800ba1a:	5dc7      	ldrb	r7, [r0, r7]
 800ba1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba20:	4637      	mov	r7, r6
 800ba22:	42bb      	cmp	r3, r7
 800ba24:	460e      	mov	r6, r1
 800ba26:	d9f4      	bls.n	800ba12 <_printf_i+0x116>
 800ba28:	2b08      	cmp	r3, #8
 800ba2a:	d10b      	bne.n	800ba44 <_printf_i+0x148>
 800ba2c:	6823      	ldr	r3, [r4, #0]
 800ba2e:	07de      	lsls	r6, r3, #31
 800ba30:	d508      	bpl.n	800ba44 <_printf_i+0x148>
 800ba32:	6923      	ldr	r3, [r4, #16]
 800ba34:	6861      	ldr	r1, [r4, #4]
 800ba36:	4299      	cmp	r1, r3
 800ba38:	bfde      	ittt	le
 800ba3a:	2330      	movle	r3, #48	; 0x30
 800ba3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba40:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba44:	1b52      	subs	r2, r2, r5
 800ba46:	6122      	str	r2, [r4, #16]
 800ba48:	f8cd a000 	str.w	sl, [sp]
 800ba4c:	464b      	mov	r3, r9
 800ba4e:	aa03      	add	r2, sp, #12
 800ba50:	4621      	mov	r1, r4
 800ba52:	4640      	mov	r0, r8
 800ba54:	f7ff fee4 	bl	800b820 <_printf_common>
 800ba58:	3001      	adds	r0, #1
 800ba5a:	d14a      	bne.n	800baf2 <_printf_i+0x1f6>
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba60:	b004      	add	sp, #16
 800ba62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	f043 0320 	orr.w	r3, r3, #32
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	4833      	ldr	r0, [pc, #204]	; (800bb3c <_printf_i+0x240>)
 800ba70:	2778      	movs	r7, #120	; 0x78
 800ba72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ba76:	6823      	ldr	r3, [r4, #0]
 800ba78:	6829      	ldr	r1, [r5, #0]
 800ba7a:	061f      	lsls	r7, r3, #24
 800ba7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba80:	d402      	bmi.n	800ba88 <_printf_i+0x18c>
 800ba82:	065f      	lsls	r7, r3, #25
 800ba84:	bf48      	it	mi
 800ba86:	b2b6      	uxthmi	r6, r6
 800ba88:	07df      	lsls	r7, r3, #31
 800ba8a:	bf48      	it	mi
 800ba8c:	f043 0320 	orrmi.w	r3, r3, #32
 800ba90:	6029      	str	r1, [r5, #0]
 800ba92:	bf48      	it	mi
 800ba94:	6023      	strmi	r3, [r4, #0]
 800ba96:	b91e      	cbnz	r6, 800baa0 <_printf_i+0x1a4>
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	f023 0320 	bic.w	r3, r3, #32
 800ba9e:	6023      	str	r3, [r4, #0]
 800baa0:	2310      	movs	r3, #16
 800baa2:	e7a7      	b.n	800b9f4 <_printf_i+0xf8>
 800baa4:	4824      	ldr	r0, [pc, #144]	; (800bb38 <_printf_i+0x23c>)
 800baa6:	e7e4      	b.n	800ba72 <_printf_i+0x176>
 800baa8:	4615      	mov	r5, r2
 800baaa:	e7bd      	b.n	800ba28 <_printf_i+0x12c>
 800baac:	682b      	ldr	r3, [r5, #0]
 800baae:	6826      	ldr	r6, [r4, #0]
 800bab0:	6961      	ldr	r1, [r4, #20]
 800bab2:	1d18      	adds	r0, r3, #4
 800bab4:	6028      	str	r0, [r5, #0]
 800bab6:	0635      	lsls	r5, r6, #24
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	d501      	bpl.n	800bac0 <_printf_i+0x1c4>
 800babc:	6019      	str	r1, [r3, #0]
 800babe:	e002      	b.n	800bac6 <_printf_i+0x1ca>
 800bac0:	0670      	lsls	r0, r6, #25
 800bac2:	d5fb      	bpl.n	800babc <_printf_i+0x1c0>
 800bac4:	8019      	strh	r1, [r3, #0]
 800bac6:	2300      	movs	r3, #0
 800bac8:	6123      	str	r3, [r4, #16]
 800baca:	4615      	mov	r5, r2
 800bacc:	e7bc      	b.n	800ba48 <_printf_i+0x14c>
 800bace:	682b      	ldr	r3, [r5, #0]
 800bad0:	1d1a      	adds	r2, r3, #4
 800bad2:	602a      	str	r2, [r5, #0]
 800bad4:	681d      	ldr	r5, [r3, #0]
 800bad6:	6862      	ldr	r2, [r4, #4]
 800bad8:	2100      	movs	r1, #0
 800bada:	4628      	mov	r0, r5
 800badc:	f7f4 fb98 	bl	8000210 <memchr>
 800bae0:	b108      	cbz	r0, 800bae6 <_printf_i+0x1ea>
 800bae2:	1b40      	subs	r0, r0, r5
 800bae4:	6060      	str	r0, [r4, #4]
 800bae6:	6863      	ldr	r3, [r4, #4]
 800bae8:	6123      	str	r3, [r4, #16]
 800baea:	2300      	movs	r3, #0
 800baec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baf0:	e7aa      	b.n	800ba48 <_printf_i+0x14c>
 800baf2:	6923      	ldr	r3, [r4, #16]
 800baf4:	462a      	mov	r2, r5
 800baf6:	4649      	mov	r1, r9
 800baf8:	4640      	mov	r0, r8
 800bafa:	47d0      	blx	sl
 800bafc:	3001      	adds	r0, #1
 800bafe:	d0ad      	beq.n	800ba5c <_printf_i+0x160>
 800bb00:	6823      	ldr	r3, [r4, #0]
 800bb02:	079b      	lsls	r3, r3, #30
 800bb04:	d413      	bmi.n	800bb2e <_printf_i+0x232>
 800bb06:	68e0      	ldr	r0, [r4, #12]
 800bb08:	9b03      	ldr	r3, [sp, #12]
 800bb0a:	4298      	cmp	r0, r3
 800bb0c:	bfb8      	it	lt
 800bb0e:	4618      	movlt	r0, r3
 800bb10:	e7a6      	b.n	800ba60 <_printf_i+0x164>
 800bb12:	2301      	movs	r3, #1
 800bb14:	4632      	mov	r2, r6
 800bb16:	4649      	mov	r1, r9
 800bb18:	4640      	mov	r0, r8
 800bb1a:	47d0      	blx	sl
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	d09d      	beq.n	800ba5c <_printf_i+0x160>
 800bb20:	3501      	adds	r5, #1
 800bb22:	68e3      	ldr	r3, [r4, #12]
 800bb24:	9903      	ldr	r1, [sp, #12]
 800bb26:	1a5b      	subs	r3, r3, r1
 800bb28:	42ab      	cmp	r3, r5
 800bb2a:	dcf2      	bgt.n	800bb12 <_printf_i+0x216>
 800bb2c:	e7eb      	b.n	800bb06 <_printf_i+0x20a>
 800bb2e:	2500      	movs	r5, #0
 800bb30:	f104 0619 	add.w	r6, r4, #25
 800bb34:	e7f5      	b.n	800bb22 <_printf_i+0x226>
 800bb36:	bf00      	nop
 800bb38:	0806e4e7 	.word	0x0806e4e7
 800bb3c:	0806e4f8 	.word	0x0806e4f8

0800bb40 <__sflush_r>:
 800bb40:	898a      	ldrh	r2, [r1, #12]
 800bb42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb46:	4605      	mov	r5, r0
 800bb48:	0710      	lsls	r0, r2, #28
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	d458      	bmi.n	800bc00 <__sflush_r+0xc0>
 800bb4e:	684b      	ldr	r3, [r1, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	dc05      	bgt.n	800bb60 <__sflush_r+0x20>
 800bb54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	dc02      	bgt.n	800bb60 <__sflush_r+0x20>
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb62:	2e00      	cmp	r6, #0
 800bb64:	d0f9      	beq.n	800bb5a <__sflush_r+0x1a>
 800bb66:	2300      	movs	r3, #0
 800bb68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb6c:	682f      	ldr	r7, [r5, #0]
 800bb6e:	6a21      	ldr	r1, [r4, #32]
 800bb70:	602b      	str	r3, [r5, #0]
 800bb72:	d032      	beq.n	800bbda <__sflush_r+0x9a>
 800bb74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb76:	89a3      	ldrh	r3, [r4, #12]
 800bb78:	075a      	lsls	r2, r3, #29
 800bb7a:	d505      	bpl.n	800bb88 <__sflush_r+0x48>
 800bb7c:	6863      	ldr	r3, [r4, #4]
 800bb7e:	1ac0      	subs	r0, r0, r3
 800bb80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb82:	b10b      	cbz	r3, 800bb88 <__sflush_r+0x48>
 800bb84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb86:	1ac0      	subs	r0, r0, r3
 800bb88:	2300      	movs	r3, #0
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb8e:	6a21      	ldr	r1, [r4, #32]
 800bb90:	4628      	mov	r0, r5
 800bb92:	47b0      	blx	r6
 800bb94:	1c43      	adds	r3, r0, #1
 800bb96:	89a3      	ldrh	r3, [r4, #12]
 800bb98:	d106      	bne.n	800bba8 <__sflush_r+0x68>
 800bb9a:	6829      	ldr	r1, [r5, #0]
 800bb9c:	291d      	cmp	r1, #29
 800bb9e:	d82b      	bhi.n	800bbf8 <__sflush_r+0xb8>
 800bba0:	4a29      	ldr	r2, [pc, #164]	; (800bc48 <__sflush_r+0x108>)
 800bba2:	410a      	asrs	r2, r1
 800bba4:	07d6      	lsls	r6, r2, #31
 800bba6:	d427      	bmi.n	800bbf8 <__sflush_r+0xb8>
 800bba8:	2200      	movs	r2, #0
 800bbaa:	6062      	str	r2, [r4, #4]
 800bbac:	04d9      	lsls	r1, r3, #19
 800bbae:	6922      	ldr	r2, [r4, #16]
 800bbb0:	6022      	str	r2, [r4, #0]
 800bbb2:	d504      	bpl.n	800bbbe <__sflush_r+0x7e>
 800bbb4:	1c42      	adds	r2, r0, #1
 800bbb6:	d101      	bne.n	800bbbc <__sflush_r+0x7c>
 800bbb8:	682b      	ldr	r3, [r5, #0]
 800bbba:	b903      	cbnz	r3, 800bbbe <__sflush_r+0x7e>
 800bbbc:	6560      	str	r0, [r4, #84]	; 0x54
 800bbbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbc0:	602f      	str	r7, [r5, #0]
 800bbc2:	2900      	cmp	r1, #0
 800bbc4:	d0c9      	beq.n	800bb5a <__sflush_r+0x1a>
 800bbc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbca:	4299      	cmp	r1, r3
 800bbcc:	d002      	beq.n	800bbd4 <__sflush_r+0x94>
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f7ff fd26 	bl	800b620 <_free_r>
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	6360      	str	r0, [r4, #52]	; 0x34
 800bbd8:	e7c0      	b.n	800bb5c <__sflush_r+0x1c>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	4628      	mov	r0, r5
 800bbde:	47b0      	blx	r6
 800bbe0:	1c41      	adds	r1, r0, #1
 800bbe2:	d1c8      	bne.n	800bb76 <__sflush_r+0x36>
 800bbe4:	682b      	ldr	r3, [r5, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d0c5      	beq.n	800bb76 <__sflush_r+0x36>
 800bbea:	2b1d      	cmp	r3, #29
 800bbec:	d001      	beq.n	800bbf2 <__sflush_r+0xb2>
 800bbee:	2b16      	cmp	r3, #22
 800bbf0:	d101      	bne.n	800bbf6 <__sflush_r+0xb6>
 800bbf2:	602f      	str	r7, [r5, #0]
 800bbf4:	e7b1      	b.n	800bb5a <__sflush_r+0x1a>
 800bbf6:	89a3      	ldrh	r3, [r4, #12]
 800bbf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbfc:	81a3      	strh	r3, [r4, #12]
 800bbfe:	e7ad      	b.n	800bb5c <__sflush_r+0x1c>
 800bc00:	690f      	ldr	r7, [r1, #16]
 800bc02:	2f00      	cmp	r7, #0
 800bc04:	d0a9      	beq.n	800bb5a <__sflush_r+0x1a>
 800bc06:	0793      	lsls	r3, r2, #30
 800bc08:	680e      	ldr	r6, [r1, #0]
 800bc0a:	bf08      	it	eq
 800bc0c:	694b      	ldreq	r3, [r1, #20]
 800bc0e:	600f      	str	r7, [r1, #0]
 800bc10:	bf18      	it	ne
 800bc12:	2300      	movne	r3, #0
 800bc14:	eba6 0807 	sub.w	r8, r6, r7
 800bc18:	608b      	str	r3, [r1, #8]
 800bc1a:	f1b8 0f00 	cmp.w	r8, #0
 800bc1e:	dd9c      	ble.n	800bb5a <__sflush_r+0x1a>
 800bc20:	6a21      	ldr	r1, [r4, #32]
 800bc22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc24:	4643      	mov	r3, r8
 800bc26:	463a      	mov	r2, r7
 800bc28:	4628      	mov	r0, r5
 800bc2a:	47b0      	blx	r6
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	dc06      	bgt.n	800bc3e <__sflush_r+0xfe>
 800bc30:	89a3      	ldrh	r3, [r4, #12]
 800bc32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc36:	81a3      	strh	r3, [r4, #12]
 800bc38:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3c:	e78e      	b.n	800bb5c <__sflush_r+0x1c>
 800bc3e:	4407      	add	r7, r0
 800bc40:	eba8 0800 	sub.w	r8, r8, r0
 800bc44:	e7e9      	b.n	800bc1a <__sflush_r+0xda>
 800bc46:	bf00      	nop
 800bc48:	dfbffffe 	.word	0xdfbffffe

0800bc4c <_fflush_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	690b      	ldr	r3, [r1, #16]
 800bc50:	4605      	mov	r5, r0
 800bc52:	460c      	mov	r4, r1
 800bc54:	b913      	cbnz	r3, 800bc5c <_fflush_r+0x10>
 800bc56:	2500      	movs	r5, #0
 800bc58:	4628      	mov	r0, r5
 800bc5a:	bd38      	pop	{r3, r4, r5, pc}
 800bc5c:	b118      	cbz	r0, 800bc66 <_fflush_r+0x1a>
 800bc5e:	6a03      	ldr	r3, [r0, #32]
 800bc60:	b90b      	cbnz	r3, 800bc66 <_fflush_r+0x1a>
 800bc62:	f7ff fbbb 	bl	800b3dc <__sinit>
 800bc66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d0f3      	beq.n	800bc56 <_fflush_r+0xa>
 800bc6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc70:	07d0      	lsls	r0, r2, #31
 800bc72:	d404      	bmi.n	800bc7e <_fflush_r+0x32>
 800bc74:	0599      	lsls	r1, r3, #22
 800bc76:	d402      	bmi.n	800bc7e <_fflush_r+0x32>
 800bc78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc7a:	f7ff fca2 	bl	800b5c2 <__retarget_lock_acquire_recursive>
 800bc7e:	4628      	mov	r0, r5
 800bc80:	4621      	mov	r1, r4
 800bc82:	f7ff ff5d 	bl	800bb40 <__sflush_r>
 800bc86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc88:	07da      	lsls	r2, r3, #31
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	d4e4      	bmi.n	800bc58 <_fflush_r+0xc>
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	059b      	lsls	r3, r3, #22
 800bc92:	d4e1      	bmi.n	800bc58 <_fflush_r+0xc>
 800bc94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc96:	f7ff fc95 	bl	800b5c4 <__retarget_lock_release_recursive>
 800bc9a:	e7dd      	b.n	800bc58 <_fflush_r+0xc>

0800bc9c <fiprintf>:
 800bc9c:	b40e      	push	{r1, r2, r3}
 800bc9e:	b503      	push	{r0, r1, lr}
 800bca0:	4601      	mov	r1, r0
 800bca2:	ab03      	add	r3, sp, #12
 800bca4:	4805      	ldr	r0, [pc, #20]	; (800bcbc <fiprintf+0x20>)
 800bca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcaa:	6800      	ldr	r0, [r0, #0]
 800bcac:	9301      	str	r3, [sp, #4]
 800bcae:	f000 f847 	bl	800bd40 <_vfiprintf_r>
 800bcb2:	b002      	add	sp, #8
 800bcb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcb8:	b003      	add	sp, #12
 800bcba:	4770      	bx	lr
 800bcbc:	20000080 	.word	0x20000080

0800bcc0 <_sbrk_r>:
 800bcc0:	b538      	push	{r3, r4, r5, lr}
 800bcc2:	4d06      	ldr	r5, [pc, #24]	; (800bcdc <_sbrk_r+0x1c>)
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	4608      	mov	r0, r1
 800bcca:	602b      	str	r3, [r5, #0]
 800bccc:	f7fc fa8e 	bl	80081ec <_sbrk>
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	d102      	bne.n	800bcda <_sbrk_r+0x1a>
 800bcd4:	682b      	ldr	r3, [r5, #0]
 800bcd6:	b103      	cbz	r3, 800bcda <_sbrk_r+0x1a>
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	bd38      	pop	{r3, r4, r5, pc}
 800bcdc:	20000a4c 	.word	0x20000a4c

0800bce0 <abort>:
 800bce0:	b508      	push	{r3, lr}
 800bce2:	2006      	movs	r0, #6
 800bce4:	f000 fa04 	bl	800c0f0 <raise>
 800bce8:	2001      	movs	r0, #1
 800bcea:	f7fc fa07 	bl	80080fc <_exit>

0800bcee <__sfputc_r>:
 800bcee:	6893      	ldr	r3, [r2, #8]
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	b410      	push	{r4}
 800bcf6:	6093      	str	r3, [r2, #8]
 800bcf8:	da08      	bge.n	800bd0c <__sfputc_r+0x1e>
 800bcfa:	6994      	ldr	r4, [r2, #24]
 800bcfc:	42a3      	cmp	r3, r4
 800bcfe:	db01      	blt.n	800bd04 <__sfputc_r+0x16>
 800bd00:	290a      	cmp	r1, #10
 800bd02:	d103      	bne.n	800bd0c <__sfputc_r+0x1e>
 800bd04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd08:	f000 b934 	b.w	800bf74 <__swbuf_r>
 800bd0c:	6813      	ldr	r3, [r2, #0]
 800bd0e:	1c58      	adds	r0, r3, #1
 800bd10:	6010      	str	r0, [r2, #0]
 800bd12:	7019      	strb	r1, [r3, #0]
 800bd14:	4608      	mov	r0, r1
 800bd16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <__sfputs_r>:
 800bd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1e:	4606      	mov	r6, r0
 800bd20:	460f      	mov	r7, r1
 800bd22:	4614      	mov	r4, r2
 800bd24:	18d5      	adds	r5, r2, r3
 800bd26:	42ac      	cmp	r4, r5
 800bd28:	d101      	bne.n	800bd2e <__sfputs_r+0x12>
 800bd2a:	2000      	movs	r0, #0
 800bd2c:	e007      	b.n	800bd3e <__sfputs_r+0x22>
 800bd2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd32:	463a      	mov	r2, r7
 800bd34:	4630      	mov	r0, r6
 800bd36:	f7ff ffda 	bl	800bcee <__sfputc_r>
 800bd3a:	1c43      	adds	r3, r0, #1
 800bd3c:	d1f3      	bne.n	800bd26 <__sfputs_r+0xa>
 800bd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd40 <_vfiprintf_r>:
 800bd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd44:	460d      	mov	r5, r1
 800bd46:	b09d      	sub	sp, #116	; 0x74
 800bd48:	4614      	mov	r4, r2
 800bd4a:	4698      	mov	r8, r3
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	b118      	cbz	r0, 800bd58 <_vfiprintf_r+0x18>
 800bd50:	6a03      	ldr	r3, [r0, #32]
 800bd52:	b90b      	cbnz	r3, 800bd58 <_vfiprintf_r+0x18>
 800bd54:	f7ff fb42 	bl	800b3dc <__sinit>
 800bd58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd5a:	07d9      	lsls	r1, r3, #31
 800bd5c:	d405      	bmi.n	800bd6a <_vfiprintf_r+0x2a>
 800bd5e:	89ab      	ldrh	r3, [r5, #12]
 800bd60:	059a      	lsls	r2, r3, #22
 800bd62:	d402      	bmi.n	800bd6a <_vfiprintf_r+0x2a>
 800bd64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd66:	f7ff fc2c 	bl	800b5c2 <__retarget_lock_acquire_recursive>
 800bd6a:	89ab      	ldrh	r3, [r5, #12]
 800bd6c:	071b      	lsls	r3, r3, #28
 800bd6e:	d501      	bpl.n	800bd74 <_vfiprintf_r+0x34>
 800bd70:	692b      	ldr	r3, [r5, #16]
 800bd72:	b99b      	cbnz	r3, 800bd9c <_vfiprintf_r+0x5c>
 800bd74:	4629      	mov	r1, r5
 800bd76:	4630      	mov	r0, r6
 800bd78:	f000 f93a 	bl	800bff0 <__swsetup_r>
 800bd7c:	b170      	cbz	r0, 800bd9c <_vfiprintf_r+0x5c>
 800bd7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd80:	07dc      	lsls	r4, r3, #31
 800bd82:	d504      	bpl.n	800bd8e <_vfiprintf_r+0x4e>
 800bd84:	f04f 30ff 	mov.w	r0, #4294967295
 800bd88:	b01d      	add	sp, #116	; 0x74
 800bd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8e:	89ab      	ldrh	r3, [r5, #12]
 800bd90:	0598      	lsls	r0, r3, #22
 800bd92:	d4f7      	bmi.n	800bd84 <_vfiprintf_r+0x44>
 800bd94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd96:	f7ff fc15 	bl	800b5c4 <__retarget_lock_release_recursive>
 800bd9a:	e7f3      	b.n	800bd84 <_vfiprintf_r+0x44>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	9309      	str	r3, [sp, #36]	; 0x24
 800bda0:	2320      	movs	r3, #32
 800bda2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bda6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdaa:	2330      	movs	r3, #48	; 0x30
 800bdac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bf60 <_vfiprintf_r+0x220>
 800bdb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdb4:	f04f 0901 	mov.w	r9, #1
 800bdb8:	4623      	mov	r3, r4
 800bdba:	469a      	mov	sl, r3
 800bdbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdc0:	b10a      	cbz	r2, 800bdc6 <_vfiprintf_r+0x86>
 800bdc2:	2a25      	cmp	r2, #37	; 0x25
 800bdc4:	d1f9      	bne.n	800bdba <_vfiprintf_r+0x7a>
 800bdc6:	ebba 0b04 	subs.w	fp, sl, r4
 800bdca:	d00b      	beq.n	800bde4 <_vfiprintf_r+0xa4>
 800bdcc:	465b      	mov	r3, fp
 800bdce:	4622      	mov	r2, r4
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f7ff ffa2 	bl	800bd1c <__sfputs_r>
 800bdd8:	3001      	adds	r0, #1
 800bdda:	f000 80a9 	beq.w	800bf30 <_vfiprintf_r+0x1f0>
 800bdde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bde0:	445a      	add	r2, fp
 800bde2:	9209      	str	r2, [sp, #36]	; 0x24
 800bde4:	f89a 3000 	ldrb.w	r3, [sl]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	f000 80a1 	beq.w	800bf30 <_vfiprintf_r+0x1f0>
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f04f 32ff 	mov.w	r2, #4294967295
 800bdf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdf8:	f10a 0a01 	add.w	sl, sl, #1
 800bdfc:	9304      	str	r3, [sp, #16]
 800bdfe:	9307      	str	r3, [sp, #28]
 800be00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be04:	931a      	str	r3, [sp, #104]	; 0x68
 800be06:	4654      	mov	r4, sl
 800be08:	2205      	movs	r2, #5
 800be0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be0e:	4854      	ldr	r0, [pc, #336]	; (800bf60 <_vfiprintf_r+0x220>)
 800be10:	f7f4 f9fe 	bl	8000210 <memchr>
 800be14:	9a04      	ldr	r2, [sp, #16]
 800be16:	b9d8      	cbnz	r0, 800be50 <_vfiprintf_r+0x110>
 800be18:	06d1      	lsls	r1, r2, #27
 800be1a:	bf44      	itt	mi
 800be1c:	2320      	movmi	r3, #32
 800be1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be22:	0713      	lsls	r3, r2, #28
 800be24:	bf44      	itt	mi
 800be26:	232b      	movmi	r3, #43	; 0x2b
 800be28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be2c:	f89a 3000 	ldrb.w	r3, [sl]
 800be30:	2b2a      	cmp	r3, #42	; 0x2a
 800be32:	d015      	beq.n	800be60 <_vfiprintf_r+0x120>
 800be34:	9a07      	ldr	r2, [sp, #28]
 800be36:	4654      	mov	r4, sl
 800be38:	2000      	movs	r0, #0
 800be3a:	f04f 0c0a 	mov.w	ip, #10
 800be3e:	4621      	mov	r1, r4
 800be40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be44:	3b30      	subs	r3, #48	; 0x30
 800be46:	2b09      	cmp	r3, #9
 800be48:	d94d      	bls.n	800bee6 <_vfiprintf_r+0x1a6>
 800be4a:	b1b0      	cbz	r0, 800be7a <_vfiprintf_r+0x13a>
 800be4c:	9207      	str	r2, [sp, #28]
 800be4e:	e014      	b.n	800be7a <_vfiprintf_r+0x13a>
 800be50:	eba0 0308 	sub.w	r3, r0, r8
 800be54:	fa09 f303 	lsl.w	r3, r9, r3
 800be58:	4313      	orrs	r3, r2
 800be5a:	9304      	str	r3, [sp, #16]
 800be5c:	46a2      	mov	sl, r4
 800be5e:	e7d2      	b.n	800be06 <_vfiprintf_r+0xc6>
 800be60:	9b03      	ldr	r3, [sp, #12]
 800be62:	1d19      	adds	r1, r3, #4
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	9103      	str	r1, [sp, #12]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	bfbb      	ittet	lt
 800be6c:	425b      	neglt	r3, r3
 800be6e:	f042 0202 	orrlt.w	r2, r2, #2
 800be72:	9307      	strge	r3, [sp, #28]
 800be74:	9307      	strlt	r3, [sp, #28]
 800be76:	bfb8      	it	lt
 800be78:	9204      	strlt	r2, [sp, #16]
 800be7a:	7823      	ldrb	r3, [r4, #0]
 800be7c:	2b2e      	cmp	r3, #46	; 0x2e
 800be7e:	d10c      	bne.n	800be9a <_vfiprintf_r+0x15a>
 800be80:	7863      	ldrb	r3, [r4, #1]
 800be82:	2b2a      	cmp	r3, #42	; 0x2a
 800be84:	d134      	bne.n	800bef0 <_vfiprintf_r+0x1b0>
 800be86:	9b03      	ldr	r3, [sp, #12]
 800be88:	1d1a      	adds	r2, r3, #4
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	9203      	str	r2, [sp, #12]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	bfb8      	it	lt
 800be92:	f04f 33ff 	movlt.w	r3, #4294967295
 800be96:	3402      	adds	r4, #2
 800be98:	9305      	str	r3, [sp, #20]
 800be9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bf70 <_vfiprintf_r+0x230>
 800be9e:	7821      	ldrb	r1, [r4, #0]
 800bea0:	2203      	movs	r2, #3
 800bea2:	4650      	mov	r0, sl
 800bea4:	f7f4 f9b4 	bl	8000210 <memchr>
 800bea8:	b138      	cbz	r0, 800beba <_vfiprintf_r+0x17a>
 800beaa:	9b04      	ldr	r3, [sp, #16]
 800beac:	eba0 000a 	sub.w	r0, r0, sl
 800beb0:	2240      	movs	r2, #64	; 0x40
 800beb2:	4082      	lsls	r2, r0
 800beb4:	4313      	orrs	r3, r2
 800beb6:	3401      	adds	r4, #1
 800beb8:	9304      	str	r3, [sp, #16]
 800beba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bebe:	4829      	ldr	r0, [pc, #164]	; (800bf64 <_vfiprintf_r+0x224>)
 800bec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bec4:	2206      	movs	r2, #6
 800bec6:	f7f4 f9a3 	bl	8000210 <memchr>
 800beca:	2800      	cmp	r0, #0
 800becc:	d03f      	beq.n	800bf4e <_vfiprintf_r+0x20e>
 800bece:	4b26      	ldr	r3, [pc, #152]	; (800bf68 <_vfiprintf_r+0x228>)
 800bed0:	bb1b      	cbnz	r3, 800bf1a <_vfiprintf_r+0x1da>
 800bed2:	9b03      	ldr	r3, [sp, #12]
 800bed4:	3307      	adds	r3, #7
 800bed6:	f023 0307 	bic.w	r3, r3, #7
 800beda:	3308      	adds	r3, #8
 800bedc:	9303      	str	r3, [sp, #12]
 800bede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee0:	443b      	add	r3, r7
 800bee2:	9309      	str	r3, [sp, #36]	; 0x24
 800bee4:	e768      	b.n	800bdb8 <_vfiprintf_r+0x78>
 800bee6:	fb0c 3202 	mla	r2, ip, r2, r3
 800beea:	460c      	mov	r4, r1
 800beec:	2001      	movs	r0, #1
 800beee:	e7a6      	b.n	800be3e <_vfiprintf_r+0xfe>
 800bef0:	2300      	movs	r3, #0
 800bef2:	3401      	adds	r4, #1
 800bef4:	9305      	str	r3, [sp, #20]
 800bef6:	4619      	mov	r1, r3
 800bef8:	f04f 0c0a 	mov.w	ip, #10
 800befc:	4620      	mov	r0, r4
 800befe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf02:	3a30      	subs	r2, #48	; 0x30
 800bf04:	2a09      	cmp	r2, #9
 800bf06:	d903      	bls.n	800bf10 <_vfiprintf_r+0x1d0>
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d0c6      	beq.n	800be9a <_vfiprintf_r+0x15a>
 800bf0c:	9105      	str	r1, [sp, #20]
 800bf0e:	e7c4      	b.n	800be9a <_vfiprintf_r+0x15a>
 800bf10:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf14:	4604      	mov	r4, r0
 800bf16:	2301      	movs	r3, #1
 800bf18:	e7f0      	b.n	800befc <_vfiprintf_r+0x1bc>
 800bf1a:	ab03      	add	r3, sp, #12
 800bf1c:	9300      	str	r3, [sp, #0]
 800bf1e:	462a      	mov	r2, r5
 800bf20:	4b12      	ldr	r3, [pc, #72]	; (800bf6c <_vfiprintf_r+0x22c>)
 800bf22:	a904      	add	r1, sp, #16
 800bf24:	4630      	mov	r0, r6
 800bf26:	f3af 8000 	nop.w
 800bf2a:	4607      	mov	r7, r0
 800bf2c:	1c78      	adds	r0, r7, #1
 800bf2e:	d1d6      	bne.n	800bede <_vfiprintf_r+0x19e>
 800bf30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf32:	07d9      	lsls	r1, r3, #31
 800bf34:	d405      	bmi.n	800bf42 <_vfiprintf_r+0x202>
 800bf36:	89ab      	ldrh	r3, [r5, #12]
 800bf38:	059a      	lsls	r2, r3, #22
 800bf3a:	d402      	bmi.n	800bf42 <_vfiprintf_r+0x202>
 800bf3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf3e:	f7ff fb41 	bl	800b5c4 <__retarget_lock_release_recursive>
 800bf42:	89ab      	ldrh	r3, [r5, #12]
 800bf44:	065b      	lsls	r3, r3, #25
 800bf46:	f53f af1d 	bmi.w	800bd84 <_vfiprintf_r+0x44>
 800bf4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf4c:	e71c      	b.n	800bd88 <_vfiprintf_r+0x48>
 800bf4e:	ab03      	add	r3, sp, #12
 800bf50:	9300      	str	r3, [sp, #0]
 800bf52:	462a      	mov	r2, r5
 800bf54:	4b05      	ldr	r3, [pc, #20]	; (800bf6c <_vfiprintf_r+0x22c>)
 800bf56:	a904      	add	r1, sp, #16
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f7ff fccf 	bl	800b8fc <_printf_i>
 800bf5e:	e7e4      	b.n	800bf2a <_vfiprintf_r+0x1ea>
 800bf60:	0806e509 	.word	0x0806e509
 800bf64:	0806e513 	.word	0x0806e513
 800bf68:	00000000 	.word	0x00000000
 800bf6c:	0800bd1d 	.word	0x0800bd1d
 800bf70:	0806e50f 	.word	0x0806e50f

0800bf74 <__swbuf_r>:
 800bf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf76:	460e      	mov	r6, r1
 800bf78:	4614      	mov	r4, r2
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	b118      	cbz	r0, 800bf86 <__swbuf_r+0x12>
 800bf7e:	6a03      	ldr	r3, [r0, #32]
 800bf80:	b90b      	cbnz	r3, 800bf86 <__swbuf_r+0x12>
 800bf82:	f7ff fa2b 	bl	800b3dc <__sinit>
 800bf86:	69a3      	ldr	r3, [r4, #24]
 800bf88:	60a3      	str	r3, [r4, #8]
 800bf8a:	89a3      	ldrh	r3, [r4, #12]
 800bf8c:	071a      	lsls	r2, r3, #28
 800bf8e:	d525      	bpl.n	800bfdc <__swbuf_r+0x68>
 800bf90:	6923      	ldr	r3, [r4, #16]
 800bf92:	b31b      	cbz	r3, 800bfdc <__swbuf_r+0x68>
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	6922      	ldr	r2, [r4, #16]
 800bf98:	1a98      	subs	r0, r3, r2
 800bf9a:	6963      	ldr	r3, [r4, #20]
 800bf9c:	b2f6      	uxtb	r6, r6
 800bf9e:	4283      	cmp	r3, r0
 800bfa0:	4637      	mov	r7, r6
 800bfa2:	dc04      	bgt.n	800bfae <__swbuf_r+0x3a>
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f7ff fe50 	bl	800bc4c <_fflush_r>
 800bfac:	b9e0      	cbnz	r0, 800bfe8 <__swbuf_r+0x74>
 800bfae:	68a3      	ldr	r3, [r4, #8]
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	60a3      	str	r3, [r4, #8]
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	1c5a      	adds	r2, r3, #1
 800bfb8:	6022      	str	r2, [r4, #0]
 800bfba:	701e      	strb	r6, [r3, #0]
 800bfbc:	6962      	ldr	r2, [r4, #20]
 800bfbe:	1c43      	adds	r3, r0, #1
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d004      	beq.n	800bfce <__swbuf_r+0x5a>
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	07db      	lsls	r3, r3, #31
 800bfc8:	d506      	bpl.n	800bfd8 <__swbuf_r+0x64>
 800bfca:	2e0a      	cmp	r6, #10
 800bfcc:	d104      	bne.n	800bfd8 <__swbuf_r+0x64>
 800bfce:	4621      	mov	r1, r4
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	f7ff fe3b 	bl	800bc4c <_fflush_r>
 800bfd6:	b938      	cbnz	r0, 800bfe8 <__swbuf_r+0x74>
 800bfd8:	4638      	mov	r0, r7
 800bfda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfdc:	4621      	mov	r1, r4
 800bfde:	4628      	mov	r0, r5
 800bfe0:	f000 f806 	bl	800bff0 <__swsetup_r>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d0d5      	beq.n	800bf94 <__swbuf_r+0x20>
 800bfe8:	f04f 37ff 	mov.w	r7, #4294967295
 800bfec:	e7f4      	b.n	800bfd8 <__swbuf_r+0x64>
	...

0800bff0 <__swsetup_r>:
 800bff0:	b538      	push	{r3, r4, r5, lr}
 800bff2:	4b2a      	ldr	r3, [pc, #168]	; (800c09c <__swsetup_r+0xac>)
 800bff4:	4605      	mov	r5, r0
 800bff6:	6818      	ldr	r0, [r3, #0]
 800bff8:	460c      	mov	r4, r1
 800bffa:	b118      	cbz	r0, 800c004 <__swsetup_r+0x14>
 800bffc:	6a03      	ldr	r3, [r0, #32]
 800bffe:	b90b      	cbnz	r3, 800c004 <__swsetup_r+0x14>
 800c000:	f7ff f9ec 	bl	800b3dc <__sinit>
 800c004:	89a3      	ldrh	r3, [r4, #12]
 800c006:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c00a:	0718      	lsls	r0, r3, #28
 800c00c:	d422      	bmi.n	800c054 <__swsetup_r+0x64>
 800c00e:	06d9      	lsls	r1, r3, #27
 800c010:	d407      	bmi.n	800c022 <__swsetup_r+0x32>
 800c012:	2309      	movs	r3, #9
 800c014:	602b      	str	r3, [r5, #0]
 800c016:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c01a:	81a3      	strh	r3, [r4, #12]
 800c01c:	f04f 30ff 	mov.w	r0, #4294967295
 800c020:	e034      	b.n	800c08c <__swsetup_r+0x9c>
 800c022:	0758      	lsls	r0, r3, #29
 800c024:	d512      	bpl.n	800c04c <__swsetup_r+0x5c>
 800c026:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c028:	b141      	cbz	r1, 800c03c <__swsetup_r+0x4c>
 800c02a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c02e:	4299      	cmp	r1, r3
 800c030:	d002      	beq.n	800c038 <__swsetup_r+0x48>
 800c032:	4628      	mov	r0, r5
 800c034:	f7ff faf4 	bl	800b620 <_free_r>
 800c038:	2300      	movs	r3, #0
 800c03a:	6363      	str	r3, [r4, #52]	; 0x34
 800c03c:	89a3      	ldrh	r3, [r4, #12]
 800c03e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c042:	81a3      	strh	r3, [r4, #12]
 800c044:	2300      	movs	r3, #0
 800c046:	6063      	str	r3, [r4, #4]
 800c048:	6923      	ldr	r3, [r4, #16]
 800c04a:	6023      	str	r3, [r4, #0]
 800c04c:	89a3      	ldrh	r3, [r4, #12]
 800c04e:	f043 0308 	orr.w	r3, r3, #8
 800c052:	81a3      	strh	r3, [r4, #12]
 800c054:	6923      	ldr	r3, [r4, #16]
 800c056:	b94b      	cbnz	r3, 800c06c <__swsetup_r+0x7c>
 800c058:	89a3      	ldrh	r3, [r4, #12]
 800c05a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c05e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c062:	d003      	beq.n	800c06c <__swsetup_r+0x7c>
 800c064:	4621      	mov	r1, r4
 800c066:	4628      	mov	r0, r5
 800c068:	f000 f884 	bl	800c174 <__smakebuf_r>
 800c06c:	89a0      	ldrh	r0, [r4, #12]
 800c06e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c072:	f010 0301 	ands.w	r3, r0, #1
 800c076:	d00a      	beq.n	800c08e <__swsetup_r+0x9e>
 800c078:	2300      	movs	r3, #0
 800c07a:	60a3      	str	r3, [r4, #8]
 800c07c:	6963      	ldr	r3, [r4, #20]
 800c07e:	425b      	negs	r3, r3
 800c080:	61a3      	str	r3, [r4, #24]
 800c082:	6923      	ldr	r3, [r4, #16]
 800c084:	b943      	cbnz	r3, 800c098 <__swsetup_r+0xa8>
 800c086:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c08a:	d1c4      	bne.n	800c016 <__swsetup_r+0x26>
 800c08c:	bd38      	pop	{r3, r4, r5, pc}
 800c08e:	0781      	lsls	r1, r0, #30
 800c090:	bf58      	it	pl
 800c092:	6963      	ldrpl	r3, [r4, #20]
 800c094:	60a3      	str	r3, [r4, #8]
 800c096:	e7f4      	b.n	800c082 <__swsetup_r+0x92>
 800c098:	2000      	movs	r0, #0
 800c09a:	e7f7      	b.n	800c08c <__swsetup_r+0x9c>
 800c09c:	20000080 	.word	0x20000080

0800c0a0 <_raise_r>:
 800c0a0:	291f      	cmp	r1, #31
 800c0a2:	b538      	push	{r3, r4, r5, lr}
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	460d      	mov	r5, r1
 800c0a8:	d904      	bls.n	800c0b4 <_raise_r+0x14>
 800c0aa:	2316      	movs	r3, #22
 800c0ac:	6003      	str	r3, [r0, #0]
 800c0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b2:	bd38      	pop	{r3, r4, r5, pc}
 800c0b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c0b6:	b112      	cbz	r2, 800c0be <_raise_r+0x1e>
 800c0b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0bc:	b94b      	cbnz	r3, 800c0d2 <_raise_r+0x32>
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f000 f830 	bl	800c124 <_getpid_r>
 800c0c4:	462a      	mov	r2, r5
 800c0c6:	4601      	mov	r1, r0
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ce:	f000 b817 	b.w	800c100 <_kill_r>
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d00a      	beq.n	800c0ec <_raise_r+0x4c>
 800c0d6:	1c59      	adds	r1, r3, #1
 800c0d8:	d103      	bne.n	800c0e2 <_raise_r+0x42>
 800c0da:	2316      	movs	r3, #22
 800c0dc:	6003      	str	r3, [r0, #0]
 800c0de:	2001      	movs	r0, #1
 800c0e0:	e7e7      	b.n	800c0b2 <_raise_r+0x12>
 800c0e2:	2400      	movs	r4, #0
 800c0e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	4798      	blx	r3
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	e7e0      	b.n	800c0b2 <_raise_r+0x12>

0800c0f0 <raise>:
 800c0f0:	4b02      	ldr	r3, [pc, #8]	; (800c0fc <raise+0xc>)
 800c0f2:	4601      	mov	r1, r0
 800c0f4:	6818      	ldr	r0, [r3, #0]
 800c0f6:	f7ff bfd3 	b.w	800c0a0 <_raise_r>
 800c0fa:	bf00      	nop
 800c0fc:	20000080 	.word	0x20000080

0800c100 <_kill_r>:
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	4d07      	ldr	r5, [pc, #28]	; (800c120 <_kill_r+0x20>)
 800c104:	2300      	movs	r3, #0
 800c106:	4604      	mov	r4, r0
 800c108:	4608      	mov	r0, r1
 800c10a:	4611      	mov	r1, r2
 800c10c:	602b      	str	r3, [r5, #0]
 800c10e:	f7fb ffe5 	bl	80080dc <_kill>
 800c112:	1c43      	adds	r3, r0, #1
 800c114:	d102      	bne.n	800c11c <_kill_r+0x1c>
 800c116:	682b      	ldr	r3, [r5, #0]
 800c118:	b103      	cbz	r3, 800c11c <_kill_r+0x1c>
 800c11a:	6023      	str	r3, [r4, #0]
 800c11c:	bd38      	pop	{r3, r4, r5, pc}
 800c11e:	bf00      	nop
 800c120:	20000a4c 	.word	0x20000a4c

0800c124 <_getpid_r>:
 800c124:	f7fb bfd2 	b.w	80080cc <_getpid>

0800c128 <__swhatbuf_r>:
 800c128:	b570      	push	{r4, r5, r6, lr}
 800c12a:	460c      	mov	r4, r1
 800c12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c130:	2900      	cmp	r1, #0
 800c132:	b096      	sub	sp, #88	; 0x58
 800c134:	4615      	mov	r5, r2
 800c136:	461e      	mov	r6, r3
 800c138:	da0d      	bge.n	800c156 <__swhatbuf_r+0x2e>
 800c13a:	89a3      	ldrh	r3, [r4, #12]
 800c13c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c140:	f04f 0100 	mov.w	r1, #0
 800c144:	bf0c      	ite	eq
 800c146:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c14a:	2340      	movne	r3, #64	; 0x40
 800c14c:	2000      	movs	r0, #0
 800c14e:	6031      	str	r1, [r6, #0]
 800c150:	602b      	str	r3, [r5, #0]
 800c152:	b016      	add	sp, #88	; 0x58
 800c154:	bd70      	pop	{r4, r5, r6, pc}
 800c156:	466a      	mov	r2, sp
 800c158:	f000 f848 	bl	800c1ec <_fstat_r>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	dbec      	blt.n	800c13a <__swhatbuf_r+0x12>
 800c160:	9901      	ldr	r1, [sp, #4]
 800c162:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c166:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c16a:	4259      	negs	r1, r3
 800c16c:	4159      	adcs	r1, r3
 800c16e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c172:	e7eb      	b.n	800c14c <__swhatbuf_r+0x24>

0800c174 <__smakebuf_r>:
 800c174:	898b      	ldrh	r3, [r1, #12]
 800c176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c178:	079d      	lsls	r5, r3, #30
 800c17a:	4606      	mov	r6, r0
 800c17c:	460c      	mov	r4, r1
 800c17e:	d507      	bpl.n	800c190 <__smakebuf_r+0x1c>
 800c180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	6123      	str	r3, [r4, #16]
 800c188:	2301      	movs	r3, #1
 800c18a:	6163      	str	r3, [r4, #20]
 800c18c:	b002      	add	sp, #8
 800c18e:	bd70      	pop	{r4, r5, r6, pc}
 800c190:	ab01      	add	r3, sp, #4
 800c192:	466a      	mov	r2, sp
 800c194:	f7ff ffc8 	bl	800c128 <__swhatbuf_r>
 800c198:	9900      	ldr	r1, [sp, #0]
 800c19a:	4605      	mov	r5, r0
 800c19c:	4630      	mov	r0, r6
 800c19e:	f7ff fab3 	bl	800b708 <_malloc_r>
 800c1a2:	b948      	cbnz	r0, 800c1b8 <__smakebuf_r+0x44>
 800c1a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1a8:	059a      	lsls	r2, r3, #22
 800c1aa:	d4ef      	bmi.n	800c18c <__smakebuf_r+0x18>
 800c1ac:	f023 0303 	bic.w	r3, r3, #3
 800c1b0:	f043 0302 	orr.w	r3, r3, #2
 800c1b4:	81a3      	strh	r3, [r4, #12]
 800c1b6:	e7e3      	b.n	800c180 <__smakebuf_r+0xc>
 800c1b8:	89a3      	ldrh	r3, [r4, #12]
 800c1ba:	6020      	str	r0, [r4, #0]
 800c1bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1c0:	81a3      	strh	r3, [r4, #12]
 800c1c2:	9b00      	ldr	r3, [sp, #0]
 800c1c4:	6163      	str	r3, [r4, #20]
 800c1c6:	9b01      	ldr	r3, [sp, #4]
 800c1c8:	6120      	str	r0, [r4, #16]
 800c1ca:	b15b      	cbz	r3, 800c1e4 <__smakebuf_r+0x70>
 800c1cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	f000 f81d 	bl	800c210 <_isatty_r>
 800c1d6:	b128      	cbz	r0, 800c1e4 <__smakebuf_r+0x70>
 800c1d8:	89a3      	ldrh	r3, [r4, #12]
 800c1da:	f023 0303 	bic.w	r3, r3, #3
 800c1de:	f043 0301 	orr.w	r3, r3, #1
 800c1e2:	81a3      	strh	r3, [r4, #12]
 800c1e4:	89a3      	ldrh	r3, [r4, #12]
 800c1e6:	431d      	orrs	r5, r3
 800c1e8:	81a5      	strh	r5, [r4, #12]
 800c1ea:	e7cf      	b.n	800c18c <__smakebuf_r+0x18>

0800c1ec <_fstat_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4d07      	ldr	r5, [pc, #28]	; (800c20c <_fstat_r+0x20>)
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	4608      	mov	r0, r1
 800c1f6:	4611      	mov	r1, r2
 800c1f8:	602b      	str	r3, [r5, #0]
 800c1fa:	f7fb ffce 	bl	800819a <_fstat>
 800c1fe:	1c43      	adds	r3, r0, #1
 800c200:	d102      	bne.n	800c208 <_fstat_r+0x1c>
 800c202:	682b      	ldr	r3, [r5, #0]
 800c204:	b103      	cbz	r3, 800c208 <_fstat_r+0x1c>
 800c206:	6023      	str	r3, [r4, #0]
 800c208:	bd38      	pop	{r3, r4, r5, pc}
 800c20a:	bf00      	nop
 800c20c:	20000a4c 	.word	0x20000a4c

0800c210 <_isatty_r>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	4d06      	ldr	r5, [pc, #24]	; (800c22c <_isatty_r+0x1c>)
 800c214:	2300      	movs	r3, #0
 800c216:	4604      	mov	r4, r0
 800c218:	4608      	mov	r0, r1
 800c21a:	602b      	str	r3, [r5, #0]
 800c21c:	f7fb ffcd 	bl	80081ba <_isatty>
 800c220:	1c43      	adds	r3, r0, #1
 800c222:	d102      	bne.n	800c22a <_isatty_r+0x1a>
 800c224:	682b      	ldr	r3, [r5, #0]
 800c226:	b103      	cbz	r3, 800c22a <_isatty_r+0x1a>
 800c228:	6023      	str	r3, [r4, #0]
 800c22a:	bd38      	pop	{r3, r4, r5, pc}
 800c22c:	20000a4c 	.word	0x20000a4c

0800c230 <_init>:
 800c230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c232:	bf00      	nop
 800c234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c236:	bc08      	pop	{r3}
 800c238:	469e      	mov	lr, r3
 800c23a:	4770      	bx	lr

0800c23c <_fini>:
 800c23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23e:	bf00      	nop
 800c240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c242:	bc08      	pop	{r3}
 800c244:	469e      	mov	lr, r3
 800c246:	4770      	bx	lr
